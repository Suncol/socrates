              SOCRATES Version history from december 1998
              -------------------------------------------

The codes given by Rashid Khoshravi (RK) are:

socrates3.0.tar.gz - renamed socrates3.c0.tar.gz
------------------------------------------------
A working version where the only big improvement compared
with versions 2 held at ACD are Stacy'new chemistry with preprocessor.
See RK's email 1-dec-1998, "status of socrates". Source code kept in
/home/simonc/socrates/ascii/frozen/socrates3.c00.tar.gz

socrates3.tar.gz - renamed socrates3.c8.tar.gz
----------------------------------------------
A later version which includes, beside Stacy's new chemistry, Rashid's
new parameterization of H2O condensation and transport, and Ann Smith's first
step in improving the planetary wave parameterization. This version crashes
after 6.5 years. See RK's email 2-dec-1998, "socrates3 on the web".
For consistency, this version renamed v3.1 in my own revision numbering. 
Source code kept in /home/simonc/socrates/ascii/frozen/socrates3.c08.tar.gz
Extracted to /unicos_home/simonc/socrates/v3.1
Input namelist in v3.1/in slightly modified to v3.1/10yr.c8.inp

The initial conditions provided (restr_9.28.95, added .nc) do not seem to come
from SOCRATES output (look at T field). What origin?

Modifs brought to Makefile to get compilation ok on hal.oma.be:
- removed all compilation options (except -c)
- moved compilation of phot.mod.o before pho_xface.mod.o 
- corrected "time2date" to "time2date.f"
- removed "second.dec.f", empty second line
- removed command to link executable "socrates", replaced it by
  "all :	$(src_obj)"

socrates3 requires netCDF3.4 -> Copied 
//paiute.ucar.edu/usr/local/lib/libnetcdf.a to /unicos_home/simonc/libnetcdf34.a
Linking to this library.

Modifs brought to source code to get compilation ok on hal.oma.be:
- chemdr.f, initialization of sub_delt(4,2) moved to .not. entered statements
- force1.f: t_save was set to t2d only in .not. entered while t_save was local
  and not saved. Declaring t_save with the "save" attribute. 
  Other possibility: replace t_save by t2d ie calc thermal diffusion with
  interactive temp. n5=1 in force1.f TO CORRECT!!!
  
"Floating point exception" in subroutine CHEMDR, at very first time step.

socrates3.c66.tar.gz - WORKS
----------------------------
Version presented by Rashid at Brussels, see RK's email 23-feb-1999,
"current SOCRATES".
Same modifs than for v3.c8, plus:
- gravity.aks2.f: initialization of afac and u00 to scalar, not 1-element vector
- wave1.f, routine WBOUND has hard-coded data path, reprogrammed more cleanly
  THIS ROUTINE/FILENAME IS PROBABLY SOURCE FOR GRAVITY WAVE (?)
- sim_cont.mod.f, module SIM_CONTROLS: length of string data_dir was 32, too
  short; set to 64. Dummy arg data_dir set to 64 in read_temp.f

"Floating point exception" in subroutine CHEMDR, at very first time step, found
again. Cause: line 364: delti = 1./delt, where delt=sub_delt(sub_tstep,1)=0.
because sub_delt was local, not saved, and now initialized in the program i.o.
in the declarations. Declaring sub_delt with the "save" attribute.
-> 10-year run works fine. See email from me (SC) to RK, 1-mar-99,
"SOCRATES3.c66-succesful 10-years run".

v3s67: Lyman-a param implementation - WORKS
-------------------------------------------
Based on v3c66 (cxx=from RK, sxx=from SC)
Added read_save.f, to compile and use i.o. read_save.old.f when restarting from
an IC file generated by v3 run (list of species names was corrected in v3).
Added Lyman-alpha param (Chabrillat and Kockarts, 1997) found in 
hercules://~/socrates/old_src/, described in SOCRATES notebook at 14 jul 1997 :
- Replaced kockart.f by lya_sr.f where Lyman-a param added
- Added sw_lya=.true. in module SIM_CONTROLS
- Added rmlya and ro2lya in module PHO_VARS
- Removed KOCKART and PHORAT entries in module PHO_XFACE
- Modified PHORAT and PHODIS following old_src
- Updated DESCRIBE_SIM
Keeping Lyman-a flux to 4.88e11 phot/cm2/s and crs(H20)=1.44e-17 in crs97.dat
even though these should be updated to (varsolflux) and 1.53e-17 .
Results: file v3s67_2yr.arch.nc : almost no diff for T, CO2, H2O. Biggest 
changes for CH4, where absolute diff is biggest at lat=-30 (for sim date Jan/1),
where param makes CH4 decrease from 1.5e-7 to 1.2e-7. CO2/CO and CH4/H2 changes 
are anti-correlated since the J were modified.

v3s68: radiative (5.3 um) cooling by NO - WORKS
-----------------------------------------------
Notice on CO2 cooling rate using Fomichev98: although my v2.1c and the new v3c66
both use Fomichev98, the cooling rate profile is very different : in v2.1, it
reaches max of +/- 100K/day around 110km then decreases (as in Fomichev's paper)
but in v3c66 it keeps increasing up to 180 K/day at 120km. Cause: in v3c66 (and
afterwards), Kzz between 110-120km bigger, thus CO2 bigger (decreases less
quickly when going up), eg CO2 3 times bigger at 120km, thus cool rate bigger.

Implementation of radiative cooling (NLTE, cool-to-space, at 5.3um) by NO,
following Kockarts, GRL Vol.7, p.137, 1980.
- Added q5 in module TAU4 (file rad2.mod.f)
- Created kockarts80.f wich calculates q5
- Replaced co2cool.fmchv98.f by cool_rate.f where added new term q5
- Modified socrates.f and Makefile accordingly
Results: file v3s68_2yr.arch.nc : important change for qcool at top boundary
(qcool change eg from 220 K/day to 270 K/day) but makes almost no diff for T
(decreases by 0.7K at 118km) because upper boundary cond on T is fixed T, not 
heat flux.


v3s69: radiative (9.6 um) cooling by O3 above 60 km - WORKS
-----------------------------------------------------------
Notice: I assume that this cooling is already taken in account below 50(60)km,
through call HECOL -> var cool (module CTO) - check in Theresa'a report, p.19,
thus in Briegleb (1992).

Implementation of radiative cooling (LTE, radiative exchange, at 9.6um) by O3,
using original code sent by Fomichev, as adapted to Fortran90 in 
hercules://~/fomichev98/orig_f90
- Added q3 in module TAU4 ; useless q2 removed from module TAU1 (file rad2.mod.f)
- Modifed and added code in fomichev98.f which now calulates q3 and q4
- Removed file fomichev98_data.f, its subroutine now contained by fomichev98.f
- Modified Makefile accordingly
- Modified cool_rates.f to add q3 every place where q4 is used
- Modified Makefile accordingly
Results: file v3s69_2yr.arch.nc : the temperature structure does change in a
small, but non-negligible way, around the stratopause. The biggest change in T 
is at end of may, -75deg, 60km, where T decreases from 252K (in v3s68) to 
246K (in v3s69). Noticeably, the total cooling rate changes the most at the same
date and latitude, but higher up: at 83km, qcool increases from 19.5K/day (in
v3s68) to 22K/day (in v3s69). qccol increases by 10-15% at most.

v3s70: Correcting moldiff and UBC for most species - WORKS
----------------------------------------------------------
Found out that all v3 versions had molecular diffusion OFF for all species
but H, H2, O(3P) and O2. The upper boundary conditions for these species are
inconsistently specified in file boundy.f: although we still have
flxub(:,vid_h)  = 3.e7  ...and...      flxub(:,vid_h2) = 3.e7 at end, this is
not taken in account since the following species have a ubc set to specified
vmr: H, H2, O2, O(3P) and O3, O(1D), NO, NO2
!BUT!! This vmr is specified only for:
ubmr(:,vid_h2) = 1.66e-6 ;   ubmr(:,vid_h) = 5.e-6 ;   ubmr(:,vid_o2) = .08
ubmr(:,vid_o3p) = .99 - (xmixn2(121) + xmixo2(121)) ;  ubmr(:,vid_no) = 5.e-5 
BUG: thus, the species O3, O(1D), NO2 have UB vmr set to 0 (default value).

File boundy.f :
Removing ubc=specified for these 3 species: their ubc set to flux=0 (default)
again. Removing unused flxub=3e7 for H and H2.
File moldiff.f :
Setting again wmole (thus taking molecular diffusion in account again) for 
NO, O3, O(1D), NO2. results much better, even for the 3 last ones which have ubc
as flux=0. Hence, setting wmole for ALL species in moldiff.f (CO2 important).
Moldiff for CO2 decreases its vmr by factor 2 above 85km, but makes small
discontinuity at 59km after 20-day run (for CO2 only) -> removing lower limit 
alt where moldiff calculated (was k=60, ie 59km).
Results: much better upper profiles for all species, less CO2 -> less cooling
-> T higher in thermosphere.

v3s71: New CO2 cross-section, 1st trial crs(CO2) still T-independent - WORKS
----------------------------------------------------------------------------
v3s71->v3s74 concerned with CO2 t-dep crs, see Lewis/Carver:1983 .
Only change: replaced crs97.dat by crs99.dat, see
hercules://home/simonc/crs/co2tdep
Since crscor.f not modified yet, using the crs at 300K as before, only
difference is that the interpolation to model grid is better.
Resulting changes: negligible, as expected. CO2 slightly (less than 1% most of
the time) decreased, ie J increased.
Notice: biggest change in polar night after 1yr sim (Feb/5/2008), at 85km. 
This is clearly a transport feedback, as w is most negative there, bringing 
CO2-poorer air from above at lower latitudes, and accumulating it at the same 
place. Thus transport can amplify a small photochemical perturbation in the MLT 
(look at CO2 difference after 1mo sim, it is biggest in polar day but very very 
small). This amplification seems to take +-1yr.

v3s72: CO2 cross-section is T-dependent - WORKS
-----------------------------------------------
crscor.f completed. Results disappointing: very small changes, even for 10yr
run. CO2 profiles end to same value at upper boundary, even though new J(CO2)
are most different at upper boundary, moldiff is on with ubc(co2):flux=0.


v3s72a - Obelix implementation based on v3s72 - WORKS
-----------------------------------------------------
netCDF issues:
- Finishing netCDF2.x (removed from nf_new.mod.f) to netCDF3.x upgrade, : 
nf_utils.mod.f, line 811, call to NCSFIL replaced by NF_SET_FILL (same args)
archive_init.f, param ncfloat replaced by nf_float
- Integer type conflict when arch.f calls OPEN_FILE (nf_utils.mod.f) with parm
NF_WRITE: both arch.f and nf_utils.mod.f expect integer*8, but nf_write declared in
nf_new.mod.f as integer*4. Cross-platform solution: in subroutine OPEN_FILE
(nf_utils.mod.f), declare:    integer(kind=KIND(nf_write)), intent(in) :: mode 
- Same isuue, same solution, subroutine NETCDF_VAR_DEF, declare:
      integer(kind=KIND(nf_float)), intent(in)  :: vartype
- Same issue, archive_init.f calls NETCDF_DIM_DEF (nf_utils.mod.f) with dummy arg
dim_size=parm nf_unlimited (int*4), cannot use same solution since NETCDF_DIM_DEF 
is also called with dim_size=35 or 121 (int*8), so archive_init.f: replace
nf_unlimited by 0 (is same, plus nf_unlimited explicitly re-used when 
NETCDF_DIM_DEF calls NF_DEF_DIM for 'time'). Same for diuvarch_init.f
- Removed useless use NETCDF_UTILS from socrates.f

Other issues:
- second.hp.f put in src directory and Makefile
- As for v2.0, replace subroutines CGEDI by CGEDI_F90 and CGEFA by CGEFA_F90 ;
Replaced calls in wave1.f (+interface) and put all files cgedi.f, cgefa.f, 
linpol.f, tridla.f, trislv.f, band_fac.f and band_slv.f in one file numerical.f
- Corrected out-of-bound array adressing bug found by HP f90 v2.0 : chemdr.f,
line 261 & 262: t2dp dimensioned to (35,45) in module TNMC -> taero set from
t2dp below iz=46 as when ABS(phid) < 65.


v3s73: new vertical diffusion scheme - WORKS
--------------------------------------------
The efficiency in vdiff.f of the upper boundary conditions settings is not
clear. Replacing vdiff.f by vdiff_new.f, from the 1D model under development, 
hercules://home/simonc/dvpt/src/diffus_vert.f .
chemdr.f: now calls VDIFF_NEW, with other arguments than VDIFF .
File moldiff.f is removed (now useless). socrates.f: call to MOLDIFF removed.
describe_sim.f: switch n7 removed.
File dynam.mod.f, module VEN9: removed variables xmz, wdif (now useless).
crs(CO2) is temperature independent, as in v3s71.
Results comparing after 5mo w/v3s71: vmr of most species at u.b. (including CO2)
decrease by 15%, 40% for heavier species such as HCl. Small changes in 
troposphere - biggest for O3 at 85N, surface: increase from 5.8e-8 to 7.8e-8 .
These results OK, not spectacular, but could allow CO2 to move more when
changing crs (see v3s74).
Tried setting ubc for H and H2 to flux=1e8 molec/cm2/s . H2 at 120km increases
by factor 4 to 8, neat smooth variation with latitude, but H increases too much
at some places and goes below 0 in polar night. Situation similar to but not as
bad as previous vert diff formulation. Maybe moldiff is OK but eddy diff not
strong enough. Setting ubc(H):vmr=5e-6 and ubc(H2):vmr=1.66e-6 as before.

v3s74: T-dep crs(CO2) - WORKS
-----------------------------
v3s74 corresponds to v3s72 in the same way as v3s73 corresponds to v3s71 (new
vert diff scheme, phot.mod.f, crsget.f and crscor.f completed with crst(co2)) .
Results: comparing with v3s73: negligible differences (<1%) for CO2, qcool, 
and temperature. [CO] decreases by max 40% at 60km, worth mentioning for paper.
NOTICE: O2 re-initialised to xmixo2 for any run of socrates.f: necessary or
CHEMDR solver blows up at beginning of run - maybe O2 should be saved for 3 last
tsteps, as o3 and no??

v3s75: flux upper boundary conditions - WORKS
---------------------------------------------
Taken from old versions, see boundy.f . O2 (and BrCl, CH3OOH, ..) are read in 
initial conditions file - the "orig" 1995 initcond.nc wouldn't work any more.
Compared results of 10yr run with v3s72a, wich uses old vdiff but the same
boundy.f : small differences at upper limit, result for upper H2 better with
v3s75 (ie with vdiff_new.f).

DEVELOPMENT OF MODEL FOLLOWS FROM THIS VERSION TO v4s001 - see myversions_v4.txt

________________________________________________________________________________


v3s76: Corrected thermal conductivity calculation in force1.f - FAILS
---------------------------------------------------------------------
force1.f simplified : straightforward calculation of thermal diffusivity xtz
from thermal conductivity, calc of xtz was cumbersome, see notebook 03/05/1999. 
Module VEN5 (dynam.mod.f) : removed useless fi, fm, ft .
Expected no big change, since thermal conductivity seemed not very important
from looking at a preliminary run of v3s75 with n5=0 (no thermal conductivity)
which gave only slight diff in T profile above 105km.
Result from 2 years run: surprising, unstable run crashes after 15mo with
negative T detected in BVFREQ. Most unstable features seem dynamical.

v3s77: Merged two 5-days loops into one - new CHEM_HEAT - FAILS
---------------------------------------------------------------
Talked with Guy, said that 5-days integration of temp seemed to big timestep
and cause for frequent temp instabilities. Actually temp is integrated by 1 day
5 times in its separate loop. So merging it in one big loop: modifs similar to 
those from Rev2 to Rev2a (see myversions4.txt).
No changes in sim_cont.mod.f . Modified only socrates.f, check_ctrls.f : 
Kept daypas(=5.) and ntstep(=total nb of 5-days steps of sim)
Removed nstep(=1) and dt(=5.*86400)
Set dtwave = dtchem ; replaced dd by dtwave_s
Replaced chem_steps(=5/1) and dyn_steps(=5) by ndaypas(=5)
Replaced daynum2 by existing daynum
Replaced dyn_step and chm_step by step 
Removed useless declaration and calculation of try
Replaced sol_chm_heat.f and heat_diavg.f by sol_heat_rates.f and chem_heat.f,
with the HEAT_DIAVG split over the two. chem_heat.f has a complete calculation
not based on PCE any more. 
Bad results: crash with strato temp >350K after 3 months, detected by CHRCMS.
Notice O2 much too low in thermosphere (min vmr = 1e-3)!

v3s78: CHEM_HEAT and SOL_HEAT_RATES enhanced - FAILS
----------------------------------------------------
The problem seems to come from chemical heating (see SolHeat, which contains
ChemHeat, in polar night). CHEM_HEAT: replacing xmixo2 by qn2(vid_o2). For
consistency, in FORCE1: using constant awmole i.o. interactive wm.
In SOL_CHM_HEAT: replacing xmixo2 by qn2(vid_o2). Still crashes.
HEAT_DIAVG re-put in the code as before v3s77.
Heating (and J) rates are now calculated *every* day!
Many other slight improvements were tried, and slight step backs (eg reverting
to pre-v3s76 force1.f) as well, but still the temp goes > 350K after 2-3 months. 
There *seems* to be a positive feedback loop between O3 and solar heating 
rate - see fort.53 .


To do list
----------
- crscor.f: limit T used for crs(jclono2) from 220. to 298. K
- force1.f: sever couplings in new xtz calc: use initcond t_save i.o. t2d
- strcal_lb.f : calculation of mass stream function xm(l,:) = rs * x(l,:)
  uses rs (module VEN8) calculated in socrates.f from bogus, constant ro .
- Implement effect of molecular diffusion of O(3P) on temperature, as a
  velocity.
- Add reaction CO+O+M->CO2+M and CO+OH->CO2+H, rate csts see Roble in AGU
  monograph "Upper Mesosphere/Thermosphere", Johnson & Killeen editors
