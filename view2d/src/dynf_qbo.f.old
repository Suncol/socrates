! tropical qbo forcing by kelvin waves and rossby gravity waves
   
      subroutine dynf_qbo(ftropic)
        
        use TIME_CONTROLS
        use PHYS_CST, only : R0, g0                  ! effective planet radius(km)
        use GRID_DIMS, only : lmax, niz              ! dimension of horizontal and vertical
        use ALLCO, only : dlatr, omp_lats, zkm
        use VEN2, only : u                           ! zonal mean zonal wind
        use TROPOPAUSE, only : izm                   ! tropopause height index
        use ZGRID, only : Hair                       ! lmax x niz matrix scale height

        implicit none

        !-------------------------------------------------------------------------
        ! slow damping
        real,parameter :: a1 = 7.5257e-4
        real,parameter :: a2 = 0.69897
        
        ! fast damping
        !   real,parameter :: a1 = 1.7474e-3
        !   real,parameter :: a2 = 0.30103
        
        ! Dominant Kelvin wave(wavenumber 1,eastward propagation) and Rossby-gravity wave(wavenumber 4,westward propagation),
        ! phase speed c,wavenumber k,and momentum flux at z0,A(Z0). a:Earth radius(6837km)
        
        ! c1, k1, A1 for Kelvin wave (eastward)
        real,parameter :: c1 = 25.0                         ! unit in m/s  
        real,parameter :: k1 = 1.0/(R0*1000.0)              ! unit in m-1
        real,parameter :: MF1 = 12.5e-3                      ! unit in m2/s2

        ! c2, k2, A1 for Rossby-gravity wave (westward)
        real,parameter :: c2 = -25.0
        real,parameter :: k2 = 4.0/(R0*1000.0)
        real,parameter :: MF2 = 15.0e-3

        real,parameter :: N = 2.16e-2                       ! boyancy frequecy in s-1
        real,parameter :: H = 7.0                           ! scale height
        real,parameter :: beta = 2.28e-11                   ! unit in m-1s-1

        real :: omega1, omega2, alpha
        real :: z0, dy, y                                   ! dy = dlatr * R0 unit in km
        real :: Yl2_kelvin, YL2_Rossby

        integer :: lmid, ind, l, i

        real,dimension(niz) :: P1=0., P2=0., F1=0., F2=0.
        real,dimension(niz) :: ff1=0., ff2=0., D1=0., D2=0.
        real,dimension(lmax,niz) :: ftropic
        ftropic = 0.

        lmid = (lmax+1)/2        ! Equator index
        ind = izm(lmid)          ! Equator tropopause height index
        z0 = zkm(ind)            ! tropopause height
        !-------------------------------------------------------------------------
        ! The forcing of Kelvin wave and Rossby wave
        ! D1 is dissipating rate for Kelvin wave, D2 for Rossby wave. For simulating QBO, we choose slow damping.
        do i = ind, niz
            if (zkm(i)>=30) then
               alpha = 1.0/86400.0*exp(-2.3*(a1*(zkm(i)-50.)**2+a2)) ! lmax x niz matrix
            else if (zkm(i)<=30) then
               alpha = (4.0e-7)+(8.0e-7)*(zkm(i)-z0)/13.0
            end if
            D1(i) = (alpha*N)/(k1*(c1-u(lmid,i))**2)
            D2(i) = (alpha*N)/(k2*(c2-u(lmid,i))**2)
            D2(i) = D2(i)*(beta/(k2**2*(u(lmid,i)-c2))-1)
            if (i > ind) then
               P1(i) = P1(i-1) + D1(i) * (zkm(i)-zkm(i-1))*1.0e3
               F1(i) = MF1*exp((zkm(i)-z0)/H)*D1(i)*exp(-1.*P1(i))

               P2(i) = P2(i-1) + D2(i) * (zkm(i)-zkm(i-1))*1.0e3
               F2(i) = MF2 * exp( (zkm(i)-z0) / H)*D2(i)*exp(-1 * P2(i))
            end if
        end do

        ! To simulate the meridional extension of QBO, a Gaussian distribution about equator with function exp(-y*y/(Yl*Yl) is
        ! applied to forcing. y is distance in the meridional direction

        ! For kelvin wave:
        omega1 = k1*c1
        YL2_kelvin = 2*omega1*1.0e-6/(k1*beta)          !unit in km2

        ! For Rossby gravity wave
        omega2 = k2*c2
        YL2_Rossby = 2*omega2*1.0e-6/(beta*(beta/omega2 - k2))     !unit in km2

        dy = dlatr * R0               ! latitude step, unit in km
        do l = 1, lmax
           if (abs(omp_lats(l)) <= 30.0) then
              y = dy * abs(omp_lats(l))
              ff1(:) = F1(:) * exp((-1*y**2)/YL2_kelvin)
              ff2(:) = F2(:) * exp((-1*y**2)/YL2_Rossby)
              ftropic(l,:) = ff1(:) - ff2(:)
            end if
        end do

      end subroutine dynf_qbo

