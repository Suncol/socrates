! subversion Id for THIS file : $Id: preprocessed.f 8506 2016-01-28 10:09:58Z simonc $
! $URL: http://svn-ae/ae/COMMON/stand-alone/atmos_models/socrates/tags/07.18.01/src/preproc/preprocessed.f $
!-----------------------------------------------------------------------
! DO NOT EDIT THIS FILE!! It was automatically written by
! the socpp program. Use that program and its *.in input file
! (see directory preproc/ ) to overwrite it
!============================================================

      subroutine IMP_PROD_LOSS( prod
     $,                         loss
     $,                         y
     $,                         rxt
     $,                         het_rates
     $,                         converged
     $,                         kl, ku )
!--------------------------------------------------------------------
!       ... Production and loss for Implicit method
!--------------------------------------------------------------------

      use RXT_NAMES
      use SPC_NAMES


      implicit none

!--------------------------------------------------------------------
!     ... Dummy arguments
!--------------------------------------------------------------------
      integer, intent(in)   ::  kl, ku
      real, intent(out)   ::  prod(4,56)
      real, intent(out)   ::  loss(4,56)
      real, intent(in)    ::  y(4,56)
      real, intent(in)    ::  rxt(4,202)
      real, intent(in)    ::  het_rates(4,7)
      logical, intent(in)   ::  converged(4)

!--------------------------------------------------------------------
!     ... Local variables
!--------------------------------------------------------------------
      integer ::  k

      do k = kl,ku
         if( .not. converged(k) ) then
            loss(k,12) = ((rxt(k,rid_b38) +rxt(k,rid_b39))
     $           *y(k,vid_o1d) + rxt(k,rid_jn2o))*y(k,vid_n2o)
            prod(k,12) =rxt(k,rid_hk21)*y(k,vid_o1d)
            loss(k,33) = ((rxt(k,rid_c1) +rxt(k,rid_c1a) +
     $           rxt(k,rid_c1b))*y(k,vid_o1d) +rxt(k,rid_c2)
     $           *y(k,vid_oh) +rxt(k,rid_d5)*y(k,vid_cl)
     $            + rxt(k,rid_jch4))*y(k,vid_ch4)
            prod(k,33) = 0.
            loss(k,36) = (rxt(k,rid_a1et)*y(k,vid_o1d)
     $            + rxt(k,rid_jh2o))*y(k,vid_h2o)
            prod(k,36) = (rxt(k,rid_a17)*y(k,vid_ho2) +
     $           rxt(k,rid_a19)*y(k,vid_h2) +
     $           rxt(k,rid_a30)*y(k,vid_h2o2) +
     $           rxt(k,rid_a82)*y(k,vid_oh) +
     $           rxt(k,rid_b27)*y(k,vid_hno3) +
     $           rxt(k,rid_b28)*y(k,vid_ho2no2) +
     $           rxt(k,rid_c2)*y(k,vid_ch4) +
     $           rxt(k,rid_c8)*y(k,vid_ch2o) +
     $           rxt(k,rid_c17)*y(k,vid_ch3ooh) +
     $           rxt(k,rid_c44)*y(k,vid_ch3ooh) +
     $           rxt(k,rid_d0)*y(k,vid_ch3cl) +
     $           rxt(k,rid_d11)*y(k,vid_hcl) +
     $           rxt(k,rid_d34)*y(k,vid_hocl) +
     $           rxt(k,rid_d50)*y(k,vid_ch3ccl3) +
     $           rxt(k,rid_d52)*y(k,vid_hcfc22) +
     $           rxt(k,rid_e0)*y(k,vid_ch3br) +
     $           rxt(k,rid_e1)*y(k,vid_chbr3) +
     $           rxt(k,rid_e11)*y(k,vid_hbr))*y(k,vid_oh)
     $            +rxt(k,rid_a23c)*y(k,vid_ho2)*y(k,vid_h)
            loss(k,31) = (rxt(k,rid_c3)*y(k,vid_o3p) +rxt(k,rid_a36)
     $           *y(k,vid_oh))*y(k,vid_co)
            prod(k,31) = (rxt(k,rid_jch2o_h) +rxt(k,rid_jch2o_h2) +
     $           rxt(k,rid_c8)*y(k,vid_oh) +
     $           rxt(k,rid_c9)*y(k,vid_o3p) +
     $           rxt(k,rid_c10)*y(k,vid_no3) +
     $           rxt(k,rid_d10)*y(k,vid_cl) +
     $           rxt(k,rid_e9)*y(k,vid_br))*y(k,vid_ch2o)
     $            +rxt(k,rid_jco2)*y(k,vid_co2)
     $            +rxt(k,rid_d1)*y(k,vid_cl)*y(k,vid_ch3cl)
            loss(k,40) = (rxt(k,rid_d85)*y(k,vid_o3p)
     $            +rxt(k,rid_d75)*y(k,vid_o1d) +rxt(k,rid_d11)
     $           *y(k,vid_oh) + (rxt(k,rid_het5) +
     $           rxt(k,rid_PMChet5))*y(k,vid_hocl)
     $            + (rxt(k,rid_het2) +rxt(k,rid_PMChet2))
     $           *y(k,vid_clono2) + (rxt(k,rid_het4) +
     $           rxt(k,rid_PMChet4))*y(k,vid_n2o5) + rxt(k,rid_jhcl)
     $            + het_rates(k,4))*y(k,vid_hcl)
            prod(k,40) = (2.000*rxt(k,rid_d1)*y(k,vid_ch3cl) +
     $           rxt(k,rid_d5)*y(k,vid_ch4) +
     $           rxt(k,rid_d6)*y(k,vid_h2) +
     $           rxt(k,rid_d7)*y(k,vid_ho2) +
     $           rxt(k,rid_d10)*y(k,vid_ch2o) +
     $           rxt(k,rid_d84)*y(k,vid_h2o2))*y(k,vid_cl)
     $            + (rxt(k,rid_d8a)*y(k,vid_oh) +
     $           rxt(k,rid_d33a)*y(k,vid_ho2))*y(k,vid_clo)
            loss(k,32) = (rxt(k,rid_e81)*y(k,vid_o3p)
     $            +rxt(k,rid_e71)*y(k,vid_o1d) +rxt(k,rid_e11)
     $           *y(k,vid_oh) + het_rates(k,7))*y(k,vid_hbr)
            prod(k,32) = (rxt(k,rid_e7)*y(k,vid_ho2) +
     $           rxt(k,rid_e9)*y(k,vid_ch2o))*y(k,vid_br)
            loss(k,23) = ( + rxt(k,rid_jco2))*y(k,vid_co2)
            prod(k,23) = (rxt(k,rid_a36)*y(k,vid_oh) +
     $           rxt(k,rid_c3)*y(k,vid_o3p))*y(k,vid_co)
            loss(k,37) = (rxt(k,rid_a24)*y(k,vid_o3p)
     $            +rxt(k,rid_a3et)*y(k,vid_o1d) +rxt(k,rid_a19)
     $           *y(k,vid_oh) +rxt(k,rid_d6)*y(k,vid_cl))
     $           *y(k,vid_h2)
            prod(k,37) =rxt(k,rid_c1a)*y(k,vid_o1d)*y(k,vid_ch4)
     $            +rxt(k,rid_jch2o_h2)*y(k,vid_ch2o)
     $            +rxt(k,rid_a23b)*y(k,vid_ho2)*y(k,vid_h)
            loss(k,41) = (rxt(k,rid_c9)*y(k,vid_o3p) +rxt(k,rid_c8)
     $           *y(k,vid_oh) +rxt(k,rid_d10)*y(k,vid_cl)
     $            +rxt(k,rid_c10)*y(k,vid_no3) +rxt(k,rid_e9)
     $           *y(k,vid_br) + rxt(k,rid_jch2o_h)
     $            + rxt(k,rid_jch2o_h2) + het_rates(k,6))
     $           *y(k,vid_ch2o)
            prod(k,41) = (rxt(k,rid_c1a)*y(k,vid_o1d) +
     $           rxt(k,rid_c1b)*y(k,vid_o1d))*y(k,vid_ch4)
     $            + (rxt(k,rid_jch3ooh) +rxt(k,rid_c44)*y(k,vid_oh))
     $           *y(k,vid_ch3ooh) +rxt(k,rid_c5)*y(k,vid_ch3o2)
     $           *y(k,vid_no)
            loss(k,3) = (rxt(k,rid_d101)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc10))*y(k,vid_cfc10)
            prod(k,3) = 0.
            loss(k,4) = (rxt(k,rid_d102)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc11))*y(k,vid_cfc11)
            prod(k,4) = 0.
            loss(k,5) = (rxt(k,rid_d103)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc12))*y(k,vid_cfc12)
            prod(k,5) = 0.
            loss(k,6) = (rxt(k,rid_d104)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc113))*y(k,vid_cfc113)
            prod(k,6) = 0.
            loss(k,7) = (rxt(k,rid_d105)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc114))*y(k,vid_cfc114)
            prod(k,7) = 0.
            loss(k,8) = (rxt(k,rid_d106)*y(k,vid_o1d)
     $            + rxt(k,rid_jcfc115))*y(k,vid_cfc115)
            prod(k,8) = 0.
            loss(k,22) = (rxt(k,rid_d107)*y(k,vid_o1d)
     $            +rxt(k,rid_d52)*y(k,vid_oh) + rxt(k,rid_jhcfc22))
     $           *y(k,vid_hcfc22)
            prod(k,22) = 0.
            loss(k,10) = (rxt(k,rid_d50)*y(k,vid_oh)
     $            + rxt(k,rid_jch3ccl3))*y(k,vid_ch3ccl3)
            prod(k,10) = 0.
            loss(k,25) = (rxt(k,rid_d0)*y(k,vid_oh) +rxt(k,rid_d1)
     $           *y(k,vid_cl) + rxt(k,rid_jch3cl))*y(k,vid_ch3cl)
            prod(k,25) = 0.
            loss(k,11) = (rxt(k,rid_e92)*y(k,vid_o1d)
     $            + rxt(k,rid_jha1211))*y(k,vid_ha1211)
            prod(k,11) = 0.
            loss(k,9) = (rxt(k,rid_e91)*y(k,vid_o1d)
     $            + rxt(k,rid_jha1301))*y(k,vid_ha1301)
            prod(k,9) = 0.
            loss(k,1) = 0.
            prod(k,1) = (rxt(k,rid_d102)*y(k,vid_cfc11) +
     $           2.000*rxt(k,rid_d103)*y(k,vid_cfc12) +
     $           3.000*rxt(k,rid_d104)*y(k,vid_cfc113) +
     $           4.000*rxt(k,rid_d105)*y(k,vid_cfc114) +
     $           5.000*rxt(k,rid_d106)*y(k,vid_cfc115) +
     $           2.000*rxt(k,rid_d107)*y(k,vid_hcfc22) +
     $           3.000*rxt(k,rid_e91)*y(k,vid_ha1301) +
     $           2.000*rxt(k,rid_e92)*y(k,vid_ha1211))*y(k,vid_o1d)
     $            +3.000*rxt(k,rid_jcfc113)*y(k,vid_cfc113)
     $            +4.000*rxt(k,rid_jcfc114)*y(k,vid_cfc114)
     $            +5.000*rxt(k,rid_jcfc115)*y(k,vid_cfc115)
     $            +2.000*rxt(k,rid_jhcfc22)*y(k,vid_hcfc22)
     $            +2.000*rxt(k,rid_jha1211)*y(k,vid_ha1211)
     $            +3.000*rxt(k,rid_jha1301)*y(k,vid_ha1301)
            loss(k,24) = (rxt(k,rid_e93)*y(k,vid_o1d) +rxt(k,rid_e0)
     $           *y(k,vid_oh) + rxt(k,rid_jch3br))*y(k,vid_ch3br)
            prod(k,24) = 0.
            loss(k,13) = (rxt(k,rid_e1)*y(k,vid_oh)
     $            + rxt(k,rid_jchbr3))*y(k,vid_chbr3)
            prod(k,13) = 0.
            loss(k,54) = (rxt(k,rid_hk3)*y(k,vid_o3p)
     $            + (rxt(k,rid_hk7a) +rxt(k,rid_hk7b))*y(k,vid_o1d)
     $            +rxt(k,rid_a2)*y(k,vid_h) +rxt(k,rid_a6)
     $           *y(k,vid_oh) +rxt(k,rid_a6b)*y(k,vid_ho2)
     $            +rxt(k,rid_d2)*y(k,vid_cl) +rxt(k,rid_b4)
     $           *y(k,vid_no) +rxt(k,rid_b9)*y(k,vid_no2)
     $            +rxt(k,rid_e2)*y(k,vid_br) + rxt(k,rid_jo3_op)
     $            + rxt(k,rid_jo3_od))*y(k,vid_o3)
            prod(k,54) =rxt(k,rid_hk2)*y(k,vid_o2)*y(k,vid_o3p)
     $            +rxt(k,rid_d33a)*y(k,vid_clo)*y(k,vid_ho2)
            loss(k,51) = (rxt(k,rid_c3)*y(k,vid_co) +rxt(k,rid_d85)
     $           *y(k,vid_hcl) +rxt(k,rid_e81)*y(k,vid_hbr)
     $            +rxt(k,rid_a24)*y(k,vid_h2) +rxt(k,rid_c9)
     $           *y(k,vid_ch2o) +rxt(k,rid_hk3)*y(k,vid_o3)
     $            + 2.*rxt(k,rid_hk1)*y(k,vid_o3p) +rxt(k,rid_a5)
     $           *y(k,vid_oh) +rxt(k,rid_a7)*y(k,vid_ho2)
     $            +rxt(k,rid_a81)*y(k,vid_h2o2) +rxt(k,rid_d3)
     $           *y(k,vid_clo) +rxt(k,rid_d64)*y(k,vid_oclo)
     $            +rxt(k,rid_d35)*y(k,vid_hocl) +rxt(k,rid_d32)
     $           *y(k,vid_clono2) +rxt(k,rid_b82)*y(k,vid_no)
     $            + (rxt(k,rid_b3) +rxt(k,rid_b81))*y(k,vid_no2)
     $            +rxt(k,rid_b71)*y(k,vid_no3) +rxt(k,rid_e3)
     $           *y(k,vid_bro) +rxt(k,rid_hk2)*y(k,vid_o2))
     $           *y(k,vid_o3p)
            prod(k,51) = (2.000*rxt(k,rid_jo2_op) +
     $           rxt(k,rid_jo2_od) +rxt(k,rid_b7)*y(k,vid_n) +
     $           rxt(k,rid_hk5a)*y(k,vid_o1d) +
     $           rxt(k,rid_hk5b)*y(k,vid_o1d))*y(k,vid_o2)
     $            + (rxt(k,rid_jo3_op) +
     $           2.000*rxt(k,rid_hk7b)*y(k,vid_o1d))*y(k,vid_o3)
     $            + (rxt(k,rid_jho2) +rxt(k,rid_a23c)*y(k,vid_h))
     $           *y(k,vid_ho2) + (rxt(k,rid_jno) +
     $           rxt(k,rid_b6)*y(k,vid_n))*y(k,vid_no)
     $            +rxt(k,rid_hk4)*y(k,vid_o1d)
     $            +rxt(k,rid_a82)*y(k,vid_oh)*y(k,vid_oh)
     $            +rxt(k,rid_joclo)*y(k,vid_oclo) +rxt(k,rid_jno2)
     $           *y(k,vid_no2) +rxt(k,rid_jno3_no2)*y(k,vid_no3)
     $            +rxt(k,rid_jbro)*y(k,vid_bro)
            loss(k,47) = ((rxt(k,rid_b38) +rxt(k,rid_b39))
     $           *y(k,vid_n2o) + (rxt(k,rid_c1) +rxt(k,rid_c1a) +
     $           rxt(k,rid_c1b))*y(k,vid_ch4) +rxt(k,rid_a1et)
     $           *y(k,vid_h2o) +rxt(k,rid_d75)*y(k,vid_hcl)
     $            +rxt(k,rid_e71)*y(k,vid_hbr) +rxt(k,rid_a3et)
     $           *y(k,vid_h2) +rxt(k,rid_d101)*y(k,vid_cfc10)
     $            +rxt(k,rid_d102)*y(k,vid_cfc11) +rxt(k,rid_d103)
     $           *y(k,vid_cfc12) +rxt(k,rid_d104)*y(k,vid_cfc113)
     $            +rxt(k,rid_d105)*y(k,vid_cfc114) +rxt(k,rid_d106)
     $           *y(k,vid_cfc115) +rxt(k,rid_d107)*y(k,vid_hcfc22)
     $            +rxt(k,rid_e92)*y(k,vid_ha1211) +rxt(k,rid_e91)
     $           *y(k,vid_ha1301) +rxt(k,rid_e93)*y(k,vid_ch3br)
     $            + (rxt(k,rid_hk7a) +rxt(k,rid_hk7b))*y(k,vid_o3)
     $            +rxt(k,rid_d71)*y(k,vid_cl2) + (rxt(k,rid_hk5a) +
     $           rxt(k,rid_hk5b))*y(k,vid_o2) + rxt(k,rid_hk4)
     $            + rxt(k,rid_hk21))*y(k,vid_o1d)
            prod(k,47) =rxt(k,rid_jn2o)*y(k,vid_n2o)
     $            +rxt(k,rid_jco2)*y(k,vid_co2) +rxt(k,rid_jo3_od)
     $           *y(k,vid_o3) +rxt(k,rid_jo2_od)*y(k,vid_o2)
            loss(k,52) = (rxt(k,rid_a2)*y(k,vid_o3)
     $            + (rxt(k,rid_a23a) +rxt(k,rid_a23b) +
     $           rxt(k,rid_a23c))*y(k,vid_ho2) +rxt(k,rid_a1)
     $           *y(k,vid_o2))*y(k,vid_h)
            prod(k,52) = (rxt(k,rid_a3et)*y(k,vid_o1d) +
     $           rxt(k,rid_a19)*y(k,vid_oh) +
     $           rxt(k,rid_a24)*y(k,vid_o3p) +
     $           rxt(k,rid_d6)*y(k,vid_cl))*y(k,vid_h2)
     $            + (rxt(k,rid_jch4) +rxt(k,rid_c1b)*y(k,vid_o1d))
     $           *y(k,vid_ch4) + (rxt(k,rid_a5)*y(k,vid_o3p) +
     $           rxt(k,rid_a36)*y(k,vid_co))*y(k,vid_oh)
     $            +rxt(k,rid_jh2o)*y(k,vid_h2o) +rxt(k,rid_jhcl)
     $           *y(k,vid_hcl) +rxt(k,rid_jch2o_h)*y(k,vid_ch2o)
            loss(k,46) = (rxt(k,rid_c2)*y(k,vid_ch4) +rxt(k,rid_a36)
     $           *y(k,vid_co) +rxt(k,rid_d11)*y(k,vid_hcl)
     $            +rxt(k,rid_e11)*y(k,vid_hbr) +rxt(k,rid_a19)
     $           *y(k,vid_h2) +rxt(k,rid_c8)*y(k,vid_ch2o)
     $            +rxt(k,rid_d52)*y(k,vid_hcfc22) +rxt(k,rid_d50)
     $           *y(k,vid_ch3ccl3) +rxt(k,rid_d0)*y(k,vid_ch3cl)
     $            +rxt(k,rid_e0)*y(k,vid_ch3br) +rxt(k,rid_e1)
     $           *y(k,vid_chbr3) +rxt(k,rid_a6)*y(k,vid_o3)
     $            +rxt(k,rid_a5)*y(k,vid_o3p) + 2.*(rxt(k,rid_a82) +
     $           rxt(k,rid_a83))*y(k,vid_oh) +rxt(k,rid_a17)
     $           *y(k,vid_ho2) +rxt(k,rid_a30)*y(k,vid_h2o2)
     $            +rxt(k,rid_d81)*y(k,vid_cl2) + (rxt(k,rid_d8) +
     $           rxt(k,rid_d8a))*y(k,vid_clo) +rxt(k,rid_d62)
     $           *y(k,vid_oclo) +rxt(k,rid_d34)*y(k,vid_hocl)
     $            +rxt(k,rid_d87)*y(k,vid_clono2) +rxt(k,rid_b22)
     $           *y(k,vid_no2) +rxt(k,rid_b72)*y(k,vid_no3)
     $            +rxt(k,rid_b27)*y(k,vid_hno3) +rxt(k,rid_b28)
     $           *y(k,vid_ho2no2) +rxt(k,rid_e72)*y(k,vid_bro)
     $            +rxt(k,rid_c17)*y(k,vid_ch3ooh))*y(k,vid_oh)
            prod(k,46) = (rxt(k,rid_a7)*y(k,vid_ho2) +
     $           rxt(k,rid_a24)*y(k,vid_h2) +
     $           rxt(k,rid_a81)*y(k,vid_h2o2) +
     $           rxt(k,rid_c9)*y(k,vid_ch2o) +
     $           rxt(k,rid_d35)*y(k,vid_hocl) +
     $           rxt(k,rid_d85)*y(k,vid_hcl) +
     $           rxt(k,rid_e81)*y(k,vid_hbr))*y(k,vid_o3p)
     $            + (rxt(k,rid_jho2) +rxt(k,rid_a6b)*y(k,vid_o3) +
     $           2.000*rxt(k,rid_a23a)*y(k,vid_h) +
     $           rxt(k,rid_a26)*y(k,vid_no) +
     $           rxt(k,rid_b73a)*y(k,vid_no3) +
     $           rxt(k,rid_d83)*y(k,vid_cl))*y(k,vid_ho2)
     $            + (2.000*rxt(k,rid_a1et)*y(k,vid_h2o) +
     $           rxt(k,rid_a3et)*y(k,vid_h2) +
     $           rxt(k,rid_c1)*y(k,vid_ch4) +
     $           rxt(k,rid_d75)*y(k,vid_hcl) +
     $           rxt(k,rid_e71)*y(k,vid_hbr))*y(k,vid_o1d)
     $            + (rxt(k,rid_jhocl) +rxt(k,rid_d37)*y(k,vid_cl))
     $           *y(k,vid_hocl) +rxt(k,rid_jh2o)*y(k,vid_h2o)
     $            +rxt(k,rid_a2)*y(k,vid_h)*y(k,vid_o3)
     $            +2.000*rxt(k,rid_jh2o2)*y(k,vid_h2o2)
     $            +rxt(k,rid_jhno3)*y(k,vid_hno3)
     $            +rxt(k,rid_jhno4_2)*y(k,vid_ho2no2)
     $            +rxt(k,rid_jhobr)*y(k,vid_hobr)
     $            +rxt(k,rid_jch3ooh)*y(k,vid_ch3ooh)
            loss(k,48) = (rxt(k,rid_a6b)*y(k,vid_o3) +rxt(k,rid_a7)
     $           *y(k,vid_o3p) + (rxt(k,rid_a23a) +rxt(k,rid_a23b) +
     $           rxt(k,rid_a23c))*y(k,vid_h) +rxt(k,rid_a17)
     $           *y(k,vid_oh) + 2.*rxt(k,rid_a27)*y(k,vid_ho2)
     $            + (rxt(k,rid_d7) +rxt(k,rid_d83))*y(k,vid_cl)
     $            + (rxt(k,rid_d33) +rxt(k,rid_d33a))*y(k,vid_clo)
     $            +rxt(k,rid_a26)*y(k,vid_no) +rxt(k,rid_b23)
     $           *y(k,vid_no2) + (rxt(k,rid_b73a) +rxt(k,rid_b73b))
     $           *y(k,vid_no3) +rxt(k,rid_e7)*y(k,vid_br)
     $            +rxt(k,rid_e15)*y(k,vid_bro) +rxt(k,rid_c7)
     $           *y(k,vid_ch3o2) + rxt(k,rid_jho2))*y(k,vid_ho2)
            prod(k,48) = (rxt(k,rid_a6)*y(k,vid_o3) +
     $           rxt(k,rid_a30)*y(k,vid_h2o2) +
     $           rxt(k,rid_b72)*y(k,vid_no3) +
     $           rxt(k,rid_c8)*y(k,vid_ch2o) +
     $           rxt(k,rid_d0)*y(k,vid_ch3cl) +
     $           rxt(k,rid_d8)*y(k,vid_clo) +
     $           rxt(k,rid_e0)*y(k,vid_ch3br) +
     $           rxt(k,rid_e72)*y(k,vid_bro))*y(k,vid_oh)
     $            + (rxt(k,rid_jch2o_h) +
     $           rxt(k,rid_c9)*y(k,vid_o3p) +
     $           rxt(k,rid_c10)*y(k,vid_no3) +
     $           rxt(k,rid_d10)*y(k,vid_cl) +
     $           rxt(k,rid_e9)*y(k,vid_br))*y(k,vid_ch2o)
     $            + (rxt(k,rid_a81)*y(k,vid_o3p) +
     $           rxt(k,rid_d84)*y(k,vid_cl))*y(k,vid_h2o2)
     $            + (rxt(k,rid_jhno4_1) +rxt(k,rid_b24))
     $           *y(k,vid_ho2no2) +rxt(k,rid_c1b)*y(k,vid_o1d)
     $           *y(k,vid_ch4) +rxt(k,rid_d1)*y(k,vid_cl)
     $           *y(k,vid_ch3cl) +rxt(k,rid_a1)*y(k,vid_o2)
     $           *y(k,vid_h) +rxt(k,rid_c5)*y(k,vid_ch3o2)
     $           *y(k,vid_no) +rxt(k,rid_jch3ooh)*y(k,vid_ch3ooh)
            loss(k,29) = (rxt(k,rid_a81)*y(k,vid_o3p)
     $            +rxt(k,rid_a30)*y(k,vid_oh) +rxt(k,rid_d84)
     $           *y(k,vid_cl) + rxt(k,rid_jh2o2) + het_rates(k,2))
     $           *y(k,vid_h2o2)
            prod(k,29) =rxt(k,rid_a83)*y(k,vid_oh)*y(k,vid_oh)
     $            +rxt(k,rid_a27)*y(k,vid_ho2)*y(k,vid_ho2)
            loss(k,50) = (rxt(k,rid_d5)*y(k,vid_ch4) +rxt(k,rid_d6)
     $           *y(k,vid_h2) +rxt(k,rid_d10)*y(k,vid_ch2o)
     $            +rxt(k,rid_d1)*y(k,vid_ch3cl) +rxt(k,rid_d2)
     $           *y(k,vid_o3) + (rxt(k,rid_d7) +rxt(k,rid_d83))
     $           *y(k,vid_ho2) +rxt(k,rid_d84)*y(k,vid_h2o2)
     $            +rxt(k,rid_d63)*y(k,vid_oclo) +rxt(k,rid_d37)
     $           *y(k,vid_hocl) +rxt(k,rid_d82)*y(k,vid_clono2)
     $            +rxt(k,rid_d36)*y(k,vid_no2) +rxt(k,rid_d73)
     $           *y(k,vid_no3))*y(k,vid_cl)
            prod(k,50) = (rxt(k,rid_d71)*y(k,vid_cl2) +
     $           rxt(k,rid_d75)*y(k,vid_hcl) +
     $           4.000*rxt(k,rid_d101)*y(k,vid_cfc10) +
     $           3.000*rxt(k,rid_d102)*y(k,vid_cfc11) +
     $           2.000*rxt(k,rid_d103)*y(k,vid_cfc12) +
     $           3.000*rxt(k,rid_d104)*y(k,vid_cfc113) +
     $           2.000*rxt(k,rid_d105)*y(k,vid_cfc114) +
     $           rxt(k,rid_d106)*y(k,vid_cfc115) +
     $           rxt(k,rid_d107)*y(k,vid_hcfc22) +
     $           rxt(k,rid_e92)*y(k,vid_ha1211))*y(k,vid_o1d)
     $            + (rxt(k,rid_d3)*y(k,vid_o3p) +
     $           rxt(k,rid_d4)*y(k,vid_no) +
     $           rxt(k,rid_d8)*y(k,vid_oh) +
     $           rxt(k,rid_d47)*y(k,vid_clo) +
     $           2.000*rxt(k,rid_d49)*y(k,vid_clo) +
     $           rxt(k,rid_d74)*y(k,vid_no3) +
     $           rxt(k,rid_e5b)*y(k,vid_bro))*y(k,vid_clo)
     $            + (rxt(k,rid_d0)*y(k,vid_ch3cl) +
     $           rxt(k,rid_d11)*y(k,vid_hcl) +
     $           3.000*rxt(k,rid_d50)*y(k,vid_ch3ccl3) +
     $           rxt(k,rid_d52)*y(k,vid_hcfc22) +
     $           rxt(k,rid_d81)*y(k,vid_cl2))*y(k,vid_oh)
     $            + (rxt(k,rid_jhcl) +rxt(k,rid_d85)*y(k,vid_o3p))
     $           *y(k,vid_hcl) +4.000*rxt(k,rid_jcfc10)
     $           *y(k,vid_cfc10) +3.000*rxt(k,rid_jcfc11)
     $           *y(k,vid_cfc11) +2.000*rxt(k,rid_jcfc12)
     $           *y(k,vid_cfc12) +3.000*rxt(k,rid_jcfc113)
     $           *y(k,vid_cfc113) +2.000*rxt(k,rid_jcfc114)
     $           *y(k,vid_cfc114) +rxt(k,rid_jcfc115)
     $           *y(k,vid_cfc115) +rxt(k,rid_jhcfc22)
     $           *y(k,vid_hcfc22) +3.000*rxt(k,rid_jch3ccl3)
     $           *y(k,vid_ch3ccl3) +rxt(k,rid_jch3cl)*y(k,vid_ch3cl)
     $            +rxt(k,rid_jha1211)*y(k,vid_ha1211)
     $            +2.000*rxt(k,rid_jcl2)*y(k,vid_cl2)
     $            +rxt(k,rid_jhocl)*y(k,vid_hocl)
     $            +rxt(k,rid_jclno4_2)*y(k,vid_clono2)
     $            +rxt(k,rid_jclno2)*y(k,vid_clno2)
     $            +2.000*rxt(k,rid_jcl2o2)*y(k,vid_cl2o2)
     $            +rxt(k,rid_jbrcl)*y(k,vid_brcl)
            loss(k,34) = (rxt(k,rid_d71)*y(k,vid_o1d)
     $            +rxt(k,rid_d81)*y(k,vid_oh) + rxt(k,rid_jcl2))
     $           *y(k,vid_cl2)
            prod(k,34) = (rxt(k,rid_het2)*y(k,vid_clono2) +
     $           rxt(k,rid_het5)*y(k,vid_hocl) +
     $           rxt(k,rid_PMChet2)*y(k,vid_clono2) +
     $           rxt(k,rid_PMChet5)*y(k,vid_hocl))*y(k,vid_hcl)
     $            + (rxt(k,rid_d37)*y(k,vid_hocl) +
     $           rxt(k,rid_d72)*y(k,vid_cl2o2) +
     $           rxt(k,rid_d82)*y(k,vid_clono2))*y(k,vid_cl)
     $            +rxt(k,rid_d48)*y(k,vid_clo)*y(k,vid_clo)
            loss(k,56) = (rxt(k,rid_d3)*y(k,vid_o3p)
     $            + (rxt(k,rid_d8) +rxt(k,rid_d8a))*y(k,vid_oh)
     $            + (rxt(k,rid_d33) +rxt(k,rid_d33a))*y(k,vid_ho2)
     $            + 2.*(rxt(k,rid_d47) +rxt(k,rid_d48) +
     $           rxt(k,rid_d49) +rxt(k,rid_d60))*y(k,vid_clo)
     $            +rxt(k,rid_d4)*y(k,vid_no) +rxt(k,rid_d31)
     $           *y(k,vid_no2) +rxt(k,rid_d74)*y(k,vid_no3)
     $            + (rxt(k,rid_e5a) +rxt(k,rid_e5b) +rxt(k,rid_e5c))
     $           *y(k,vid_bro))*y(k,vid_clo)
            prod(k,56) = (rxt(k,rid_joclo) +
     $           2.000*rxt(k,rid_d63)*y(k,vid_cl) +
     $           rxt(k,rid_d64)*y(k,vid_o3p) +
     $           rxt(k,rid_d65)*y(k,vid_no) +
     $           rxt(k,rid_e8)*y(k,vid_br))*y(k,vid_oclo)
     $            + (rxt(k,rid_d32)*y(k,vid_clono2) +
     $           rxt(k,rid_d35)*y(k,vid_hocl))*y(k,vid_o3p)
     $            + (rxt(k,rid_d2)*y(k,vid_o3) +
     $           rxt(k,rid_d73)*y(k,vid_no3))*y(k,vid_cl)
     $            +rxt(k,rid_d71)*y(k,vid_cl2)*y(k,vid_o1d)
     $            +rxt(k,rid_d34)*y(k,vid_hocl)*y(k,vid_oh)
     $            +rxt(k,rid_jclno4_1)*y(k,vid_clono2)
     $            +2.000*rxt(k,rid_d61)*y(k,vid_cl2o2)
            loss(k,43) = (rxt(k,rid_d64)*y(k,vid_o3p)
     $            +rxt(k,rid_d62)*y(k,vid_oh) +rxt(k,rid_d63)
     $           *y(k,vid_cl) +rxt(k,rid_d65)*y(k,vid_no)
     $            +rxt(k,rid_e8)*y(k,vid_br) + rxt(k,rid_joclo))
     $           *y(k,vid_oclo)
            prod(k,43) = (rxt(k,rid_d47)*y(k,vid_clo) +
     $           rxt(k,rid_e5a)*y(k,vid_bro))*y(k,vid_clo)
     $            +rxt(k,rid_d83)*y(k,vid_cl)*y(k,vid_ho2)
            loss(k,39) = ((rxt(k,rid_het5) +rxt(k,rid_PMChet5))
     $           *y(k,vid_hcl) +rxt(k,rid_d35)*y(k,vid_o3p)
     $            +rxt(k,rid_d34)*y(k,vid_oh) +rxt(k,rid_d37)
     $           *y(k,vid_cl) + rxt(k,rid_jhocl))*y(k,vid_hocl)
            prod(k,39) = (rxt(k,rid_g1) +rxt(k,rid_het1) +
     $           rxt(k,rid_PMChet1) +rxt(k,rid_d87)*y(k,vid_oh))
     $           *y(k,vid_clono2) + (rxt(k,rid_d62)*y(k,vid_oclo) +
     $           rxt(k,rid_d81)*y(k,vid_cl2))*y(k,vid_oh)
     $            +rxt(k,rid_d33)*y(k,vid_clo)*y(k,vid_ho2)
            loss(k,38) = ((rxt(k,rid_het2) +rxt(k,rid_PMChet2))
     $           *y(k,vid_hcl) +rxt(k,rid_d32)*y(k,vid_o3p)
     $            +rxt(k,rid_d87)*y(k,vid_oh) +rxt(k,rid_d82)
     $           *y(k,vid_cl) + rxt(k,rid_jclno4_1)
     $            + rxt(k,rid_jclno4_2) + rxt(k,rid_g1)
     $            + rxt(k,rid_het1) + rxt(k,rid_PMChet1))
     $           *y(k,vid_clono2)
            prod(k,38) =rxt(k,rid_d31)*y(k,vid_no2)*y(k,vid_clo)
            loss(k,19) = ( + rxt(k,rid_jclno2))*y(k,vid_clno2)
            prod(k,19) = (rxt(k,rid_het4)*y(k,vid_n2o5) +
     $           rxt(k,rid_PMChet4)*y(k,vid_n2o5))*y(k,vid_hcl)
     $            +rxt(k,rid_d36)*y(k,vid_no2)*y(k,vid_cl)
            loss(k,20) = (rxt(k,rid_d72)*y(k,vid_cl)
     $            + rxt(k,rid_jcl2o2) + rxt(k,rid_d61))
     $           *y(k,vid_cl2o2)
            prod(k,20) =rxt(k,rid_d60)*y(k,vid_clo)*y(k,vid_clo)
            loss(k,18) = (rxt(k,rid_b6)*y(k,vid_no) +rxt(k,rid_b7)
     $           *y(k,vid_o2))*y(k,vid_n)
            prod(k,18) =rxt(k,rid_jno)*y(k,vid_no)
            loss(k,49) = (rxt(k,rid_b4)*y(k,vid_o3) +rxt(k,rid_b82)
     $           *y(k,vid_o3p) +rxt(k,rid_a26)*y(k,vid_ho2)
     $            +rxt(k,rid_d4)*y(k,vid_clo) +rxt(k,rid_d65)
     $           *y(k,vid_oclo) +rxt(k,rid_b6)*y(k,vid_n)
     $            +rxt(k,rid_b84)*y(k,vid_no3) +rxt(k,rid_e4)
     $           *y(k,vid_bro) +rxt(k,rid_c5)*y(k,vid_ch3o2)
     $            + rxt(k,rid_jno))*y(k,vid_no)
            prod(k,49) = (rxt(k,rid_jno2) +
     $           rxt(k,rid_b3)*y(k,vid_o3p))*y(k,vid_no2)
     $            +2.000*rxt(k,rid_b39)*y(k,vid_o1d)*y(k,vid_n2o)
     $            +rxt(k,rid_b7)*y(k,vid_o2)*y(k,vid_n)
     $            +rxt(k,rid_jno3_no)*y(k,vid_no3)
            loss(k,55) = (rxt(k,rid_b9)*y(k,vid_o3)
     $            + (rxt(k,rid_b3) +rxt(k,rid_b81))*y(k,vid_o3p)
     $            +rxt(k,rid_b22)*y(k,vid_oh) +rxt(k,rid_b23)
     $           *y(k,vid_ho2) +rxt(k,rid_d36)*y(k,vid_cl)
     $            +rxt(k,rid_d31)*y(k,vid_clo) +rxt(k,rid_b12)
     $           *y(k,vid_no3) +rxt(k,rid_e13)*y(k,vid_bro)
     $            + rxt(k,rid_jno2))*y(k,vid_no2)
            prod(k,55) = (rxt(k,rid_a26)*y(k,vid_ho2) +
     $           rxt(k,rid_b4)*y(k,vid_o3) +
     $           rxt(k,rid_b82)*y(k,vid_o3p) +
     $           2.000*rxt(k,rid_b84)*y(k,vid_no3) +
     $           rxt(k,rid_c5)*y(k,vid_ch3o2) +
     $           rxt(k,rid_d4)*y(k,vid_clo) +
     $           rxt(k,rid_d65)*y(k,vid_oclo) +
     $           rxt(k,rid_e4)*y(k,vid_bro))*y(k,vid_no)
     $            + (rxt(k,rid_jno3_no2) +
     $           rxt(k,rid_b71)*y(k,vid_o3p) +
     $           rxt(k,rid_b72)*y(k,vid_oh) +
     $           rxt(k,rid_b73a)*y(k,vid_ho2) +
     $           rxt(k,rid_d73)*y(k,vid_cl) +
     $           rxt(k,rid_d74)*y(k,vid_clo))*y(k,vid_no3)
     $            + (rxt(k,rid_jhno4_1) +rxt(k,rid_b24) +
     $           rxt(k,rid_b28)*y(k,vid_oh))*y(k,vid_ho2no2)
     $            + (rxt(k,rid_jn2o5) +rxt(k,rid_b32))*y(k,vid_n2o5)
     $            +rxt(k,rid_jclno4_1)*y(k,vid_clono2)
     $            +rxt(k,rid_jclno2)*y(k,vid_clno2)
     $            +rxt(k,rid_jhno3)*y(k,vid_hno3)
     $            +.710*rxt(k,rid_jbrono2)*y(k,vid_brono2)
            loss(k,53) = (rxt(k,rid_c10)*y(k,vid_ch2o)
     $            +rxt(k,rid_b71)*y(k,vid_o3p) +rxt(k,rid_b72)
     $           *y(k,vid_oh) + (rxt(k,rid_b73a) +rxt(k,rid_b73b))
     $           *y(k,vid_ho2) +rxt(k,rid_d73)*y(k,vid_cl)
     $            +rxt(k,rid_d74)*y(k,vid_clo) +rxt(k,rid_b84)
     $           *y(k,vid_no) +rxt(k,rid_b12)*y(k,vid_no2)
     $            + rxt(k,rid_jno3_no2) + rxt(k,rid_jno3_no))
     $           *y(k,vid_no3)
            prod(k,53) = (rxt(k,rid_jclno4_2) +
     $           rxt(k,rid_d32)*y(k,vid_o3p) +
     $           rxt(k,rid_d82)*y(k,vid_cl) +
     $           rxt(k,rid_d87)*y(k,vid_oh))*y(k,vid_clono2)
     $            + (rxt(k,rid_b9)*y(k,vid_o3) +
     $           rxt(k,rid_b81)*y(k,vid_o3p))*y(k,vid_no2)
     $            + (rxt(k,rid_jn2o5) +rxt(k,rid_b32))*y(k,vid_n2o5)
     $            +rxt(k,rid_b27)*y(k,vid_hno3)*y(k,vid_oh)
     $            +rxt(k,rid_jhno4_2)*y(k,vid_ho2no2)
     $            +.290*rxt(k,rid_jbrono2)*y(k,vid_brono2)
            loss(k,30) = (rxt(k,rid_b27)*y(k,vid_oh)
     $            + rxt(k,rid_jhno3) + het_rates(k,1))*y(k,vid_hno3)
            prod(k,30) = (rxt(k,rid_g1) +rxt(k,rid_het1) +
     $           rxt(k,rid_PMChet1) +rxt(k,rid_het2)*y(k,vid_hcl) +
     $           rxt(k,rid_PMChet2)*y(k,vid_hcl))*y(k,vid_clono2)
     $            + (2.000*rxt(k,rid_g2) +2.000*rxt(k,rid_het3) +
     $           2.000*rxt(k,rid_PMChet3) +
     $           rxt(k,rid_het4)*y(k,vid_hcl) +
     $           rxt(k,rid_PMChet4)*y(k,vid_hcl))*y(k,vid_n2o5)
     $            + (rxt(k,rid_b73b)*y(k,vid_ho2) +
     $           rxt(k,rid_c10)*y(k,vid_ch2o))*y(k,vid_no3)
     $            +rxt(k,rid_b22)*y(k,vid_no2)*y(k,vid_oh)
            loss(k,26) = ((rxt(k,rid_het4) +rxt(k,rid_PMChet4))
     $           *y(k,vid_hcl) + rxt(k,rid_jn2o5) + rxt(k,rid_b32)
     $            + rxt(k,rid_g2) + rxt(k,rid_het3)
     $            + rxt(k,rid_PMChet3))*y(k,vid_n2o5)
            prod(k,26) =rxt(k,rid_b12)*y(k,vid_no3)*y(k,vid_no2)
            loss(k,28) = (rxt(k,rid_b28)*y(k,vid_oh)
     $            + rxt(k,rid_jhno4_1) + rxt(k,rid_jhno4_2)
     $            + rxt(k,rid_b24) + het_rates(k,5))*y(k,vid_ho2no2)
            prod(k,28) =rxt(k,rid_b23)*y(k,vid_no2)*y(k,vid_ho2)
            loss(k,45) = (rxt(k,rid_e9)*y(k,vid_ch2o) +rxt(k,rid_e2)
     $           *y(k,vid_o3) +rxt(k,rid_e7)*y(k,vid_ho2)
     $            +rxt(k,rid_e8)*y(k,vid_oclo))*y(k,vid_br)
            prod(k,45) = (rxt(k,rid_jbro) +
     $           rxt(k,rid_e3)*y(k,vid_o3p) +
     $           rxt(k,rid_e4)*y(k,vid_no) +
     $           rxt(k,rid_e5a)*y(k,vid_clo) +
     $           rxt(k,rid_e5b)*y(k,vid_clo) +
     $           2.000*rxt(k,rid_e6)*y(k,vid_bro) +
     $           rxt(k,rid_e72)*y(k,vid_oh))*y(k,vid_bro)
     $            + (rxt(k,rid_e71)*y(k,vid_hbr) +
     $           rxt(k,rid_e91)*y(k,vid_ha1301) +
     $           rxt(k,rid_e92)*y(k,vid_ha1211) +
     $           rxt(k,rid_e93)*y(k,vid_ch3br))*y(k,vid_o1d)
     $            + (rxt(k,rid_e0)*y(k,vid_ch3br) +
     $           3.000*rxt(k,rid_e1)*y(k,vid_chbr3) +
     $           rxt(k,rid_e11)*y(k,vid_hbr))*y(k,vid_oh)
     $            +rxt(k,rid_e81)*y(k,vid_o3p)*y(k,vid_hbr)
     $            +rxt(k,rid_jha1211)*y(k,vid_ha1211)
     $            +rxt(k,rid_jha1301)*y(k,vid_ha1301)
     $            +rxt(k,rid_jch3br)*y(k,vid_ch3br)
     $            +3.000*rxt(k,rid_jchbr3)*y(k,vid_chbr3)
     $            +rxt(k,rid_jhobr)*y(k,vid_hobr)
     $            +.290*rxt(k,rid_jbrono2)*y(k,vid_brono2)
     $            +rxt(k,rid_jbrcl)*y(k,vid_brcl)
            loss(k,44) = (rxt(k,rid_e3)*y(k,vid_o3p) +rxt(k,rid_e72)
     $           *y(k,vid_oh) +rxt(k,rid_e15)*y(k,vid_ho2)
     $            + (rxt(k,rid_e5a) +rxt(k,rid_e5b) +rxt(k,rid_e5c))
     $           *y(k,vid_clo) +rxt(k,rid_e4)*y(k,vid_no)
     $            +rxt(k,rid_e13)*y(k,vid_no2) + 2.*rxt(k,rid_e6)
     $           *y(k,vid_bro) + rxt(k,rid_jbro))*y(k,vid_bro)
            prod(k,44) = (rxt(k,rid_e2)*y(k,vid_o3) +
     $           rxt(k,rid_e8)*y(k,vid_oclo))*y(k,vid_br)
     $            +.710*rxt(k,rid_jbrono2)*y(k,vid_brono2)
            loss(k,14) = ( + rxt(k,rid_jhobr))*y(k,vid_hobr)
            prod(k,14) =rxt(k,rid_e15)*y(k,vid_bro)*y(k,vid_ho2)
            loss(k,21) = ( + rxt(k,rid_jbrono2))*y(k,vid_brono2)
            prod(k,21) =rxt(k,rid_e13)*y(k,vid_bro)*y(k,vid_no2)
            loss(k,15) = ( + rxt(k,rid_jbrcl))*y(k,vid_brcl)
            prod(k,15) =rxt(k,rid_e5c)*y(k,vid_bro)*y(k,vid_clo)
            loss(k,35) = (rxt(k,rid_c7)*y(k,vid_ho2) +rxt(k,rid_c5)
     $           *y(k,vid_no))*y(k,vid_ch3o2)
            prod(k,35) = (rxt(k,rid_jch4) +
     $           rxt(k,rid_c1)*y(k,vid_o1d) +
     $           rxt(k,rid_c2)*y(k,vid_oh) +
     $           rxt(k,rid_d5)*y(k,vid_cl))*y(k,vid_ch4)
     $            +rxt(k,rid_jch3cl)*y(k,vid_ch3cl)
     $            +rxt(k,rid_jch3br)*y(k,vid_ch3br)
     $            +rxt(k,rid_c17)*y(k,vid_ch3ooh)*y(k,vid_oh)
            loss(k,27) = ((rxt(k,rid_c17) +rxt(k,rid_c44))
     $           *y(k,vid_oh) + rxt(k,rid_jch3ooh) + het_rates(k,3))
     $           *y(k,vid_ch3ooh)
            prod(k,27) =rxt(k,rid_c7)*y(k,vid_ch3o2)*y(k,vid_ho2)
            loss(k,42) = (rxt(k,rid_hk2)*y(k,vid_o3p)
     $            +rxt(k,rid_hk5b)*y(k,vid_o1d) +rxt(k,rid_a1)
     $           *y(k,vid_h) +rxt(k,rid_b7)*y(k,vid_n)
     $            +rxt(k,rid_hk8)*y(k,vid_o2dg) + rxt(k,rid_jo2_op)
     $            + rxt(k,rid_jo2_od) + rxt(k,rid_j_o2s))
     $           *y(k,vid_o2)
            prod(k,42) = (2.000*rxt(k,rid_a6b)*y(k,vid_o3) +
     $           rxt(k,rid_a7)*y(k,vid_o3p) +
     $           rxt(k,rid_a17)*y(k,vid_oh) +
     $           rxt(k,rid_a23b)*y(k,vid_h) +
     $           rxt(k,rid_a27)*y(k,vid_ho2) +
     $           rxt(k,rid_b73a)*y(k,vid_no3) +
     $           rxt(k,rid_b73b)*y(k,vid_no3) +
     $           rxt(k,rid_c7)*y(k,vid_ch3o2) +
     $           rxt(k,rid_d7)*y(k,vid_cl) +
     $           rxt(k,rid_d33)*y(k,vid_clo) +
     $           rxt(k,rid_e7)*y(k,vid_br) +
     $           rxt(k,rid_e15)*y(k,vid_bro))*y(k,vid_ho2)
     $            + (rxt(k,rid_jo3_op) +rxt(k,rid_a2)*y(k,vid_h) +
     $           rxt(k,rid_a6)*y(k,vid_oh) +
     $           rxt(k,rid_b4)*y(k,vid_no) +
     $           rxt(k,rid_b9)*y(k,vid_no2) +
     $           rxt(k,rid_d2)*y(k,vid_cl) +
     $           rxt(k,rid_e2)*y(k,vid_br) +
     $           2.000*rxt(k,rid_hk3)*y(k,vid_o3p) +
     $           2.000*rxt(k,rid_hk7a)*y(k,vid_o1d) +
     $           rxt(k,rid_hk7b)*y(k,vid_o1d))*y(k,vid_o3)
     $            + (rxt(k,rid_a5)*y(k,vid_oh) +
     $           rxt(k,rid_b3)*y(k,vid_no2) +
     $           rxt(k,rid_b71)*y(k,vid_no3) +
     $           rxt(k,rid_d3)*y(k,vid_clo) +
     $           rxt(k,rid_d64)*y(k,vid_oclo) +
     $           rxt(k,rid_e3)*y(k,vid_bro) +
     $           rxt(k,rid_hk1)*y(k,vid_o3p) +
     $           rxt(k,rid_hk10)*y(k,vid_o2dg))*y(k,vid_o3p)
     $            + (rxt(k,rid_d8a)*y(k,vid_oh) +
     $           rxt(k,rid_d48)*y(k,vid_clo) +
     $           rxt(k,rid_d49)*y(k,vid_clo) +
     $           rxt(k,rid_d74)*y(k,vid_no3) +
     $           rxt(k,rid_e5b)*y(k,vid_bro) +
     $           rxt(k,rid_e5c)*y(k,vid_bro))*y(k,vid_clo)
     $            + (rxt(k,rid_hk9) +rxt(k,rid_hk30) +
     $           2.000*rxt(k,rid_hk8)*y(k,vid_o2))*y(k,vid_o2dg)
     $            + (rxt(k,rid_b28)*y(k,vid_ho2no2) +
     $           rxt(k,rid_d62)*y(k,vid_oclo))*y(k,vid_oh)
     $            + (rxt(k,rid_jcl2o2) +rxt(k,rid_d72)*y(k,vid_cl))
     $           *y(k,vid_cl2o2) +rxt(k,rid_b38)*y(k,vid_o1d)
     $           *y(k,vid_n2o) +rxt(k,rid_jno3_no)*y(k,vid_no3)
     $            +rxt(k,rid_e6)*y(k,vid_bro)*y(k,vid_bro)
     $            +rxt(k,rid_hk31)*y(k,vid_o2s)
            loss(k,16) = (rxt(k,rid_hk10)*y(k,vid_o3p)
     $            +rxt(k,rid_hk8)*y(k,vid_o2) + rxt(k,rid_hk9)
     $            + rxt(k,rid_hk30))*y(k,vid_o2dg)
            prod(k,16) = (rxt(k,rid_hk12) +
     $           rxt(k,rid_hk13)*y(k,vid_co2) +
     $           rxt(k,rid_hk14)*y(k,vid_o3) +
     $           rxt(k,rid_hk15)*y(k,vid_o3p) +
     $           rxt(k,rid_hk16)*y(k,vid_o2))*y(k,vid_o2s)
     $            +rxt(k,rid_jo3_od)*y(k,vid_o3)
            loss(k,17) = (rxt(k,rid_hk13)*y(k,vid_co2)
     $            +rxt(k,rid_hk14)*y(k,vid_o3) +rxt(k,rid_hk15)
     $           *y(k,vid_o3p) +rxt(k,rid_hk16)*y(k,vid_o2)
     $            + rxt(k,rid_hk12) + rxt(k,rid_hk31))*y(k,vid_o2s)
            prod(k,17) = (rxt(k,rid_j_o2s) +
     $           rxt(k,rid_hk5b)*y(k,vid_o1d))*y(k,vid_o2)
            loss(k,2) = 0.
            prod(k,2) = 0.
         end if
      end do

      end subroutine IMP_PROD_LOSS

!=======================================================================

      subroutine IMP_SLV( base_dens
     $,                   dens_n
     $,                   reaction_rates
     $,                   het_rates
     $,                   extfrc
     $,                   prod_no
     $,                   pcv
     $,                   lcv
     $,                   pfr
     $,                   lfr
     $,                   loss_out
     $,                   dts
     $,                   lat
     $,                   it
     $,                   slt
     $,                   date
     $,                   times )
!-----------------------------------------------------------------------
!      	... Imp_sol advances the volumetric mixing ratio
!           forward one time step via the fully implicit
!           Euler scheme
!-----------------------------------------------------------------------
      use CHEM_MODS
      use SPC_NAMES
      use BOUNDARIES, only : lbc, ubc
      use SIM_CONTROLS, only : chem_itermax, diags_lat, zdiag
      use TIME_CONTROLS, only : TIMING

      implicit none

!-----------------------------------------------------------------------
!        ... Parameters
!-----------------------------------------------------------------------
      real, parameter    :: epsilon = 1.e-3
      real, parameter    :: epsilon_strong = 1.e-4

!-----------------------------------------------------------------------
!     	... Dummy args
!-----------------------------------------------------------------------
      integer, intent(in) ::   lat
      real, intent(in)    ::   dts             ! time step in seconds
      real, intent(in)    ::   reaction_rates(121,202)
     $,                        het_rates(121,7)
     $,                        extfrc(121,1)
      real, dimension(121), intent(in) :: prod_no
      real, dimension(121,56), intent(in) :: pcv, pfr, lcv, lfr
      real, intent(in)    ::   dens_n(121,56)    ! input densities at timestep n
      real, intent(inout) ::   base_dens(121,56) ! output densities at timestep n+1
      real, intent(out)   ::   loss_out(121,56)  ! output loss rates (for diags)
      real, intent(inout) ::   times(*)
      real, intent(in) :: slt                  ! for diags
      integer, intent(in) ::   it              ! for diags
      type( TIMING ), intent(in) :: date       ! for diags

!-----------------------------------------------------------------------
!     	... The local variables and arrays
!-----------------------------------------------------------------------
      integer, parameter :: specified = 0

      integer ::   nr_iter, i, j, m, mc, mp, con_cnt
     $,            k, kl, ku, ofl, ofu
      real :: dti                            ! 1/delt
      real, dimension(4,573) ::
     $             sys_jac
     $,            lin_jac
      real, dimension(4,202) ::
     $             lrates
      real, dimension(4,7) ::
     $             lhet
      real, dimension(4,56) ::
     $             cls_dens
     $,            forcing
     $,            iter_invariant
     $,            prod
     $,            loss
     $,            wrk
      real, dimension(56) :: epsil = epsilon
      real, dimension(4,56) ::
     $             lbase
     $,            base_sav
     $,            ldens_n
     $,            lcvl
     $,            lfrl
      real, dimension(121,56) :: ind_prd
      real, dimension(56) :: l1_norm
      real    ::   timer
      real    ::   maxerr
      logical ::   alt_con(4)
      real, dimension(56), save :: eps
      logical, save :: entered = .false.
      real, external :: SECOND         !   Function declaration

      if( .not. entered ) then
         epsil(vid_o3) = epsilon_strong
         epsil(vid_oh) = epsilon_strong
         epsil(vid_h) = epsilon_strong
         epsil(vid_ho2) = epsilon_strong
         epsil(vid_no2) = epsilon_strong
         epsil(vid_no) = epsilon_strong
         do m = 1,56
            mc = clsmap(m,4)
	    eps(m) = epsil(mc)
         end do
         entered = .true.
      end if

!-----------------------------------------------------------------------
!        ... If there is "independent" production put it in the forcing
!        ... Set the iteration invariant part of the function F(y)
!-----------------------------------------------------------------------
      timer = SECOND( )
      call INDPRD( 4,
     $             ind_prd,
     $             base_dens,
     $             extfrc,
     $             reaction_rates )
!-----------------------------------------------------------------------
!   	... Special section to handle convection and fronts
!-----------------------------------------------------------------------
      do m = 1,56
         mc = clsmap(m,4)
         mp = permute(m,4)
         ind_prd(:,mp) = ind_prd(:,mp) + pcv(:,mc) + pfr(:,mc)
      end do
!-----------------------------------------------------------------------
!   	... Special section to handle extraneous NO production
!-----------------------------------------------------------------------
      m = base2cls(vid_no,4)
      mp = permute(m,4)
      ind_prd(:,mp) = ind_prd(:,mp) + prod_no(:)
      times(8) = times(8) + SECOND() - timer

      dti = 1. / dts

!-----------------------------------------------------------------------
!   	... Overall spatial (altitude) loop
!-----------------------------------------------------------------------
      ofu = 0
      do
	 ofl = ofu + 1
	 ofu = MIN( 121, ofl+3 )
	 kl = 1
	 ku = ofu - ofl + 1
         do m = 1,202
	    lrates(kl:ku,m) = reaction_rates(ofl:ofu,m)
         end do
         do m = 1,7
	    lhet(kl:ku,m) = het_rates(ofl:ofu,m)
         end do
         do m = 1,56
	    ldens_n(kl:ku,m) = dens_n(ofl:ofu,m)
	    lcvl(kl:ku,m) = lcv(ofl:ofu,m)
	    lfrl(kl:ku,m) = lfr(ofl:ofu,m)
         end do

!-----------------------------------------------------------------------
!        ... Transfer from base to class array
!-----------------------------------------------------------------------
         do m = 1,56
            mc = clsmap(m,4)
            mp = permute(m,4)
            cls_dens(kl:ku,mp) = base_dens(ofl:ofu,mc)
	    lbase(kl:ku,m) = base_dens(ofl:ofu,m)
	    base_sav(kl:ku,m) = lbase(kl:ku,m)
         end do
         do m = 1,56
	    mp = permute_orig(m,4)
	    mc = clsmap(mp,4)
            iter_invariant(kl:ku,m) = dti * ldens_n(kl:ku,mc)
     $                              + ind_prd(ofl:ofu,m)
         end do
!-----------------------------------------------------------------------
!        ... The linear component
!-----------------------------------------------------------------------
         timer = SECOND( )
         lin_jac(kl:ku,1:573) = 0.
         call LINMAT( lin_jac,
     $                lbase,
     $                lrates,
     $                lhet,
     $                kl, ku )
         do j = 1,56
            m = diag_map(j)
            mc = clsmap(j,4)   ! was "permute_orig(j,4)" in Stacy's, probably a bug with no consequence
            lin_jac(kl:ku,m) = lin_jac(kl:ku,m)
     $                       - (dti + lcvl(kl:ku,mc) +lfrl(kl:ku,mc))
         end do
         times(4) = times(4) + SECOND() - timer

!=======================================================================
!        The Newton-Raphson iteration for F(y) = 0
!=======================================================================
         alt_con(kl:ku) = .false.
         do nr_iter = 1, chem_itermax
!-----------------------------------------------------------------------
!        ... The non-linear component
!-----------------------------------------------------------------------
            timer = SECOND( )
            sys_jac(kl:ku,1:573) = 0.
            call NLNMAT( sys_jac
     $,                  lbase
     $,                  lrates
     $,                  alt_con
     $,                  kl, ku )
            sys_jac(kl:ku,1:573) = sys_jac(kl:ku,1:573)
     $                             + lin_jac(kl:ku,1:573)
            times(5) = times(5) + SECOND() - timer
            timer    = SECOND( )
!-----------------------------------------------------------------------
!         ... Factor the "system" matrix
!-----------------------------------------------------------------------
            call LU_FAC( sys_jac, kl, ku, alt_con )
            times(2) = times(2) + SECOND( ) - timer

!-----------------------------------------------------------------------
!   	... Form F(y)
!-----------------------------------------------------------------------
            timer = SECOND( )
            call IMP_PROD_LOSS( prod
     $,                         loss
     $,                         lbase
     $,                         lrates
     $,                         lhet
     $,                         alt_con
     $,                         kl, ku )

!-----------------------------------------------------------------------
!   	... Special section to handle convection and fronts
!-----------------------------------------------------------------------
	    do m = 1,56
	       mc = clsmap(m,4)
               mp = permute(m,4)
	       where( .not. alt_con(kl:ku) )
	          loss(kl:ku,mp) = loss(kl:ku,mp)
     $           + ( lcvl(kl:ku,mc) + lfrl(kl:ku,mc) ) * lbase(kl:ku,mc)
	       end where
	    end do
            do k = kl, ku
	       if( .not. alt_con(k) ) then
                  forcing(k,:) = cls_dens(k,:)*dti
     $              - ( iter_invariant(k,:) + prod(k,:) - loss(k,:) )
               end if
            end do
            times(8) = times(8) + SECOND() - timer

!-----------------------------------------------------------------------
!         ... Solve for the mixing ratio at t(n+1)
!-----------------------------------------------------------------------
            timer = SECOND( )
	    call LU_SLV( sys_jac, forcing, kl, ku, alt_con )
            times(3) = times(3) + SECOND( ) - timer
            do k = kl, ku
               wrk(k,:) = 0.
               if( .not. alt_con(k) ) then
                  cls_dens(k,:) = cls_dens(k,:) + forcing(k,:)

!-----------------------------------------------------------------------
!         Transfer latest cls_dens back to "base" array
!-----------------------------------------------------------------------
                  do m = 1,56
                     mc = clsmap(m,4)
                     mp = permute(m,4)
                     if( cls_dens(k,mp) < 1.e-99 ) cls_dens(k,mp) = 0.
                     lbase(k,mc) = cls_dens(k,mp)

!-----------------------------------------------------------------------
!        Calc the relative difference from one iteration to the next.
!        The criteria for low values *must* be easier than above, or else
!        numerical oscillations can occur.
!-----------------------------------------------------------------------
                     if( lbase(k,mc) > 1.e-9 ) wrk(k,m) = forcing(k,mp)
     $                                                  / lbase(k,mc)
                  end do
               end if
            end do

            do m = 1, 56
               mc = clsmap(m,4)
               if( ofl == 1 .and. lbc(mc) == specified ) wrk(kl,m) = 0.
	       if( ofu==121 .and. ubc(mc) == specified ) wrk(ku,m) = 0.
               l1_norm(m) = MAXVAL( ABS( wrk(kl:ku,m) )
     $                             ,mask=.not. alt_con(kl:ku) )
            end do
            do k = kl,ku
	       alt_con(k) = alt_con(k) .or. ALL(ABS(wrk(k,:)) <= eps(:))
	    end do
	    con_cnt = COUNT( l1_norm(:) <= eps(:) )
            if(                            !         if( diags_lat .or.
     $           (nr_iter==chem_itermax .and. con_cnt/=56) ) then
               call IMP_SLV_DIAGS( )
            end if
            if( con_cnt == 56 ) exit                ! nr_iter loop
	    base_sav(kl:ku,m) = lbase(kl:ku,m)           ! for IMP_SLV_DIAGS
         end do                                          ! nr_iter loop

         base_dens(ofl:ofu,1:56) = lbase(kl:ku,1:56)

         do m = 1,56
	    mc = clsmap(m,4)
	    mp = permute(m,4)
            loss_out(ofl:ofu,mc) = loss(kl:ku,mp)
         end do

         if( diags_lat .and. zdiag >= ofl .and. zdiag <= ofu )
     $      write(*,'(4(a,i4),2(a,f8.4),a)') ' IMP_SLV@ (',lat,',',
     $       zdiag,'): it= ',it,' ; nr_iter= ',nr_iter,' ; cal_day= ',
     $       date%cal_day,' ; slt= ',slt,' converged'

	 if( ofu >= 121 ) exit                          ! altitude loop
      end do                                             ! altitude loop

      contains

!=======================================================================

      subroutine IMP_SLV_DIAGS( )
!-----------------------------------------------------------------------
!         ... Diagnostics utility for chem solver IMP_SLV (preprocessed.f)
!-----------------------------------------------------------------------
      use SPC_NAMES
      use TRACNM, only : solsym

      implicit none

      real :: maxreldiff
      integer :: m, mc, mp, iz(1)

      write(*,'(4(a,i4),2(a,f8.4),2(a,es9.3))') ' IMP_SLV@ (',
     $ lat,',',zdiag,'): it= ',it,' ; nr_iter= ',nr_iter,' ; cal_day= ',
     $ date%cal_day,' ; slt= ',slt,
     $ ' ; new_dens(OH)= ',lbase(zdiag-ofl+1,vid_oh),
     $ ' ; new_dens(ClO)= ',lbase(zdiag-ofl+1,vid_clo)

      if( nr_iter == chem_itermax .and. con_cnt /= 56 ) then
         write(*,*) ' IMP_SLV: ',56-con_cnt,
     $                    ' species failed to converge @ lat = ',lat
         write(*,'(a,i2,''/'',i2,''/'',i4,a,i4)') '   Sim date ',
     $      date%month,date%day,date%year, ' ; time step ',it
         write(*,*)
         write(*,'(7a16)') 'species', 'eps', 'MAX(reldiff)', 'at iz',
     $                          'ni_t','ni_t+1_m', 'ni_t+1_m+1'
         write(*,*)
         do m = 1, 56
            if( l1_norm(m) > eps(m) ) then
               mp = permute(m,4)
               mc = clsmap(m,4)
               iz = MAXLOC( ABS( wrk(:,m) ) )
               write(*,'(a16,2es16.4,i16,3es16.4)') solsym(mc),
     $          eps(m), l1_norm(m), ofl+iz(1)-1, ldens_n(iz(1),mc),
     $          base_sav(iz(1),mc), lbase(iz(1),mc)
            end if
         end do
         stop 'IMP_SLV_DIAGS: species failed to converge, see stdout'
      end if

      end subroutine IMP_SLV_DIAGS

      end subroutine IMP_SLV

!=======================================================================


      subroutine INDPRD( class
     $,                  prod
     $,                  y
     $,                  extfrc
     $,                  rxt )

      use RXT_NAMES
      use SPC_NAMES

      implicit none

!----------------------------------------------
!       ... Dummy args
!----------------------------------------------
      integer, intent(in) ::   class
      real, intent(in) ::      y(121,56)
      real, intent(in) ::      rxt(121,202)
      real, intent(in) ::      extfrc(121,1)
      real, intent(out) ::     prod(121,*)



!------------------------------------------------------
!       ... "Independent" production for Implicit species
!------------------------------------------------------
      if( class == 4 ) then
         prod(:,12) = 0.

         prod(:,33) = 0.

         prod(:,36) = + extfrc(:,1)

         prod(:,31) = 0.

         prod(:,40) = 0.

         prod(:,32) = 0.

         prod(:,23) = 0.

         prod(:,37) = 0.

         prod(:,41) = 0.

         prod(:,3) = 0.

         prod(:,4) = 0.

         prod(:,5) = 0.

         prod(:,6) = 0.

         prod(:,7) = 0.

         prod(:,8) = 0.

         prod(:,22) = 0.

         prod(:,10) = 0.

         prod(:,25) = 0.

         prod(:,11) = 0.

         prod(:,9) = 0.

         prod(:,1) = 0.

         prod(:,24) = 0.

         prod(:,13) = 0.

         prod(:,54) = 0.

         prod(:,51) = 0.

         prod(:,47) = 0.

         prod(:,52) = 0.

         prod(:,46) = 0.

         prod(:,48) = 0.

         prod(:,29) = 0.

         prod(:,50) = 0.

         prod(:,34) = 0.

         prod(:,56) = 0.

         prod(:,43) = 0.

         prod(:,39) = 0.

         prod(:,38) = 0.

         prod(:,19) = 0.

         prod(:,20) = 0.

         prod(:,18) = 0.

         prod(:,49) = 0.

         prod(:,55) = 0.

         prod(:,53) = 0.

         prod(:,30) = 0.

         prod(:,26) = 0.

         prod(:,28) = 0.

         prod(:,45) = 0.

         prod(:,44) = 0.

         prod(:,14) = 0.

         prod(:,21) = 0.

         prod(:,15) = 0.

         prod(:,35) = 0.

         prod(:,27) = 0.

         prod(:,42) = 0.

         prod(:,16) = 0.

         prod(:,17) = 0.

         prod(:,2) = 0.

      end if

      end subroutine INDPRD

      subroutine LINMAT( mat
     $,                  y
     $,                  rxt
     $,                  het_rates
     $,                  kl, ku )

      use RXT_NAMES
      use SPC_NAMES


      implicit none

!----------------------------------------------
!       ... Dummy arguments
!----------------------------------------------
      integer, intent(in) ::   kl, ku
      real, intent(in) ::   y(4,56)
      real, intent(in) ::   rxt(4,202)
      real, intent(in) ::   het_rates(4,7)
      real, intent(out) ::  mat(4,573)


!----------------------------------------------
!       ... Local variables
!----------------------------------------------
      integer :: k

!----------------------------------------------
!       ... Linear Matrix entries for Implicit species
!----------------------------------------------

      do k = kl,ku
         mat(k,39) = -( rxt(k,rid_jn2o) )
         mat(k,352) = rxt(k,rid_hk21)

         mat(k,147) = -( rxt(k,rid_jch4) )

         mat(k,173) = -( rxt(k,rid_jh2o) )

         mat(k,84) = rxt(k,rid_jco2)
         mat(k,226) = rxt(k,rid_jch2o_h) + rxt(k,rid_jch2o_h2)

         mat(k,216) = -( rxt(k,rid_jhcl) + het_rates(k,4) )

         mat(k,141) = -( het_rates(k,7) )

         mat(k,83) = -( rxt(k,rid_jco2) )

         mat(k,229) = rxt(k,rid_jch2o_h2)

         mat(k,231) = -( rxt(k,rid_jch2o_h) + rxt(k,rid_jch2o_h2)
     $           + het_rates(k,6) )
         mat(k,112) = rxt(k,rid_jch3ooh)

         mat(k,3) = -( rxt(k,rid_jcfc10) )

         mat(k,7) = -( rxt(k,rid_jcfc11) )

         mat(k,11) = -( rxt(k,rid_jcfc12) )

         mat(k,15) = -( rxt(k,rid_jcfc113) )

         mat(k,19) = -( rxt(k,rid_jcfc114) )

         mat(k,23) = -( rxt(k,rid_jcfc115) )

         mat(k,76) = -( rxt(k,rid_jhcfc22) )

         mat(k,30) = -( rxt(k,rid_jch3ccl3) )

         mat(k,94) = -( rxt(k,rid_jch3cl) )

         mat(k,35) = -( rxt(k,rid_jha1211) )

         mat(k,27) = -( rxt(k,rid_jha1301) )

         mat(k,14) = 3.000*rxt(k,rid_jcfc113)
         mat(k,75) = 2.000*rxt(k,rid_jhcfc22)
         mat(k,34) = 2.000*rxt(k,rid_jha1211)
         mat(k,26) = 3.000*rxt(k,rid_jha1301)
         mat(k,18) = 4.000*rxt(k,rid_jcfc114)
         mat(k,22) = 5.000*rxt(k,rid_jcfc115)

         mat(k,87) = -( rxt(k,rid_jch3br) )

         mat(k,43) = -( rxt(k,rid_jchbr3) )

         mat(k,527) = -( rxt(k,rid_jo3_op) + rxt(k,rid_jo3_od) )

         mat(k,250) = 2.000*rxt(k,rid_jo2_op) + rxt(k,rid_jo2_od)
         mat(k,524) = rxt(k,rid_jo3_op)
         mat(k,547) = rxt(k,rid_jno2)
         mat(k,264) = rxt(k,rid_joclo)
         mat(k,508) = rxt(k,rid_jno3_no2)
         mat(k,418) = rxt(k,rid_jno)
         mat(k,282) = rxt(k,rid_jbro)
         mat(k,399) = rxt(k,rid_jho2)
         mat(k,372) = rxt(k,rid_hk4)

         mat(k,368) = -( rxt(k,rid_hk4) + rxt(k,rid_hk21) )
         mat(k,247) = rxt(k,rid_jo2_od)
         mat(k,41) = rxt(k,rid_jn2o)
         mat(k,86) = rxt(k,rid_jco2)
         mat(k,520) = rxt(k,rid_jo3_od)

         mat(k,176) = rxt(k,rid_jh2o)
         mat(k,157) = rxt(k,rid_jch4)
         mat(k,239) = rxt(k,rid_jch2o_h)
         mat(k,221) = rxt(k,rid_jhcl)

         mat(k,174) = rxt(k,rid_jh2o)
         mat(k,131) = rxt(k,rid_jhno3)
         mat(k,203) = rxt(k,rid_jhocl)
         mat(k,118) = rxt(k,rid_jhno4_2)
         mat(k,125) = 2.000*rxt(k,rid_jh2o2)
         mat(k,49) = rxt(k,rid_jhobr)
         mat(k,113) = rxt(k,rid_jch3ooh)
         mat(k,394) = rxt(k,rid_jho2)

         mat(k,396) = -( rxt(k,rid_jho2) )
         mat(k,119) = rxt(k,rid_jhno4_1) + rxt(k,rid_b24)
         mat(k,236) = rxt(k,rid_jch2o_h)
         mat(k,114) = rxt(k,rid_jch3ooh)

         mat(k,122) = -( rxt(k,rid_jh2o2) + het_rates(k,2) )

         mat(k,13) = 2.000*rxt(k,rid_jcfc12)
         mat(k,9) = 3.000*rxt(k,rid_jcfc11)
         mat(k,5) = 4.000*rxt(k,rid_jcfc10)
         mat(k,205) = rxt(k,rid_jhocl)
         mat(k,33) = 3.000*rxt(k,rid_jch3ccl3)
         mat(k,101) = rxt(k,rid_jch3cl)
         mat(k,17) = 3.000*rxt(k,rid_jcfc113)
         mat(k,80) = rxt(k,rid_jhcfc22)
         mat(k,38) = rxt(k,rid_jha1211)
         mat(k,68) = 2.000*rxt(k,rid_jcl2o2)
         mat(k,162) = 2.000*rxt(k,rid_jcl2)
         mat(k,21) = 2.000*rxt(k,rid_jcfc114)
         mat(k,25) = rxt(k,rid_jcfc115)
         mat(k,219) = rxt(k,rid_jhcl)
         mat(k,63) = rxt(k,rid_jclno2)
         mat(k,52) = rxt(k,rid_jbrcl)
         mat(k,193) = rxt(k,rid_jclno4_2)

         mat(k,158) = -( rxt(k,rid_jcl2) )

         mat(k,198) = rxt(k,rid_jclno4_1)
         mat(k,269) = rxt(k,rid_joclo)
         mat(k,69) = 2.000*rxt(k,rid_d61)

         mat(k,256) = -( rxt(k,rid_joclo) )

         mat(k,201) = -( rxt(k,rid_jhocl) )
         mat(k,189) = rxt(k,rid_g1) + rxt(k,rid_het1)
     $                + rxt(k,rid_PMChet1)

         mat(k,188) = -( rxt(k,rid_jclno4_1) + rxt(k,rid_jclno4_2)
     $                + rxt(k,rid_g1) + rxt(k,rid_het1)
     $                + rxt(k,rid_PMChet1) )

         mat(k,62) = -( rxt(k,rid_jclno2) )

         mat(k,65) = -( rxt(k,rid_jcl2o2) + rxt(k,rid_d61) )

         mat(k,405) = rxt(k,rid_jno)

         mat(k,416) = -( rxt(k,rid_jno) )
         mat(k,545) = rxt(k,rid_jno2)
         mat(k,506) = rxt(k,rid_jno3_no)

         mat(k,551) = -( rxt(k,rid_jno2) )
         mat(k,133) = rxt(k,rid_jhno3)
         mat(k,121) = rxt(k,rid_jhno4_1) + rxt(k,rid_b24)
         mat(k,197) = rxt(k,rid_jclno4_1)
         mat(k,108) = rxt(k,rid_jn2o5) + rxt(k,rid_b32)
         mat(k,74) = .710*rxt(k,rid_jbrono2)
         mat(k,64) = rxt(k,rid_jclno2)
         mat(k,512) = rxt(k,rid_jno3_no2)

         mat(k,510) = -( rxt(k,rid_jno3_no2) + rxt(k,rid_jno3_no) )
         mat(k,120) = rxt(k,rid_jhno4_2)
         mat(k,107) = rxt(k,rid_jn2o5) + rxt(k,rid_b32)
         mat(k,73) = .290*rxt(k,rid_jbrono2)
         mat(k,196) = rxt(k,rid_jclno4_2)

         mat(k,129) = -( rxt(k,rid_jhno3) + het_rates(k,1) )
         mat(k,185) = rxt(k,rid_g1) + rxt(k,rid_het1)
     $                + rxt(k,rid_PMChet1)
         mat(k,104) = 2.000*rxt(k,rid_g2) + 2.000*rxt(k,rid_het3)
     $                + 2.000*rxt(k,rid_PMChet3)

         mat(k,103) = -( rxt(k,rid_jn2o5) + rxt(k,rid_b32)
     $                + rxt(k,rid_g2) + rxt(k,rid_het3)
     $                + rxt(k,rid_PMChet3) )

         mat(k,115) = -( rxt(k,rid_jhno4_1) + rxt(k,rid_jhno4_2)
     $                + rxt(k,rid_b24) + het_rates(k,5) )

         mat(k,36) = rxt(k,rid_jha1211)
         mat(k,28) = rxt(k,rid_jha1301)
         mat(k,72) = .290*rxt(k,rid_jbrono2)
         mat(k,48) = rxt(k,rid_jhobr)
         mat(k,90) = rxt(k,rid_jch3br)
         mat(k,51) = rxt(k,rid_jbrcl)
         mat(k,276) = rxt(k,rid_jbro)
         mat(k,45) = 3.000*rxt(k,rid_jchbr3)

         mat(k,275) = -( rxt(k,rid_jbro) )
         mat(k,71) = .710*rxt(k,rid_jbrono2)

         mat(k,47) = -( rxt(k,rid_jhobr) )

         mat(k,70) = -( rxt(k,rid_jbrono2) )

         mat(k,50) = -( rxt(k,rid_jbrcl) )

         mat(k,148) = rxt(k,rid_jch4)
         mat(k,96) = rxt(k,rid_jch3cl)
         mat(k,88) = rxt(k,rid_jch3br)

         mat(k,109) = -( rxt(k,rid_jch3ooh) + het_rates(k,3) )

         mat(k,246) = -( rxt(k,rid_jo2_op) + rxt(k,rid_jo2_od)
     $                + rxt(k,rid_j_o2s) )
         mat(k,516) = rxt(k,rid_jo3_op)
         mat(k,67) = rxt(k,rid_jcl2o2)
         mat(k,501) = rxt(k,rid_jno3_no)
         mat(k,54) = rxt(k,rid_hk9) + rxt(k,rid_hk30)
         mat(k,57) = rxt(k,rid_hk31)

         mat(k,53) = -( rxt(k,rid_hk9) + rxt(k,rid_hk30) )
         mat(k,514) = rxt(k,rid_jo3_od)
         mat(k,55) = rxt(k,rid_hk12)

         mat(k,56) = -( rxt(k,rid_hk12) + rxt(k,rid_hk31) )
         mat(k,244) = rxt(k,rid_j_o2s)


      end do

      end subroutine LINMAT

      subroutine NLNMAT( mat
     $,                  y
     $,                  rxt
     $,                  converged
     $,                  kl, ku )

      use RXT_NAMES
      use SPC_NAMES

      implicit none

!----------------------------------------------
!       ... Dummy args
!----------------------------------------------
      integer, intent(in) ::   kl, ku
      real, intent(in) ::   y(4,56)
      real, intent(in) ::   rxt(4,202)
      real, intent(out) ::  mat(4,573)
      logical, intent(in) ::   converged(4)

!----------------------------------------------
!       ... Local variables
!----------------------------------------------
      integer :: k

!----------------------------------------------
!       ... Nonlinear Matrix entries for Implicit species
!----------------------------------------------

      do k = kl,ku
         if( .not. converged(k) ) then
         mat(k,39) = -( (rxt(k,rid_b38) + rxt(k,rid_b39)
     $                ) * y(k,vid_o1d) )
         mat(k,352) = - (rxt(k,rid_b38) + rxt(k,rid_b39)
     $                ) * y(k,vid_n2o)


         mat(k,147) = -( (rxt(k,rid_c1) + rxt(k,rid_c1a)
     $                + rxt(k,rid_c1b)) * y(k,vid_o1d) + rxt(k,rid_c2)
     $                *y(k,vid_oh) + rxt(k,rid_d5)*y(k,vid_cl) )
         mat(k,357) = - (rxt(k,rid_c1) + rxt(k,rid_c1a)
     $                + rxt(k,rid_c1b)) * y(k,vid_ch4)
         mat(k,319) = - rxt(k,rid_c2)*y(k,vid_ch4)
         mat(k,429) = - rxt(k,rid_d5)*y(k,vid_ch4)


         mat(k,173) = -( rxt(k,rid_a1et)*y(k,vid_o1d) )
         mat(k,360) = - rxt(k,rid_a1et)*y(k,vid_h2o)

         mat(k,322) = mat(k,322) + rxt(k,rid_a17)*y(k,vid_ho2)
         mat(k,385) = mat(k,385) + rxt(k,rid_a17)*y(k,vid_oh)
         mat(k,177) = mat(k,177) + rxt(k,rid_a19)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_a19)*y(k,vid_h2)
         mat(k,480) = mat(k,480) + rxt(k,rid_a23c)*y(k,vid_ho2)
         mat(k,385) = mat(k,385) + rxt(k,rid_a23c)*y(k,vid_h)
         mat(k,322) = mat(k,322) + rxt(k,rid_a30)*y(k,vid_h2o2)
         mat(k,123) = mat(k,123) + rxt(k,rid_a30)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + 2.000*rxt(k,rid_a82)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_b27)*y(k,vid_hno3)
         mat(k,130) = mat(k,130) + rxt(k,rid_b27)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_b28)*y(k,vid_ho2no2)
         mat(k,116) = mat(k,116) + rxt(k,rid_b28)*y(k,vid_oh)
         mat(k,149) = mat(k,149) + rxt(k,rid_c2)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_c2)*y(k,vid_ch4)
         mat(k,228) = mat(k,228) + rxt(k,rid_c8)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_c8)*y(k,vid_ch2o)
         mat(k,322) = mat(k,322) + ( rxt(k,rid_c17) + rxt(k,rid_c44)  )
     $                *y(k,vid_ch3ooh)
         mat(k,111) = mat(k,111) + ( rxt(k,rid_c17) + rxt(k,rid_c44)  )
     $                *y(k,vid_oh)
         mat(k,97) = mat(k,97) + rxt(k,rid_d0)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_d0)*y(k,vid_ch3cl)
         mat(k,213) = mat(k,213) + rxt(k,rid_d11)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_d11)*y(k,vid_hcl)
         mat(k,322) = mat(k,322) + rxt(k,rid_d34)*y(k,vid_hocl)
         mat(k,200) = mat(k,200) + rxt(k,rid_d34)*y(k,vid_oh)
         mat(k,31) = mat(k,31) + rxt(k,rid_d50)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_d50)*y(k,vid_ch3ccl3)
         mat(k,77) = mat(k,77) + rxt(k,rid_d52)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_d52)*y(k,vid_hcfc22)
         mat(k,89) = mat(k,89) + rxt(k,rid_e0)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_e0)*y(k,vid_ch3br)
         mat(k,44) = mat(k,44) + rxt(k,rid_e1)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_e1)*y(k,vid_chbr3)
         mat(k,142) = mat(k,142) + rxt(k,rid_e11)*y(k,vid_oh)
         mat(k,322) = mat(k,322) + rxt(k,rid_e11)*y(k,vid_hbr)

         mat(k,135) = -( rxt(k,rid_a36)*y(k,vid_oh) + rxt(k,rid_c3)
     $                *y(k,vid_o3p) )
         mat(k,317) = - rxt(k,rid_a36)*y(k,vid_co)
         mat(k,457) = - rxt(k,rid_c3)*y(k,vid_co)

         mat(k,226) = mat(k,226) + rxt(k,rid_c8)*y(k,vid_oh)
         mat(k,317) = mat(k,317) + rxt(k,rid_c8)*y(k,vid_ch2o)
         mat(k,226) = mat(k,226) + rxt(k,rid_c9)*y(k,vid_o3p)
         mat(k,457) = mat(k,457) + rxt(k,rid_c9)*y(k,vid_ch2o)
         mat(k,226) = mat(k,226) + rxt(k,rid_c10)*y(k,vid_no3)
         mat(k,497) = mat(k,497) + rxt(k,rid_c10)*y(k,vid_ch2o)
         mat(k,95) = mat(k,95) + rxt(k,rid_d1)*y(k,vid_cl)
         mat(k,428) = mat(k,428) + rxt(k,rid_d1)*y(k,vid_ch3cl)
         mat(k,226) = mat(k,226) + rxt(k,rid_d10)*y(k,vid_cl)
         mat(k,428) = mat(k,428) + rxt(k,rid_d10)*y(k,vid_ch2o)
         mat(k,226) = mat(k,226) + rxt(k,rid_e9)*y(k,vid_br)
         mat(k,288) = mat(k,288) + rxt(k,rid_e9)*y(k,vid_ch2o)

         mat(k,216) = -( rxt(k,rid_d11)*y(k,vid_oh) + rxt(k,rid_d75)
     $                *y(k,vid_o1d) + rxt(k,rid_d85)*y(k,vid_o3p)
     $                + (rxt(k,rid_het2) + rxt(k,rid_PMChet2)
     $                ) * y(k,vid_clono2) + (rxt(k,rid_het4)
     $                + rxt(k,rid_PMChet4)) * y(k,vid_n2o5)
     $                + (rxt(k,rid_het5) + rxt(k,rid_PMChet5)
     $                ) * y(k,vid_hocl) )
         mat(k,326) = - rxt(k,rid_d11)*y(k,vid_hcl)
         mat(k,363) = - rxt(k,rid_d75)*y(k,vid_hcl)
         mat(k,463) = - rxt(k,rid_d85)*y(k,vid_hcl)
         mat(k,190) = - (rxt(k,rid_het2) + rxt(k,rid_PMChet2)
     $                ) * y(k,vid_hcl)
         mat(k,105) = - (rxt(k,rid_het4) + rxt(k,rid_PMChet4)
     $                ) * y(k,vid_hcl)
         mat(k,202) = - (rxt(k,rid_het5) + rxt(k,rid_PMChet5)
     $                ) * y(k,vid_hcl)

         mat(k,98) = mat(k,98) + 2.000*rxt(k,rid_d1)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + 2.000*rxt(k,rid_d1)
     $                *y(k,vid_ch3cl)
         mat(k,151) = mat(k,151) + rxt(k,rid_d5)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + rxt(k,rid_d5)*y(k,vid_ch4)
         mat(k,179) = mat(k,179) + rxt(k,rid_d6)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + rxt(k,rid_d6)*y(k,vid_h2)
         mat(k,388) = mat(k,388) + rxt(k,rid_d7)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + rxt(k,rid_d7)*y(k,vid_ho2)
         mat(k,326) = mat(k,326) + rxt(k,rid_d8a)*y(k,vid_clo)
         mat(k,558) = mat(k,558) + rxt(k,rid_d8a)*y(k,vid_oh)
         mat(k,230) = mat(k,230) + rxt(k,rid_d10)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + rxt(k,rid_d10)*y(k,vid_ch2o)
         mat(k,388) = mat(k,388) + rxt(k,rid_d33a)*y(k,vid_clo)
         mat(k,558) = mat(k,558) + rxt(k,rid_d33a)*y(k,vid_ho2)
         mat(k,124) = mat(k,124) + rxt(k,rid_d84)*y(k,vid_cl)
         mat(k,436) = mat(k,436) + rxt(k,rid_d84)*y(k,vid_h2o2)

         mat(k,141) = -( rxt(k,rid_e11)*y(k,vid_oh) + rxt(k,rid_e71)
     $                *y(k,vid_o1d) + rxt(k,rid_e81)*y(k,vid_o3p) )
         mat(k,318) = - rxt(k,rid_e11)*y(k,vid_hbr)
         mat(k,356) = - rxt(k,rid_e71)*y(k,vid_hbr)
         mat(k,458) = - rxt(k,rid_e81)*y(k,vid_hbr)

         mat(k,383) = mat(k,383) + rxt(k,rid_e7)*y(k,vid_br)
         mat(k,289) = mat(k,289) + rxt(k,rid_e7)*y(k,vid_ho2)
         mat(k,227) = mat(k,227) + rxt(k,rid_e9)*y(k,vid_br)
         mat(k,289) = mat(k,289) + rxt(k,rid_e9)*y(k,vid_ch2o)



         mat(k,134) = mat(k,134) + rxt(k,rid_a36)*y(k,vid_oh)
         mat(k,310) = mat(k,310) + rxt(k,rid_a36)*y(k,vid_co)
         mat(k,134) = mat(k,134) + rxt(k,rid_c3)*y(k,vid_o3p)
         mat(k,455) = mat(k,455) + rxt(k,rid_c3)*y(k,vid_co)

         mat(k,178) = -( rxt(k,rid_a3et)*y(k,vid_o1d) + rxt(k,rid_a19)
     $                *y(k,vid_oh) + rxt(k,rid_a24)*y(k,vid_o3p)
     $                + rxt(k,rid_d6)*y(k,vid_cl) )
         mat(k,361) = - rxt(k,rid_a3et)*y(k,vid_h2)
         mat(k,323) = - rxt(k,rid_a19)*y(k,vid_h2)
         mat(k,460) = - rxt(k,rid_a24)*y(k,vid_h2)
         mat(k,433) = - rxt(k,rid_d6)*y(k,vid_h2)

         mat(k,481) = mat(k,481) + rxt(k,rid_a23b)*y(k,vid_ho2)
         mat(k,386) = mat(k,386) + rxt(k,rid_a23b)*y(k,vid_h)
         mat(k,150) = mat(k,150) + rxt(k,rid_c1a)*y(k,vid_o1d)
         mat(k,361) = mat(k,361) + rxt(k,rid_c1a)*y(k,vid_ch4)

         mat(k,231) = -( rxt(k,rid_c8)*y(k,vid_oh) + rxt(k,rid_c9)
     $                *y(k,vid_o3p) + rxt(k,rid_c10)*y(k,vid_no3)
     $                + rxt(k,rid_d10)*y(k,vid_cl) + rxt(k,rid_e9)
     $                *y(k,vid_br) )
         mat(k,327) = - rxt(k,rid_c8)*y(k,vid_ch2o)
         mat(k,464) = - rxt(k,rid_c9)*y(k,vid_ch2o)
         mat(k,500) = - rxt(k,rid_c10)*y(k,vid_ch2o)
         mat(k,437) = - rxt(k,rid_d10)*y(k,vid_ch2o)
         mat(k,291) = - rxt(k,rid_e9)*y(k,vid_ch2o)

         mat(k,152) = mat(k,152) + ( rxt(k,rid_c1a) + rxt(k,rid_c1b)  )
     $                *y(k,vid_o1d)
         mat(k,364) = mat(k,364) + ( rxt(k,rid_c1a) + rxt(k,rid_c1b)  )
     $                *y(k,vid_ch4)
         mat(k,408) = mat(k,408) + rxt(k,rid_c5)*y(k,vid_ch3o2)
         mat(k,167) = mat(k,167) + rxt(k,rid_c5)*y(k,vid_no)
         mat(k,327) = mat(k,327) + rxt(k,rid_c44)*y(k,vid_ch3ooh)
         mat(k,112) = mat(k,112) + rxt(k,rid_c44)*y(k,vid_oh)

         mat(k,3) = -( rxt(k,rid_d101)*y(k,vid_o1d) )
         mat(k,344) = - rxt(k,rid_d101)*y(k,vid_cfc10)


         mat(k,7) = -( rxt(k,rid_d102)*y(k,vid_o1d) )
         mat(k,345) = - rxt(k,rid_d102)*y(k,vid_cfc11)


         mat(k,11) = -( rxt(k,rid_d103)*y(k,vid_o1d) )
         mat(k,346) = - rxt(k,rid_d103)*y(k,vid_cfc12)


         mat(k,15) = -( rxt(k,rid_d104)*y(k,vid_o1d) )
         mat(k,347) = - rxt(k,rid_d104)*y(k,vid_cfc113)


         mat(k,19) = -( rxt(k,rid_d105)*y(k,vid_o1d) )
         mat(k,348) = - rxt(k,rid_d105)*y(k,vid_cfc114)


         mat(k,23) = -( rxt(k,rid_d106)*y(k,vid_o1d) )
         mat(k,349) = - rxt(k,rid_d106)*y(k,vid_cfc115)


         mat(k,76) = -( rxt(k,rid_d52)*y(k,vid_oh) + rxt(k,rid_d107)
     $                *y(k,vid_o1d) )
         mat(k,309) = - rxt(k,rid_d52)*y(k,vid_hcfc22)
         mat(k,354) = - rxt(k,rid_d107)*y(k,vid_hcfc22)


         mat(k,30) = -( rxt(k,rid_d50)*y(k,vid_oh) )
         mat(k,307) = - rxt(k,rid_d50)*y(k,vid_ch3ccl3)


         mat(k,94) = -( rxt(k,rid_d0)*y(k,vid_oh) + rxt(k,rid_d1)
     $                *y(k,vid_cl) )
         mat(k,312) = - rxt(k,rid_d0)*y(k,vid_ch3cl)
         mat(k,426) = - rxt(k,rid_d1)*y(k,vid_ch3cl)


         mat(k,35) = -( rxt(k,rid_e92)*y(k,vid_o1d) )
         mat(k,351) = - rxt(k,rid_e92)*y(k,vid_ha1211)


         mat(k,27) = -( rxt(k,rid_e91)*y(k,vid_o1d) )
         mat(k,350) = - rxt(k,rid_e91)*y(k,vid_ha1301)




         mat(k,6) = mat(k,6) + rxt(k,rid_d102)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + rxt(k,rid_d102)*y(k,vid_cfc11)
         mat(k,10) = mat(k,10) + 2.000*rxt(k,rid_d103)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 2.000*rxt(k,rid_d103)
     $                *y(k,vid_cfc12)
         mat(k,14) = mat(k,14) + 3.000*rxt(k,rid_d104)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 3.000*rxt(k,rid_d104)
     $                *y(k,vid_cfc113)
         mat(k,18) = mat(k,18) + 4.000*rxt(k,rid_d105)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 4.000*rxt(k,rid_d105)
     $                *y(k,vid_cfc114)
         mat(k,22) = mat(k,22) + 5.000*rxt(k,rid_d106)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 5.000*rxt(k,rid_d106)
     $                *y(k,vid_cfc115)
         mat(k,75) = mat(k,75) + 2.000*rxt(k,rid_d107)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 2.000*rxt(k,rid_d107)
     $                *y(k,vid_hcfc22)
         mat(k,26) = mat(k,26) + 3.000*rxt(k,rid_e91)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 3.000*rxt(k,rid_e91)
     $                *y(k,vid_ha1301)
         mat(k,34) = mat(k,34) + 2.000*rxt(k,rid_e92)*y(k,vid_o1d)
         mat(k,343) = mat(k,343) + 2.000*rxt(k,rid_e92)
     $                *y(k,vid_ha1211)

         mat(k,87) = -( rxt(k,rid_e0)*y(k,vid_oh) + rxt(k,rid_e93)
     $                *y(k,vid_o1d) )
         mat(k,311) = - rxt(k,rid_e0)*y(k,vid_ch3br)
         mat(k,355) = - rxt(k,rid_e93)*y(k,vid_ch3br)


         mat(k,43) = -( rxt(k,rid_e1)*y(k,vid_oh) )
         mat(k,308) = - rxt(k,rid_e1)*y(k,vid_chbr3)


         mat(k,527) = -( rxt(k,rid_a2)*y(k,vid_h) + rxt(k,rid_a6)
     $                *y(k,vid_oh) + rxt(k,rid_a6b)*y(k,vid_ho2)
     $                + rxt(k,rid_b4)*y(k,vid_no) + rxt(k,rid_b9)
     $                *y(k,vid_no2) + rxt(k,rid_d2)*y(k,vid_cl)
     $                + rxt(k,rid_e2)*y(k,vid_br) + rxt(k,rid_hk3)
     $                *y(k,vid_o3p) + (rxt(k,rid_hk7a)
     $                + rxt(k,rid_hk7b)) * y(k,vid_o1d) )
         mat(k,492) = - rxt(k,rid_a2)*y(k,vid_o3)
         mat(k,340) = - rxt(k,rid_a6)*y(k,vid_o3)
         mat(k,402) = - rxt(k,rid_a6b)*y(k,vid_o3)
         mat(k,421) = - rxt(k,rid_b4)*y(k,vid_o3)
         mat(k,550) = - rxt(k,rid_b9)*y(k,vid_o3)
         mat(k,450) = - rxt(k,rid_d2)*y(k,vid_o3)
         mat(k,304) = - rxt(k,rid_e2)*y(k,vid_o3)
         mat(k,477) = - rxt(k,rid_hk3)*y(k,vid_o3)
         mat(k,375) = - (rxt(k,rid_hk7a) + rxt(k,rid_hk7b)
     $                ) * y(k,vid_o3)

         mat(k,402) = mat(k,402) + rxt(k,rid_d33a)*y(k,vid_clo)
         mat(k,571) = mat(k,571) + rxt(k,rid_d33a)*y(k,vid_ho2)
         mat(k,477) = mat(k,477) + rxt(k,rid_hk2)*y(k,vid_o2)
         mat(k,252) = mat(k,252) + rxt(k,rid_hk2)*y(k,vid_o3p)

         mat(k,474) = -( rxt(k,rid_a5)*y(k,vid_oh) + rxt(k,rid_a7)
     $                *y(k,vid_ho2) + rxt(k,rid_a24)*y(k,vid_h2)
     $                + rxt(k,rid_a81)*y(k,vid_h2o2) + (rxt(k,rid_b3)
     $                + rxt(k,rid_b81)) * y(k,vid_no2) + rxt(k,rid_b71)
     $                *y(k,vid_no3) + rxt(k,rid_b82)*y(k,vid_no)
     $                + rxt(k,rid_c3)*y(k,vid_co) + rxt(k,rid_c9)
     $                *y(k,vid_ch2o) + rxt(k,rid_d3)*y(k,vid_clo)
     $                + rxt(k,rid_d32)*y(k,vid_clono2) + rxt(k,rid_d35)
     $                *y(k,vid_hocl) + rxt(k,rid_d64)*y(k,vid_oclo)
     $                + rxt(k,rid_d85)*y(k,vid_hcl) + rxt(k,rid_e3)
     $                *y(k,vid_bro) + rxt(k,rid_e81)*y(k,vid_hbr)
     $                + 4.*rxt(k,rid_hk1)*y(k,vid_o3p) + rxt(k,rid_hk2)
     $                *y(k,vid_o2) + rxt(k,rid_hk3)*y(k,vid_o3) )
         mat(k,337) = - rxt(k,rid_a5)*y(k,vid_o3p)
         mat(k,399) = - rxt(k,rid_a7)*y(k,vid_o3p)
         mat(k,183) = - rxt(k,rid_a24)*y(k,vid_o3p)
         mat(k,128) = - rxt(k,rid_a81)*y(k,vid_o3p)
         mat(k,547) = - (rxt(k,rid_b3) + rxt(k,rid_b81)
     $                ) * y(k,vid_o3p)
         mat(k,508) = - rxt(k,rid_b71)*y(k,vid_o3p)
         mat(k,418) = - rxt(k,rid_b82)*y(k,vid_o3p)
         mat(k,139) = - rxt(k,rid_c3)*y(k,vid_o3p)
         mat(k,238) = - rxt(k,rid_c9)*y(k,vid_o3p)
         mat(k,568) = - rxt(k,rid_d3)*y(k,vid_o3p)
         mat(k,194) = - rxt(k,rid_d32)*y(k,vid_o3p)
         mat(k,206) = - rxt(k,rid_d35)*y(k,vid_o3p)
         mat(k,264) = - rxt(k,rid_d64)*y(k,vid_o3p)
         mat(k,220) = - rxt(k,rid_d85)*y(k,vid_o3p)
         mat(k,282) = - rxt(k,rid_e3)*y(k,vid_o3p)
         mat(k,146) = - rxt(k,rid_e81)*y(k,vid_o3p)
         mat(k,250) = - rxt(k,rid_hk2)*y(k,vid_o3p)
         mat(k,524) = - rxt(k,rid_hk3)*y(k,vid_o3p)

         mat(k,489) = mat(k,489) + rxt(k,rid_a23c)*y(k,vid_ho2)
         mat(k,399) = mat(k,399) + rxt(k,rid_a23c)*y(k,vid_h)
         mat(k,337) = mat(k,337) + 2.000*rxt(k,rid_a82)*y(k,vid_oh)
         mat(k,61) = mat(k,61) + rxt(k,rid_b6)*y(k,vid_no)
         mat(k,418) = mat(k,418) + rxt(k,rid_b6)*y(k,vid_n)
         mat(k,61) = mat(k,61) + rxt(k,rid_b7)*y(k,vid_o2)
         mat(k,250) = mat(k,250) + rxt(k,rid_b7)*y(k,vid_n)
         mat(k,372) = mat(k,372) + ( rxt(k,rid_hk5a) + rxt(k,rid_hk5b)
     $                )*y(k,vid_o2)
         mat(k,250) = mat(k,250) + ( rxt(k,rid_hk5a) + rxt(k,rid_hk5b)
     $                )*y(k,vid_o1d)
         mat(k,524) = mat(k,524) + 2.000*rxt(k,rid_hk7b)
     $                *y(k,vid_o1d)
         mat(k,372) = mat(k,372) + 2.000*rxt(k,rid_hk7b)*y(k,vid_o3)

         mat(k,368) = -( rxt(k,rid_a1et)*y(k,vid_h2o) + rxt(k,rid_a3et)
     $                *y(k,vid_h2) + (rxt(k,rid_b38) + rxt(k,rid_b39)
     $                ) * y(k,vid_n2o) + (rxt(k,rid_c1)
     $                + rxt(k,rid_c1a) + rxt(k,rid_c1b)
     $                ) * y(k,vid_ch4) + rxt(k,rid_d71)*y(k,vid_cl2)
     $                + rxt(k,rid_d75)*y(k,vid_hcl) + rxt(k,rid_d101)
     $                *y(k,vid_cfc10) + rxt(k,rid_d102)
     $                *y(k,vid_cfc11) + rxt(k,rid_d103)
     $                *y(k,vid_cfc12) + rxt(k,rid_d104)
     $                *y(k,vid_cfc113) + rxt(k,rid_d105)
     $                *y(k,vid_cfc114) + rxt(k,rid_d106)
     $                *y(k,vid_cfc115) + rxt(k,rid_d107)
     $                *y(k,vid_hcfc22) + rxt(k,rid_e71)*y(k,vid_hbr)
     $                + rxt(k,rid_e91)*y(k,vid_ha1301) + rxt(k,rid_e92)
     $                *y(k,vid_ha1211) + rxt(k,rid_e93)
     $                *y(k,vid_ch3br) + (rxt(k,rid_hk5a)
     $                + rxt(k,rid_hk5b)) * y(k,vid_o2)
     $                + (rxt(k,rid_hk7a) + rxt(k,rid_hk7b)
     $                ) * y(k,vid_o3) )
         mat(k,175) = - rxt(k,rid_a1et)*y(k,vid_o1d)
         mat(k,181) = - rxt(k,rid_a3et)*y(k,vid_o1d)
         mat(k,41) = - (rxt(k,rid_b38) + rxt(k,rid_b39)
     $                ) * y(k,vid_o1d)
         mat(k,154) = - (rxt(k,rid_c1) + rxt(k,rid_c1a)
     $                + rxt(k,rid_c1b)) * y(k,vid_o1d)
         mat(k,161) = - rxt(k,rid_d71)*y(k,vid_o1d)
         mat(k,218) = - rxt(k,rid_d75)*y(k,vid_o1d)
         mat(k,4) = - rxt(k,rid_d101)*y(k,vid_o1d)
         mat(k,8) = - rxt(k,rid_d102)*y(k,vid_o1d)
         mat(k,12) = - rxt(k,rid_d103)*y(k,vid_o1d)
         mat(k,16) = - rxt(k,rid_d104)*y(k,vid_o1d)
         mat(k,20) = - rxt(k,rid_d105)*y(k,vid_o1d)
         mat(k,24) = - rxt(k,rid_d106)*y(k,vid_o1d)
         mat(k,79) = - rxt(k,rid_d107)*y(k,vid_o1d)
         mat(k,145) = - rxt(k,rid_e71)*y(k,vid_o1d)
         mat(k,29) = - rxt(k,rid_e91)*y(k,vid_o1d)
         mat(k,37) = - rxt(k,rid_e92)*y(k,vid_o1d)
         mat(k,92) = - rxt(k,rid_e93)*y(k,vid_o1d)
         mat(k,247) = - (rxt(k,rid_hk5a) + rxt(k,rid_hk5b)
     $                ) * y(k,vid_o1d)
         mat(k,520) = - (rxt(k,rid_hk7a) + rxt(k,rid_hk7b)
     $                ) * y(k,vid_o1d)


         mat(k,490) = -( rxt(k,rid_a1)*y(k,vid_o2) + rxt(k,rid_a2)
     $                *y(k,vid_o3) + (rxt(k,rid_a23a) + rxt(k,rid_a23b)
     $                + rxt(k,rid_a23c)) * y(k,vid_ho2) )
         mat(k,251) = - rxt(k,rid_a1)*y(k,vid_h)
         mat(k,525) = - rxt(k,rid_a2)*y(k,vid_h)
         mat(k,400) = - (rxt(k,rid_a23a) + rxt(k,rid_a23b)
     $                + rxt(k,rid_a23c)) * y(k,vid_h)

         mat(k,184) = mat(k,184) + rxt(k,rid_a3et)*y(k,vid_o1d)
         mat(k,373) = mat(k,373) + rxt(k,rid_a3et)*y(k,vid_h2)
         mat(k,475) = mat(k,475) + rxt(k,rid_a5)*y(k,vid_oh)
         mat(k,338) = mat(k,338) + rxt(k,rid_a5)*y(k,vid_o3p)
         mat(k,184) = mat(k,184) + rxt(k,rid_a19)*y(k,vid_oh)
         mat(k,338) = mat(k,338) + rxt(k,rid_a19)*y(k,vid_h2)
         mat(k,184) = mat(k,184) + rxt(k,rid_a24)*y(k,vid_o3p)
         mat(k,475) = mat(k,475) + rxt(k,rid_a24)*y(k,vid_h2)
         mat(k,140) = mat(k,140) + rxt(k,rid_a36)*y(k,vid_oh)
         mat(k,338) = mat(k,338) + rxt(k,rid_a36)*y(k,vid_co)
         mat(k,157) = mat(k,157) + rxt(k,rid_c1b)*y(k,vid_o1d)
         mat(k,373) = mat(k,373) + rxt(k,rid_c1b)*y(k,vid_ch4)
         mat(k,184) = mat(k,184) + rxt(k,rid_d6)*y(k,vid_cl)
         mat(k,448) = mat(k,448) + rxt(k,rid_d6)*y(k,vid_h2)

         mat(k,332) = -( rxt(k,rid_a5)*y(k,vid_o3p) + rxt(k,rid_a6)
     $                *y(k,vid_o3) + rxt(k,rid_a17)*y(k,vid_ho2)
     $                + rxt(k,rid_a19)*y(k,vid_h2) + rxt(k,rid_a30)
     $                *y(k,vid_h2o2) + rxt(k,rid_a36)*y(k,vid_co)
     $                + (4.*rxt(k,rid_a82) + 4.*rxt(k,rid_a83)
     $                ) * y(k,vid_oh) + rxt(k,rid_b22)*y(k,vid_no2)
     $                + rxt(k,rid_b27)*y(k,vid_hno3) + rxt(k,rid_b28)
     $                *y(k,vid_ho2no2) + rxt(k,rid_b72)*y(k,vid_no3)
     $                + rxt(k,rid_c2)*y(k,vid_ch4) + rxt(k,rid_c8)
     $                *y(k,vid_ch2o) + rxt(k,rid_c17)
     $                *y(k,vid_ch3ooh) + rxt(k,rid_d0)
     $                *y(k,vid_ch3cl) + (rxt(k,rid_d8) + rxt(k,rid_d8a)
     $                ) * y(k,vid_clo) + rxt(k,rid_d11)*y(k,vid_hcl)
     $                + rxt(k,rid_d34)*y(k,vid_hocl) + rxt(k,rid_d50)
     $                *y(k,vid_ch3ccl3) + rxt(k,rid_d52)
     $                *y(k,vid_hcfc22) + rxt(k,rid_d62)
     $                *y(k,vid_oclo) + rxt(k,rid_d81)*y(k,vid_cl2)
     $                + rxt(k,rid_d87)*y(k,vid_clono2) + rxt(k,rid_e0)
     $                *y(k,vid_ch3br) + rxt(k,rid_e1)*y(k,vid_chbr3)
     $                + rxt(k,rid_e11)*y(k,vid_hbr) + rxt(k,rid_e72)
     $                *y(k,vid_bro) )
         mat(k,469) = - rxt(k,rid_a5)*y(k,vid_oh)
         mat(k,519) = - rxt(k,rid_a6)*y(k,vid_oh)
         mat(k,394) = - rxt(k,rid_a17)*y(k,vid_oh)
         mat(k,180) = - rxt(k,rid_a19)*y(k,vid_oh)
         mat(k,125) = - rxt(k,rid_a30)*y(k,vid_oh)
         mat(k,137) = - rxt(k,rid_a36)*y(k,vid_oh)
         mat(k,542) = - rxt(k,rid_b22)*y(k,vid_oh)
         mat(k,131) = - rxt(k,rid_b27)*y(k,vid_oh)
         mat(k,118) = - rxt(k,rid_b28)*y(k,vid_oh)
         mat(k,503) = - rxt(k,rid_b72)*y(k,vid_oh)
         mat(k,153) = - rxt(k,rid_c2)*y(k,vid_oh)
         mat(k,234) = - rxt(k,rid_c8)*y(k,vid_oh)
         mat(k,113) = - rxt(k,rid_c17)*y(k,vid_oh)
         mat(k,99) = - rxt(k,rid_d0)*y(k,vid_oh)
         mat(k,563) = - (rxt(k,rid_d8) + rxt(k,rid_d8a)
     $                ) * y(k,vid_oh)
         mat(k,217) = - rxt(k,rid_d11)*y(k,vid_oh)
         mat(k,203) = - rxt(k,rid_d34)*y(k,vid_oh)
         mat(k,32) = - rxt(k,rid_d50)*y(k,vid_oh)
         mat(k,78) = - rxt(k,rid_d52)*y(k,vid_oh)
         mat(k,259) = - rxt(k,rid_d62)*y(k,vid_oh)
         mat(k,160) = - rxt(k,rid_d81)*y(k,vid_oh)
         mat(k,191) = - rxt(k,rid_d87)*y(k,vid_oh)
         mat(k,91) = - rxt(k,rid_e0)*y(k,vid_oh)
         mat(k,46) = - rxt(k,rid_e1)*y(k,vid_oh)
         mat(k,144) = - rxt(k,rid_e11)*y(k,vid_oh)
         mat(k,277) = - rxt(k,rid_e72)*y(k,vid_oh)

         mat(k,174) = mat(k,174) + 2.000*rxt(k,rid_a1et)
     $                *y(k,vid_o1d)
         mat(k,367) = mat(k,367) + 2.000*rxt(k,rid_a1et)
     $                *y(k,vid_h2o)
         mat(k,180) = mat(k,180) + rxt(k,rid_a3et)*y(k,vid_o1d)
         mat(k,367) = mat(k,367) + rxt(k,rid_a3et)*y(k,vid_h2)
         mat(k,519) = mat(k,519) + rxt(k,rid_a2)*y(k,vid_h)
         mat(k,484) = mat(k,484) + rxt(k,rid_a2)*y(k,vid_o3)
         mat(k,519) = mat(k,519) + rxt(k,rid_a6b)*y(k,vid_ho2)
         mat(k,394) = mat(k,394) + rxt(k,rid_a6b)*y(k,vid_o3)
         mat(k,469) = mat(k,469) + rxt(k,rid_a7)*y(k,vid_ho2)
         mat(k,394) = mat(k,394) + rxt(k,rid_a7)*y(k,vid_o3p)
         mat(k,484) = mat(k,484) + 2.000*rxt(k,rid_a23a)
     $                *y(k,vid_ho2)
         mat(k,394) = mat(k,394) + 2.000*rxt(k,rid_a23a)*y(k,vid_h)
         mat(k,180) = mat(k,180) + rxt(k,rid_a24)*y(k,vid_o3p)
         mat(k,469) = mat(k,469) + rxt(k,rid_a24)*y(k,vid_h2)
         mat(k,394) = mat(k,394) + rxt(k,rid_a26)*y(k,vid_no)
         mat(k,413) = mat(k,413) + rxt(k,rid_a26)*y(k,vid_ho2)
         mat(k,469) = mat(k,469) + rxt(k,rid_a81)*y(k,vid_h2o2)
         mat(k,125) = mat(k,125) + rxt(k,rid_a81)*y(k,vid_o3p)
         mat(k,394) = mat(k,394) + rxt(k,rid_b73a)*y(k,vid_no3)
         mat(k,503) = mat(k,503) + rxt(k,rid_b73a)*y(k,vid_ho2)
         mat(k,153) = mat(k,153) + rxt(k,rid_c1)*y(k,vid_o1d)
         mat(k,367) = mat(k,367) + rxt(k,rid_c1)*y(k,vid_ch4)
         mat(k,234) = mat(k,234) + rxt(k,rid_c9)*y(k,vid_o3p)
         mat(k,469) = mat(k,469) + rxt(k,rid_c9)*y(k,vid_ch2o)
         mat(k,469) = mat(k,469) + rxt(k,rid_d35)*y(k,vid_hocl)
         mat(k,203) = mat(k,203) + rxt(k,rid_d35)*y(k,vid_o3p)
         mat(k,442) = mat(k,442) + rxt(k,rid_d37)*y(k,vid_hocl)
         mat(k,203) = mat(k,203) + rxt(k,rid_d37)*y(k,vid_cl)
         mat(k,217) = mat(k,217) + rxt(k,rid_d75)*y(k,vid_o1d)
         mat(k,367) = mat(k,367) + rxt(k,rid_d75)*y(k,vid_hcl)
         mat(k,394) = mat(k,394) + rxt(k,rid_d83)*y(k,vid_cl)
         mat(k,442) = mat(k,442) + rxt(k,rid_d83)*y(k,vid_ho2)
         mat(k,217) = mat(k,217) + rxt(k,rid_d85)*y(k,vid_o3p)
         mat(k,469) = mat(k,469) + rxt(k,rid_d85)*y(k,vid_hcl)
         mat(k,144) = mat(k,144) + rxt(k,rid_e71)*y(k,vid_o1d)
         mat(k,367) = mat(k,367) + rxt(k,rid_e71)*y(k,vid_hbr)
         mat(k,144) = mat(k,144) + rxt(k,rid_e81)*y(k,vid_o3p)
         mat(k,469) = mat(k,469) + rxt(k,rid_e81)*y(k,vid_hbr)

         mat(k,396) = -( rxt(k,rid_a6b)*y(k,vid_o3) + rxt(k,rid_a7)
     $                *y(k,vid_o3p) + rxt(k,rid_a17)*y(k,vid_oh)
     $                + (rxt(k,rid_a23a) + rxt(k,rid_a23b)
     $                + rxt(k,rid_a23c)) * y(k,vid_h) + rxt(k,rid_a26)
     $                *y(k,vid_no) + 4.*rxt(k,rid_a27)*y(k,vid_ho2)
     $                + rxt(k,rid_b23)*y(k,vid_no2) + (rxt(k,rid_b73a)
     $                + rxt(k,rid_b73b)) * y(k,vid_no3) + rxt(k,rid_c7)
     $                *y(k,vid_ch3o2) + (rxt(k,rid_d7) + rxt(k,rid_d83)
     $                ) * y(k,vid_cl) + (rxt(k,rid_d33)
     $                + rxt(k,rid_d33a)) * y(k,vid_clo) + rxt(k,rid_e7)
     $                *y(k,vid_br) + rxt(k,rid_e15)*y(k,vid_bro) )
         mat(k,521) = - rxt(k,rid_a6b)*y(k,vid_ho2)
         mat(k,471) = - rxt(k,rid_a7)*y(k,vid_ho2)
         mat(k,334) = - rxt(k,rid_a17)*y(k,vid_ho2)
         mat(k,486) = - (rxt(k,rid_a23a) + rxt(k,rid_a23b)
     $                + rxt(k,rid_a23c)) * y(k,vid_ho2)
         mat(k,415) = - rxt(k,rid_a26)*y(k,vid_ho2)
         mat(k,544) = - rxt(k,rid_b23)*y(k,vid_ho2)
         mat(k,505) = - (rxt(k,rid_b73a) + rxt(k,rid_b73b)
     $                ) * y(k,vid_ho2)
         mat(k,170) = - rxt(k,rid_c7)*y(k,vid_ho2)
         mat(k,444) = - (rxt(k,rid_d7) + rxt(k,rid_d83)
     $                ) * y(k,vid_ho2)
         mat(k,565) = - (rxt(k,rid_d33) + rxt(k,rid_d33a)
     $                ) * y(k,vid_ho2)
         mat(k,298) = - rxt(k,rid_e7)*y(k,vid_ho2)
         mat(k,279) = - rxt(k,rid_e15)*y(k,vid_ho2)

         mat(k,486) = mat(k,486) + rxt(k,rid_a1)*y(k,vid_o2)
         mat(k,248) = mat(k,248) + rxt(k,rid_a1)*y(k,vid_h)
         mat(k,521) = mat(k,521) + rxt(k,rid_a6)*y(k,vid_oh)
         mat(k,334) = mat(k,334) + rxt(k,rid_a6)*y(k,vid_o3)
         mat(k,334) = mat(k,334) + rxt(k,rid_a30)*y(k,vid_h2o2)
         mat(k,126) = mat(k,126) + rxt(k,rid_a30)*y(k,vid_oh)
         mat(k,471) = mat(k,471) + rxt(k,rid_a81)*y(k,vid_h2o2)
         mat(k,126) = mat(k,126) + rxt(k,rid_a81)*y(k,vid_o3p)
         mat(k,334) = mat(k,334) + rxt(k,rid_b72)*y(k,vid_no3)
         mat(k,505) = mat(k,505) + rxt(k,rid_b72)*y(k,vid_oh)
         mat(k,155) = mat(k,155) + rxt(k,rid_c1b)*y(k,vid_o1d)
         mat(k,369) = mat(k,369) + rxt(k,rid_c1b)*y(k,vid_ch4)
         mat(k,415) = mat(k,415) + rxt(k,rid_c5)*y(k,vid_ch3o2)
         mat(k,170) = mat(k,170) + rxt(k,rid_c5)*y(k,vid_no)
         mat(k,236) = mat(k,236) + rxt(k,rid_c8)*y(k,vid_oh)
         mat(k,334) = mat(k,334) + rxt(k,rid_c8)*y(k,vid_ch2o)
         mat(k,236) = mat(k,236) + rxt(k,rid_c9)*y(k,vid_o3p)
         mat(k,471) = mat(k,471) + rxt(k,rid_c9)*y(k,vid_ch2o)
         mat(k,236) = mat(k,236) + rxt(k,rid_c10)*y(k,vid_no3)
         mat(k,505) = mat(k,505) + rxt(k,rid_c10)*y(k,vid_ch2o)
         mat(k,100) = mat(k,100) + rxt(k,rid_d0)*y(k,vid_oh)
         mat(k,334) = mat(k,334) + rxt(k,rid_d0)*y(k,vid_ch3cl)
         mat(k,100) = mat(k,100) + rxt(k,rid_d1)*y(k,vid_cl)
         mat(k,444) = mat(k,444) + rxt(k,rid_d1)*y(k,vid_ch3cl)
         mat(k,334) = mat(k,334) + rxt(k,rid_d8)*y(k,vid_clo)
         mat(k,565) = mat(k,565) + rxt(k,rid_d8)*y(k,vid_oh)
         mat(k,236) = mat(k,236) + rxt(k,rid_d10)*y(k,vid_cl)
         mat(k,444) = mat(k,444) + rxt(k,rid_d10)*y(k,vid_ch2o)
         mat(k,126) = mat(k,126) + rxt(k,rid_d84)*y(k,vid_cl)
         mat(k,444) = mat(k,444) + rxt(k,rid_d84)*y(k,vid_h2o2)
         mat(k,93) = mat(k,93) + rxt(k,rid_e0)*y(k,vid_oh)
         mat(k,334) = mat(k,334) + rxt(k,rid_e0)*y(k,vid_ch3br)
         mat(k,236) = mat(k,236) + rxt(k,rid_e9)*y(k,vid_br)
         mat(k,298) = mat(k,298) + rxt(k,rid_e9)*y(k,vid_ch2o)
         mat(k,334) = mat(k,334) + rxt(k,rid_e72)*y(k,vid_bro)
         mat(k,279) = mat(k,279) + rxt(k,rid_e72)*y(k,vid_oh)

         mat(k,122) = -( rxt(k,rid_a30)*y(k,vid_oh) + rxt(k,rid_a81)
     $                *y(k,vid_o3p) + rxt(k,rid_d84)*y(k,vid_cl) )
         mat(k,315) = - rxt(k,rid_a30)*y(k,vid_h2o2)
         mat(k,456) = - rxt(k,rid_a81)*y(k,vid_h2o2)
         mat(k,427) = - rxt(k,rid_d84)*y(k,vid_h2o2)

         mat(k,381) = mat(k,381) + 2.000*rxt(k,rid_a27)*y(k,vid_ho2)
         mat(k,315) = mat(k,315) + 2.000*rxt(k,rid_a83)*y(k,vid_oh)

         mat(k,446) = -( rxt(k,rid_d1)*y(k,vid_ch3cl) + rxt(k,rid_d2)
     $                *y(k,vid_o3) + rxt(k,rid_d5)*y(k,vid_ch4)
     $                + rxt(k,rid_d6)*y(k,vid_h2) + (rxt(k,rid_d7)
     $                + rxt(k,rid_d83)) * y(k,vid_ho2) + rxt(k,rid_d10)
     $                *y(k,vid_ch2o) + rxt(k,rid_d36)*y(k,vid_no2)
     $                + rxt(k,rid_d37)*y(k,vid_hocl) + rxt(k,rid_d63)
     $                *y(k,vid_oclo) + rxt(k,rid_d73)*y(k,vid_no3)
     $                + rxt(k,rid_d82)*y(k,vid_clono2) + rxt(k,rid_d84)
     $                *y(k,vid_h2o2) )
         mat(k,101) = - rxt(k,rid_d1)*y(k,vid_cl)
         mat(k,523) = - rxt(k,rid_d2)*y(k,vid_cl)
         mat(k,156) = - rxt(k,rid_d5)*y(k,vid_cl)
         mat(k,182) = - rxt(k,rid_d6)*y(k,vid_cl)
         mat(k,398) = - (rxt(k,rid_d7) + rxt(k,rid_d83)
     $                ) * y(k,vid_cl)
         mat(k,237) = - rxt(k,rid_d10)*y(k,vid_cl)
         mat(k,546) = - rxt(k,rid_d36)*y(k,vid_cl)
         mat(k,205) = - rxt(k,rid_d37)*y(k,vid_cl)
         mat(k,263) = - rxt(k,rid_d63)*y(k,vid_cl)
         mat(k,507) = - rxt(k,rid_d73)*y(k,vid_cl)
         mat(k,193) = - rxt(k,rid_d82)*y(k,vid_cl)
         mat(k,127) = - rxt(k,rid_d84)*y(k,vid_cl)

         mat(k,101) = mat(k,101) + rxt(k,rid_d0)*y(k,vid_oh)
         mat(k,336) = mat(k,336) + rxt(k,rid_d0)*y(k,vid_ch3cl)
         mat(k,473) = mat(k,473) + rxt(k,rid_d3)*y(k,vid_clo)
         mat(k,567) = mat(k,567) + rxt(k,rid_d3)*y(k,vid_o3p)
         mat(k,567) = mat(k,567) + rxt(k,rid_d4)*y(k,vid_no)
         mat(k,417) = mat(k,417) + rxt(k,rid_d4)*y(k,vid_clo)
         mat(k,336) = mat(k,336) + rxt(k,rid_d8)*y(k,vid_clo)
         mat(k,567) = mat(k,567) + rxt(k,rid_d8)*y(k,vid_oh)
         mat(k,219) = mat(k,219) + rxt(k,rid_d11)*y(k,vid_oh)
         mat(k,336) = mat(k,336) + rxt(k,rid_d11)*y(k,vid_hcl)
         mat(k,567) = mat(k,567) + ( 2.000*rxt(k,rid_d47)
     $                + 4.000*rxt(k,rid_d49)  )*y(k,vid_clo)
         mat(k,33) = mat(k,33) + 3.000*rxt(k,rid_d50)*y(k,vid_oh)
         mat(k,336) = mat(k,336) + 3.000*rxt(k,rid_d50)
     $                *y(k,vid_ch3ccl3)
         mat(k,80) = mat(k,80) + rxt(k,rid_d52)*y(k,vid_oh)
         mat(k,336) = mat(k,336) + rxt(k,rid_d52)*y(k,vid_hcfc22)
         mat(k,371) = mat(k,371) + rxt(k,rid_d71)*y(k,vid_cl2)
         mat(k,162) = mat(k,162) + rxt(k,rid_d71)*y(k,vid_o1d)
         mat(k,567) = mat(k,567) + rxt(k,rid_d74)*y(k,vid_no3)
         mat(k,507) = mat(k,507) + rxt(k,rid_d74)*y(k,vid_clo)
         mat(k,219) = mat(k,219) + rxt(k,rid_d75)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + rxt(k,rid_d75)*y(k,vid_hcl)
         mat(k,336) = mat(k,336) + rxt(k,rid_d81)*y(k,vid_cl2)
         mat(k,162) = mat(k,162) + rxt(k,rid_d81)*y(k,vid_oh)
         mat(k,219) = mat(k,219) + rxt(k,rid_d85)*y(k,vid_o3p)
         mat(k,473) = mat(k,473) + rxt(k,rid_d85)*y(k,vid_hcl)
         mat(k,5) = mat(k,5) + 4.000*rxt(k,rid_d101)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + 4.000*rxt(k,rid_d101)
     $                *y(k,vid_cfc10)
         mat(k,9) = mat(k,9) + 3.000*rxt(k,rid_d102)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + 3.000*rxt(k,rid_d102)
     $                *y(k,vid_cfc11)
         mat(k,13) = mat(k,13) + 2.000*rxt(k,rid_d103)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + 2.000*rxt(k,rid_d103)
     $                *y(k,vid_cfc12)
         mat(k,17) = mat(k,17) + 3.000*rxt(k,rid_d104)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + 3.000*rxt(k,rid_d104)
     $                *y(k,vid_cfc113)
         mat(k,21) = mat(k,21) + 2.000*rxt(k,rid_d105)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + 2.000*rxt(k,rid_d105)
     $                *y(k,vid_cfc114)
         mat(k,25) = mat(k,25) + rxt(k,rid_d106)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + rxt(k,rid_d106)*y(k,vid_cfc115)
         mat(k,80) = mat(k,80) + rxt(k,rid_d107)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + rxt(k,rid_d107)*y(k,vid_hcfc22)
         mat(k,567) = mat(k,567) + rxt(k,rid_e5b)*y(k,vid_bro)
         mat(k,281) = mat(k,281) + rxt(k,rid_e5b)*y(k,vid_clo)
         mat(k,38) = mat(k,38) + rxt(k,rid_e92)*y(k,vid_o1d)
         mat(k,371) = mat(k,371) + rxt(k,rid_e92)*y(k,vid_ha1211)

         mat(k,158) = -( rxt(k,rid_d71)*y(k,vid_o1d) + rxt(k,rid_d81)
     $                *y(k,vid_oh) )
         mat(k,358) = - rxt(k,rid_d71)*y(k,vid_cl2)
         mat(k,320) = - rxt(k,rid_d81)*y(k,vid_cl2)

         mat(k,430) = mat(k,430) + rxt(k,rid_d37)*y(k,vid_hocl)
         mat(k,199) = mat(k,199) + rxt(k,rid_d37)*y(k,vid_cl)
         mat(k,555) = mat(k,555) + 2.000*rxt(k,rid_d48)*y(k,vid_clo)
         mat(k,430) = mat(k,430) + rxt(k,rid_d72)*y(k,vid_cl2o2)
         mat(k,66) = mat(k,66) + rxt(k,rid_d72)*y(k,vid_cl)
         mat(k,430) = mat(k,430) + rxt(k,rid_d82)*y(k,vid_clono2)
         mat(k,186) = mat(k,186) + rxt(k,rid_d82)*y(k,vid_cl)
         mat(k,212) = mat(k,212) + ( rxt(k,rid_het2)
     $                + rxt(k,rid_PMChet2)  )*y(k,vid_clono2)
         mat(k,186) = mat(k,186) + ( rxt(k,rid_het2)
     $                + rxt(k,rid_PMChet2)  )*y(k,vid_hcl)
         mat(k,212) = mat(k,212) + ( rxt(k,rid_het5)
     $                + rxt(k,rid_PMChet5)  )*y(k,vid_hocl)
         mat(k,199) = mat(k,199) + ( rxt(k,rid_het5)
     $                + rxt(k,rid_PMChet5)  )*y(k,vid_hcl)

         mat(k,573) = -( rxt(k,rid_d3)*y(k,vid_o3p) + rxt(k,rid_d4)
     $                *y(k,vid_no) + (rxt(k,rid_d8) + rxt(k,rid_d8a)
     $                ) * y(k,vid_oh) + rxt(k,rid_d31)*y(k,vid_no2)
     $                + (rxt(k,rid_d33) + rxt(k,rid_d33a)
     $                ) * y(k,vid_ho2) + (4.*rxt(k,rid_d47)
     $                + 4.*rxt(k,rid_d48) + 4.*rxt(k,rid_d49)
     $                + 4.*rxt(k,rid_d60)) * y(k,vid_clo)
     $                + rxt(k,rid_d74)*y(k,vid_no3) + (rxt(k,rid_e5a)
     $                + rxt(k,rid_e5b) + rxt(k,rid_e5c)
     $                ) * y(k,vid_bro) )
         mat(k,479) = - rxt(k,rid_d3)*y(k,vid_clo)
         mat(k,423) = - rxt(k,rid_d4)*y(k,vid_clo)
         mat(k,342) = - (rxt(k,rid_d8) + rxt(k,rid_d8a)
     $                ) * y(k,vid_clo)
         mat(k,552) = - rxt(k,rid_d31)*y(k,vid_clo)
         mat(k,404) = - (rxt(k,rid_d33) + rxt(k,rid_d33a)
     $                ) * y(k,vid_clo)
         mat(k,513) = - rxt(k,rid_d74)*y(k,vid_clo)
         mat(k,287) = - (rxt(k,rid_e5a) + rxt(k,rid_e5b)
     $                + rxt(k,rid_e5c)) * y(k,vid_clo)

         mat(k,529) = mat(k,529) + rxt(k,rid_d2)*y(k,vid_cl)
         mat(k,452) = mat(k,452) + rxt(k,rid_d2)*y(k,vid_o3)
         mat(k,479) = mat(k,479) + rxt(k,rid_d32)*y(k,vid_clono2)
         mat(k,198) = mat(k,198) + rxt(k,rid_d32)*y(k,vid_o3p)
         mat(k,342) = mat(k,342) + rxt(k,rid_d34)*y(k,vid_hocl)
         mat(k,208) = mat(k,208) + rxt(k,rid_d34)*y(k,vid_oh)
         mat(k,479) = mat(k,479) + rxt(k,rid_d35)*y(k,vid_hocl)
         mat(k,208) = mat(k,208) + rxt(k,rid_d35)*y(k,vid_o3p)
         mat(k,452) = mat(k,452) + 2.000*rxt(k,rid_d63)
     $                *y(k,vid_oclo)
         mat(k,269) = mat(k,269) + 2.000*rxt(k,rid_d63)*y(k,vid_cl)
         mat(k,479) = mat(k,479) + rxt(k,rid_d64)*y(k,vid_oclo)
         mat(k,269) = mat(k,269) + rxt(k,rid_d64)*y(k,vid_o3p)
         mat(k,269) = mat(k,269) + rxt(k,rid_d65)*y(k,vid_no)
         mat(k,423) = mat(k,423) + rxt(k,rid_d65)*y(k,vid_oclo)
         mat(k,377) = mat(k,377) + rxt(k,rid_d71)*y(k,vid_cl2)
         mat(k,163) = mat(k,163) + rxt(k,rid_d71)*y(k,vid_o1d)
         mat(k,452) = mat(k,452) + rxt(k,rid_d73)*y(k,vid_no3)
         mat(k,513) = mat(k,513) + rxt(k,rid_d73)*y(k,vid_cl)
         mat(k,269) = mat(k,269) + rxt(k,rid_e8)*y(k,vid_br)
         mat(k,306) = mat(k,306) + rxt(k,rid_e8)*y(k,vid_oclo)

         mat(k,256) = -( rxt(k,rid_d62)*y(k,vid_oh) + rxt(k,rid_d63)
     $                *y(k,vid_cl) + rxt(k,rid_d64)*y(k,vid_o3p)
     $                + rxt(k,rid_d65)*y(k,vid_no) + rxt(k,rid_e8)
     $                *y(k,vid_br) )
         mat(k,329) = - rxt(k,rid_d62)*y(k,vid_oclo)
         mat(k,439) = - rxt(k,rid_d63)*y(k,vid_oclo)
         mat(k,466) = - rxt(k,rid_d64)*y(k,vid_oclo)
         mat(k,410) = - rxt(k,rid_d65)*y(k,vid_oclo)
         mat(k,293) = - rxt(k,rid_e8)*y(k,vid_oclo)

         mat(k,560) = mat(k,560) + 2.000*rxt(k,rid_d47)*y(k,vid_clo)
         mat(k,391) = mat(k,391) + rxt(k,rid_d83)*y(k,vid_cl)
         mat(k,439) = mat(k,439) + rxt(k,rid_d83)*y(k,vid_ho2)
         mat(k,560) = mat(k,560) + rxt(k,rid_e5a)*y(k,vid_bro)
         mat(k,274) = mat(k,274) + rxt(k,rid_e5a)*y(k,vid_clo)

         mat(k,201) = -( rxt(k,rid_d34)*y(k,vid_oh) + rxt(k,rid_d35)
     $                *y(k,vid_o3p) + rxt(k,rid_d37)*y(k,vid_cl)
     $                + (rxt(k,rid_het5) + rxt(k,rid_PMChet5)
     $                ) * y(k,vid_hcl) )
         mat(k,325) = - rxt(k,rid_d34)*y(k,vid_hocl)
         mat(k,462) = - rxt(k,rid_d35)*y(k,vid_hocl)
         mat(k,435) = - rxt(k,rid_d37)*y(k,vid_hocl)
         mat(k,215) = - (rxt(k,rid_het5) + rxt(k,rid_PMChet5)
     $                ) * y(k,vid_hocl)

         mat(k,387) = mat(k,387) + rxt(k,rid_d33)*y(k,vid_clo)
         mat(k,557) = mat(k,557) + rxt(k,rid_d33)*y(k,vid_ho2)
         mat(k,325) = mat(k,325) + rxt(k,rid_d62)*y(k,vid_oclo)
         mat(k,253) = mat(k,253) + rxt(k,rid_d62)*y(k,vid_oh)
         mat(k,325) = mat(k,325) + rxt(k,rid_d81)*y(k,vid_cl2)
         mat(k,159) = mat(k,159) + rxt(k,rid_d81)*y(k,vid_oh)
         mat(k,325) = mat(k,325) + rxt(k,rid_d87)*y(k,vid_clono2)
         mat(k,189) = mat(k,189) + rxt(k,rid_d87)*y(k,vid_oh)

         mat(k,188) = -( rxt(k,rid_d32)*y(k,vid_o3p) + rxt(k,rid_d82)
     $                *y(k,vid_cl) + rxt(k,rid_d87)*y(k,vid_oh)
     $                + (rxt(k,rid_het2) + rxt(k,rid_PMChet2)
     $                ) * y(k,vid_hcl) )
         mat(k,461) = - rxt(k,rid_d32)*y(k,vid_clono2)
         mat(k,434) = - rxt(k,rid_d82)*y(k,vid_clono2)
         mat(k,324) = - rxt(k,rid_d87)*y(k,vid_clono2)
         mat(k,214) = - (rxt(k,rid_het2) + rxt(k,rid_PMChet2)
     $                ) * y(k,vid_clono2)

         mat(k,556) = mat(k,556) + rxt(k,rid_d31)*y(k,vid_no2)
         mat(k,536) = mat(k,536) + rxt(k,rid_d31)*y(k,vid_clo)



         mat(k,424) = mat(k,424) + rxt(k,rid_d36)*y(k,vid_no2)
         mat(k,530) = mat(k,530) + rxt(k,rid_d36)*y(k,vid_cl)
         mat(k,209) = mat(k,209) + ( rxt(k,rid_het4)
     $                + rxt(k,rid_PMChet4)  )*y(k,vid_n2o5)
         mat(k,102) = mat(k,102) + ( rxt(k,rid_het4)
     $                + rxt(k,rid_PMChet4)  )*y(k,vid_hcl)

         mat(k,65) = -( rxt(k,rid_d72)*y(k,vid_cl) )
         mat(k,425) = - rxt(k,rid_d72)*y(k,vid_cl2o2)

         mat(k,554) = mat(k,554) + 2.000*rxt(k,rid_d60)*y(k,vid_clo)

         mat(k,58) = -( rxt(k,rid_b6)*y(k,vid_no) + rxt(k,rid_b7)
     $                *y(k,vid_o2) )
         mat(k,405) = - rxt(k,rid_b6)*y(k,vid_n)
         mat(k,245) = - rxt(k,rid_b7)*y(k,vid_n)


         mat(k,416) = -( rxt(k,rid_a26)*y(k,vid_ho2) + rxt(k,rid_b4)
     $                *y(k,vid_o3) + rxt(k,rid_b6)*y(k,vid_n)
     $                + rxt(k,rid_b82)*y(k,vid_o3p) + rxt(k,rid_b84)
     $                *y(k,vid_no3) + rxt(k,rid_c5)*y(k,vid_ch3o2)
     $                + rxt(k,rid_d4)*y(k,vid_clo) + rxt(k,rid_d65)
     $                *y(k,vid_oclo) + rxt(k,rid_e4)*y(k,vid_bro) )
         mat(k,397) = - rxt(k,rid_a26)*y(k,vid_no)
         mat(k,522) = - rxt(k,rid_b4)*y(k,vid_no)
         mat(k,60) = - rxt(k,rid_b6)*y(k,vid_no)
         mat(k,472) = - rxt(k,rid_b82)*y(k,vid_no)
         mat(k,506) = - rxt(k,rid_b84)*y(k,vid_no)
         mat(k,171) = - rxt(k,rid_c5)*y(k,vid_no)
         mat(k,566) = - rxt(k,rid_d4)*y(k,vid_no)
         mat(k,262) = - rxt(k,rid_d65)*y(k,vid_no)
         mat(k,280) = - rxt(k,rid_e4)*y(k,vid_no)

         mat(k,472) = mat(k,472) + rxt(k,rid_b3)*y(k,vid_no2)
         mat(k,545) = mat(k,545) + rxt(k,rid_b3)*y(k,vid_o3p)
         mat(k,60) = mat(k,60) + rxt(k,rid_b7)*y(k,vid_o2)
         mat(k,249) = mat(k,249) + rxt(k,rid_b7)*y(k,vid_n)
         mat(k,42) = mat(k,42) + 2.000*rxt(k,rid_b39)*y(k,vid_o1d)
         mat(k,370) = mat(k,370) + 2.000*rxt(k,rid_b39)*y(k,vid_n2o)

         mat(k,551) = -( (rxt(k,rid_b3) + rxt(k,rid_b81)
     $                ) * y(k,vid_o3p) + rxt(k,rid_b9)*y(k,vid_o3)
     $                + rxt(k,rid_b12)*y(k,vid_no3) + rxt(k,rid_b22)
     $                *y(k,vid_oh) + rxt(k,rid_b23)*y(k,vid_ho2)
     $                + rxt(k,rid_d31)*y(k,vid_clo) + rxt(k,rid_d36)
     $                *y(k,vid_cl) + rxt(k,rid_e13)*y(k,vid_bro) )
         mat(k,478) = - (rxt(k,rid_b3) + rxt(k,rid_b81)
     $                ) * y(k,vid_no2)
         mat(k,528) = - rxt(k,rid_b9)*y(k,vid_no2)
         mat(k,512) = - rxt(k,rid_b12)*y(k,vid_no2)
         mat(k,341) = - rxt(k,rid_b22)*y(k,vid_no2)
         mat(k,403) = - rxt(k,rid_b23)*y(k,vid_no2)
         mat(k,572) = - rxt(k,rid_d31)*y(k,vid_no2)
         mat(k,451) = - rxt(k,rid_d36)*y(k,vid_no2)
         mat(k,286) = - rxt(k,rid_e13)*y(k,vid_no2)

         mat(k,403) = mat(k,403) + rxt(k,rid_a26)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_a26)*y(k,vid_ho2)
         mat(k,528) = mat(k,528) + rxt(k,rid_b4)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_b4)*y(k,vid_o3)
         mat(k,341) = mat(k,341) + rxt(k,rid_b28)*y(k,vid_ho2no2)
         mat(k,121) = mat(k,121) + rxt(k,rid_b28)*y(k,vid_oh)
         mat(k,478) = mat(k,478) + rxt(k,rid_b71)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + rxt(k,rid_b71)*y(k,vid_o3p)
         mat(k,341) = mat(k,341) + rxt(k,rid_b72)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + rxt(k,rid_b72)*y(k,vid_oh)
         mat(k,403) = mat(k,403) + rxt(k,rid_b73a)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + rxt(k,rid_b73a)*y(k,vid_ho2)
         mat(k,478) = mat(k,478) + rxt(k,rid_b82)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_b82)*y(k,vid_o3p)
         mat(k,422) = mat(k,422) + 2.000*rxt(k,rid_b84)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + 2.000*rxt(k,rid_b84)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_c5)*y(k,vid_ch3o2)
         mat(k,172) = mat(k,172) + rxt(k,rid_c5)*y(k,vid_no)
         mat(k,572) = mat(k,572) + rxt(k,rid_d4)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_d4)*y(k,vid_clo)
         mat(k,268) = mat(k,268) + rxt(k,rid_d65)*y(k,vid_no)
         mat(k,422) = mat(k,422) + rxt(k,rid_d65)*y(k,vid_oclo)
         mat(k,451) = mat(k,451) + rxt(k,rid_d73)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + rxt(k,rid_d73)*y(k,vid_cl)
         mat(k,572) = mat(k,572) + rxt(k,rid_d74)*y(k,vid_no3)
         mat(k,512) = mat(k,512) + rxt(k,rid_d74)*y(k,vid_clo)
         mat(k,422) = mat(k,422) + rxt(k,rid_e4)*y(k,vid_bro)
         mat(k,286) = mat(k,286) + rxt(k,rid_e4)*y(k,vid_no)

         mat(k,510) = -( rxt(k,rid_b12)*y(k,vid_no2) + rxt(k,rid_b71)
     $                *y(k,vid_o3p) + rxt(k,rid_b72)*y(k,vid_oh)
     $                + (rxt(k,rid_b73a) + rxt(k,rid_b73b)
     $                ) * y(k,vid_ho2) + rxt(k,rid_b84)*y(k,vid_no)
     $                + rxt(k,rid_c10)*y(k,vid_ch2o) + rxt(k,rid_d73)
     $                *y(k,vid_cl) + rxt(k,rid_d74)*y(k,vid_clo) )
         mat(k,549) = - rxt(k,rid_b12)*y(k,vid_no3)
         mat(k,476) = - rxt(k,rid_b71)*y(k,vid_no3)
         mat(k,339) = - rxt(k,rid_b72)*y(k,vid_no3)
         mat(k,401) = - (rxt(k,rid_b73a) + rxt(k,rid_b73b)
     $                ) * y(k,vid_no3)
         mat(k,420) = - rxt(k,rid_b84)*y(k,vid_no3)
         mat(k,240) = - rxt(k,rid_c10)*y(k,vid_no3)
         mat(k,449) = - rxt(k,rid_d73)*y(k,vid_no3)
         mat(k,570) = - rxt(k,rid_d74)*y(k,vid_no3)

         mat(k,526) = mat(k,526) + rxt(k,rid_b9)*y(k,vid_no2)
         mat(k,549) = mat(k,549) + rxt(k,rid_b9)*y(k,vid_o3)
         mat(k,339) = mat(k,339) + rxt(k,rid_b27)*y(k,vid_hno3)
         mat(k,132) = mat(k,132) + rxt(k,rid_b27)*y(k,vid_oh)
         mat(k,476) = mat(k,476) + rxt(k,rid_b81)*y(k,vid_no2)
         mat(k,549) = mat(k,549) + rxt(k,rid_b81)*y(k,vid_o3p)
         mat(k,476) = mat(k,476) + rxt(k,rid_d32)*y(k,vid_clono2)
         mat(k,196) = mat(k,196) + rxt(k,rid_d32)*y(k,vid_o3p)
         mat(k,449) = mat(k,449) + rxt(k,rid_d82)*y(k,vid_clono2)
         mat(k,196) = mat(k,196) + rxt(k,rid_d82)*y(k,vid_cl)
         mat(k,339) = mat(k,339) + rxt(k,rid_d87)*y(k,vid_clono2)
         mat(k,196) = mat(k,196) + rxt(k,rid_d87)*y(k,vid_oh)

         mat(k,129) = -( rxt(k,rid_b27)*y(k,vid_oh) )
         mat(k,316) = - rxt(k,rid_b27)*y(k,vid_hno3)

         mat(k,316) = mat(k,316) + rxt(k,rid_b22)*y(k,vid_no2)
         mat(k,534) = mat(k,534) + rxt(k,rid_b22)*y(k,vid_oh)
         mat(k,382) = mat(k,382) + rxt(k,rid_b73b)*y(k,vid_no3)
         mat(k,496) = mat(k,496) + rxt(k,rid_b73b)*y(k,vid_ho2)
         mat(k,225) = mat(k,225) + rxt(k,rid_c10)*y(k,vid_no3)
         mat(k,496) = mat(k,496) + rxt(k,rid_c10)*y(k,vid_ch2o)
         mat(k,211) = mat(k,211) + ( rxt(k,rid_het2)
     $                + rxt(k,rid_PMChet2)  )*y(k,vid_clono2)
         mat(k,185) = mat(k,185) + ( rxt(k,rid_het2)
     $                + rxt(k,rid_PMChet2)  )*y(k,vid_hcl)
         mat(k,211) = mat(k,211) + ( rxt(k,rid_het4)
     $                + rxt(k,rid_PMChet4)  )*y(k,vid_n2o5)
         mat(k,104) = mat(k,104) + ( rxt(k,rid_het4)
     $                + rxt(k,rid_PMChet4)  )*y(k,vid_hcl)

         mat(k,103) = -( (rxt(k,rid_het4) + rxt(k,rid_PMChet4)
     $                ) * y(k,vid_hcl) )
         mat(k,210) = - (rxt(k,rid_het4) + rxt(k,rid_PMChet4)
     $                ) * y(k,vid_n2o5)

         mat(k,532) = mat(k,532) + rxt(k,rid_b12)*y(k,vid_no3)
         mat(k,495) = mat(k,495) + rxt(k,rid_b12)*y(k,vid_no2)

         mat(k,115) = -( rxt(k,rid_b28)*y(k,vid_oh) )
         mat(k,314) = - rxt(k,rid_b28)*y(k,vid_ho2no2)

         mat(k,380) = mat(k,380) + rxt(k,rid_b23)*y(k,vid_no2)
         mat(k,533) = mat(k,533) + rxt(k,rid_b23)*y(k,vid_ho2)

         mat(k,295) = -( rxt(k,rid_e2)*y(k,vid_o3) + rxt(k,rid_e7)
     $                *y(k,vid_ho2) + rxt(k,rid_e8)*y(k,vid_oclo)
     $                + rxt(k,rid_e9)*y(k,vid_ch2o) )
         mat(k,518) = - rxt(k,rid_e2)*y(k,vid_br)
         mat(k,393) = - rxt(k,rid_e7)*y(k,vid_br)
         mat(k,258) = - rxt(k,rid_e8)*y(k,vid_br)
         mat(k,233) = - rxt(k,rid_e9)*y(k,vid_br)

         mat(k,90) = mat(k,90) + rxt(k,rid_e0)*y(k,vid_oh)
         mat(k,331) = mat(k,331) + rxt(k,rid_e0)*y(k,vid_ch3br)
         mat(k,45) = mat(k,45) + 3.000*rxt(k,rid_e1)*y(k,vid_oh)
         mat(k,331) = mat(k,331) + 3.000*rxt(k,rid_e1)
     $                *y(k,vid_chbr3)
         mat(k,468) = mat(k,468) + rxt(k,rid_e3)*y(k,vid_bro)
         mat(k,276) = mat(k,276) + rxt(k,rid_e3)*y(k,vid_o3p)
         mat(k,412) = mat(k,412) + rxt(k,rid_e4)*y(k,vid_bro)
         mat(k,276) = mat(k,276) + rxt(k,rid_e4)*y(k,vid_no)
         mat(k,562) = mat(k,562) + ( rxt(k,rid_e5a) + rxt(k,rid_e5b)  )
     $                *y(k,vid_bro)
         mat(k,276) = mat(k,276) + ( rxt(k,rid_e5a) + rxt(k,rid_e5b)  )
     $                *y(k,vid_clo)
         mat(k,276) = mat(k,276) + 4.000*rxt(k,rid_e6)*y(k,vid_bro)
         mat(k,143) = mat(k,143) + rxt(k,rid_e11)*y(k,vid_oh)
         mat(k,331) = mat(k,331) + rxt(k,rid_e11)*y(k,vid_hbr)
         mat(k,143) = mat(k,143) + rxt(k,rid_e71)*y(k,vid_o1d)
         mat(k,366) = mat(k,366) + rxt(k,rid_e71)*y(k,vid_hbr)
         mat(k,331) = mat(k,331) + rxt(k,rid_e72)*y(k,vid_bro)
         mat(k,276) = mat(k,276) + rxt(k,rid_e72)*y(k,vid_oh)
         mat(k,143) = mat(k,143) + rxt(k,rid_e81)*y(k,vid_o3p)
         mat(k,468) = mat(k,468) + rxt(k,rid_e81)*y(k,vid_hbr)
         mat(k,28) = mat(k,28) + rxt(k,rid_e91)*y(k,vid_o1d)
         mat(k,366) = mat(k,366) + rxt(k,rid_e91)*y(k,vid_ha1301)
         mat(k,36) = mat(k,36) + rxt(k,rid_e92)*y(k,vid_o1d)
         mat(k,366) = mat(k,366) + rxt(k,rid_e92)*y(k,vid_ha1211)
         mat(k,90) = mat(k,90) + rxt(k,rid_e93)*y(k,vid_o1d)
         mat(k,366) = mat(k,366) + rxt(k,rid_e93)*y(k,vid_ch3br)

         mat(k,275) = -( rxt(k,rid_e3)*y(k,vid_o3p) + rxt(k,rid_e4)
     $                *y(k,vid_no) + (rxt(k,rid_e5a) + rxt(k,rid_e5b)
     $                + rxt(k,rid_e5c)) * y(k,vid_clo)
     $                + 4.*rxt(k,rid_e6)*y(k,vid_bro) + rxt(k,rid_e13)
     $                *y(k,vid_no2) + rxt(k,rid_e15)*y(k,vid_ho2)
     $                + rxt(k,rid_e72)*y(k,vid_oh) )
         mat(k,467) = - rxt(k,rid_e3)*y(k,vid_bro)
         mat(k,411) = - rxt(k,rid_e4)*y(k,vid_bro)
         mat(k,561) = - (rxt(k,rid_e5a) + rxt(k,rid_e5b)
     $                + rxt(k,rid_e5c)) * y(k,vid_bro)
         mat(k,540) = - rxt(k,rid_e13)*y(k,vid_bro)
         mat(k,392) = - rxt(k,rid_e15)*y(k,vid_bro)
         mat(k,330) = - rxt(k,rid_e72)*y(k,vid_bro)

         mat(k,517) = mat(k,517) + rxt(k,rid_e2)*y(k,vid_br)
         mat(k,294) = mat(k,294) + rxt(k,rid_e2)*y(k,vid_o3)
         mat(k,257) = mat(k,257) + rxt(k,rid_e8)*y(k,vid_br)
         mat(k,294) = mat(k,294) + rxt(k,rid_e8)*y(k,vid_oclo)



         mat(k,378) = mat(k,378) + rxt(k,rid_e15)*y(k,vid_bro)
         mat(k,270) = mat(k,270) + rxt(k,rid_e15)*y(k,vid_ho2)



         mat(k,531) = mat(k,531) + rxt(k,rid_e13)*y(k,vid_bro)
         mat(k,272) = mat(k,272) + rxt(k,rid_e13)*y(k,vid_no2)



         mat(k,553) = mat(k,553) + rxt(k,rid_e5c)*y(k,vid_bro)
         mat(k,271) = mat(k,271) + rxt(k,rid_e5c)*y(k,vid_clo)

         mat(k,165) = -( rxt(k,rid_c5)*y(k,vid_no) + rxt(k,rid_c7)
     $                *y(k,vid_ho2) )
         mat(k,406) = - rxt(k,rid_c5)*y(k,vid_ch3o2)
         mat(k,384) = - rxt(k,rid_c7)*y(k,vid_ch3o2)

         mat(k,148) = mat(k,148) + rxt(k,rid_c1)*y(k,vid_o1d)
         mat(k,359) = mat(k,359) + rxt(k,rid_c1)*y(k,vid_ch4)
         mat(k,148) = mat(k,148) + rxt(k,rid_c2)*y(k,vid_oh)
         mat(k,321) = mat(k,321) + rxt(k,rid_c2)*y(k,vid_ch4)
         mat(k,321) = mat(k,321) + rxt(k,rid_c17)*y(k,vid_ch3ooh)
         mat(k,110) = mat(k,110) + rxt(k,rid_c17)*y(k,vid_oh)
         mat(k,148) = mat(k,148) + rxt(k,rid_d5)*y(k,vid_cl)
         mat(k,431) = mat(k,431) + rxt(k,rid_d5)*y(k,vid_ch4)

         mat(k,109) = -( (rxt(k,rid_c17) + rxt(k,rid_c44)
     $                ) * y(k,vid_oh) )
         mat(k,313) = - (rxt(k,rid_c17) + rxt(k,rid_c44)
     $                ) * y(k,vid_ch3ooh)

         mat(k,379) = mat(k,379) + rxt(k,rid_c7)*y(k,vid_ch3o2)
         mat(k,164) = mat(k,164) + rxt(k,rid_c7)*y(k,vid_ho2)

         mat(k,246) = -( rxt(k,rid_a1)*y(k,vid_h) + rxt(k,rid_b7)
     $                *y(k,vid_n) + rxt(k,rid_hk2)*y(k,vid_o3p)
     $                + rxt(k,rid_hk5b)*y(k,vid_o1d) + rxt(k,rid_hk8)
     $                *y(k,vid_o2dg) )
         mat(k,483) = - rxt(k,rid_a1)*y(k,vid_o2)
         mat(k,59) = - rxt(k,rid_b7)*y(k,vid_o2)
         mat(k,465) = - rxt(k,rid_hk2)*y(k,vid_o2)
         mat(k,365) = - rxt(k,rid_hk5b)*y(k,vid_o2)
         mat(k,54) = - rxt(k,rid_hk8)*y(k,vid_o2)

         mat(k,516) = mat(k,516) + rxt(k,rid_a2)*y(k,vid_h)
         mat(k,483) = mat(k,483) + rxt(k,rid_a2)*y(k,vid_o3)
         mat(k,465) = mat(k,465) + rxt(k,rid_a5)*y(k,vid_oh)
         mat(k,328) = mat(k,328) + rxt(k,rid_a5)*y(k,vid_o3p)
         mat(k,516) = mat(k,516) + rxt(k,rid_a6)*y(k,vid_oh)
         mat(k,328) = mat(k,328) + rxt(k,rid_a6)*y(k,vid_o3)
         mat(k,516) = mat(k,516) + 2.000*rxt(k,rid_a6b)*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + 2.000*rxt(k,rid_a6b)*y(k,vid_o3)
         mat(k,465) = mat(k,465) + rxt(k,rid_a7)*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + rxt(k,rid_a7)*y(k,vid_o3p)
         mat(k,328) = mat(k,328) + rxt(k,rid_a17)*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + rxt(k,rid_a17)*y(k,vid_oh)
         mat(k,483) = mat(k,483) + rxt(k,rid_a23b)*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + rxt(k,rid_a23b)*y(k,vid_h)
         mat(k,390) = mat(k,390) + 2.000*rxt(k,rid_a27)*y(k,vid_ho2)
         mat(k,465) = mat(k,465) + rxt(k,rid_b3)*y(k,vid_no2)
         mat(k,539) = mat(k,539) + rxt(k,rid_b3)*y(k,vid_o3p)
         mat(k,516) = mat(k,516) + rxt(k,rid_b4)*y(k,vid_no)
         mat(k,409) = mat(k,409) + rxt(k,rid_b4)*y(k,vid_o3)
         mat(k,516) = mat(k,516) + rxt(k,rid_b9)*y(k,vid_no2)
         mat(k,539) = mat(k,539) + rxt(k,rid_b9)*y(k,vid_o3)
         mat(k,328) = mat(k,328) + rxt(k,rid_b28)*y(k,vid_ho2no2)
         mat(k,117) = mat(k,117) + rxt(k,rid_b28)*y(k,vid_oh)
         mat(k,40) = mat(k,40) + rxt(k,rid_b38)*y(k,vid_o1d)
         mat(k,365) = mat(k,365) + rxt(k,rid_b38)*y(k,vid_n2o)
         mat(k,465) = mat(k,465) + rxt(k,rid_b71)*y(k,vid_no3)
         mat(k,501) = mat(k,501) + rxt(k,rid_b71)*y(k,vid_o3p)
         mat(k,390) = mat(k,390) + ( rxt(k,rid_b73a) + rxt(k,rid_b73b)
     $                )*y(k,vid_no3)
         mat(k,501) = mat(k,501) + ( rxt(k,rid_b73a) + rxt(k,rid_b73b)
     $                )*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + rxt(k,rid_c7)*y(k,vid_ch3o2)
         mat(k,168) = mat(k,168) + rxt(k,rid_c7)*y(k,vid_ho2)
         mat(k,516) = mat(k,516) + rxt(k,rid_d2)*y(k,vid_cl)
         mat(k,438) = mat(k,438) + rxt(k,rid_d2)*y(k,vid_o3)
         mat(k,465) = mat(k,465) + rxt(k,rid_d3)*y(k,vid_clo)
         mat(k,559) = mat(k,559) + rxt(k,rid_d3)*y(k,vid_o3p)
         mat(k,390) = mat(k,390) + rxt(k,rid_d7)*y(k,vid_cl)
         mat(k,438) = mat(k,438) + rxt(k,rid_d7)*y(k,vid_ho2)
         mat(k,328) = mat(k,328) + rxt(k,rid_d8a)*y(k,vid_clo)
         mat(k,559) = mat(k,559) + rxt(k,rid_d8a)*y(k,vid_oh)
         mat(k,390) = mat(k,390) + rxt(k,rid_d33)*y(k,vid_clo)
         mat(k,559) = mat(k,559) + rxt(k,rid_d33)*y(k,vid_ho2)
         mat(k,559) = mat(k,559) + ( 2.000*rxt(k,rid_d48)
     $                + 2.000*rxt(k,rid_d49)  )*y(k,vid_clo)
         mat(k,328) = mat(k,328) + rxt(k,rid_d62)*y(k,vid_oclo)
         mat(k,255) = mat(k,255) + rxt(k,rid_d62)*y(k,vid_oh)
         mat(k,465) = mat(k,465) + rxt(k,rid_d64)*y(k,vid_oclo)
         mat(k,255) = mat(k,255) + rxt(k,rid_d64)*y(k,vid_o3p)
         mat(k,438) = mat(k,438) + rxt(k,rid_d72)*y(k,vid_cl2o2)
         mat(k,67) = mat(k,67) + rxt(k,rid_d72)*y(k,vid_cl)
         mat(k,559) = mat(k,559) + rxt(k,rid_d74)*y(k,vid_no3)
         mat(k,501) = mat(k,501) + rxt(k,rid_d74)*y(k,vid_clo)
         mat(k,516) = mat(k,516) + rxt(k,rid_e2)*y(k,vid_br)
         mat(k,292) = mat(k,292) + rxt(k,rid_e2)*y(k,vid_o3)
         mat(k,465) = mat(k,465) + rxt(k,rid_e3)*y(k,vid_bro)
         mat(k,273) = mat(k,273) + rxt(k,rid_e3)*y(k,vid_o3p)
         mat(k,559) = mat(k,559) + ( rxt(k,rid_e5b) + rxt(k,rid_e5c)  )
     $                *y(k,vid_bro)
         mat(k,273) = mat(k,273) + ( rxt(k,rid_e5b) + rxt(k,rid_e5c)  )
     $                *y(k,vid_clo)
         mat(k,273) = mat(k,273) + 2.000*rxt(k,rid_e6)*y(k,vid_bro)
         mat(k,390) = mat(k,390) + rxt(k,rid_e7)*y(k,vid_br)
         mat(k,292) = mat(k,292) + rxt(k,rid_e7)*y(k,vid_ho2)
         mat(k,390) = mat(k,390) + rxt(k,rid_e15)*y(k,vid_bro)
         mat(k,273) = mat(k,273) + rxt(k,rid_e15)*y(k,vid_ho2)
         mat(k,465) = mat(k,465) + 2.000*rxt(k,rid_hk1)*y(k,vid_o3p)
         mat(k,516) = mat(k,516) + 2.000*rxt(k,rid_hk3)*y(k,vid_o3p)
         mat(k,465) = mat(k,465) + 2.000*rxt(k,rid_hk3)*y(k,vid_o3)
         mat(k,516) = mat(k,516) + ( 2.000*rxt(k,rid_hk7a)
     $                + rxt(k,rid_hk7b)  )*y(k,vid_o1d)
         mat(k,365) = mat(k,365) + ( 2.000*rxt(k,rid_hk7a)
     $                + rxt(k,rid_hk7b)  )*y(k,vid_o3)
         mat(k,246) = mat(k,246) + 2.000*rxt(k,rid_hk8)
     $                *y(k,vid_o2dg)
         mat(k,54) = mat(k,54) + 2.000*rxt(k,rid_hk8)*y(k,vid_o2)
         mat(k,465) = mat(k,465) + rxt(k,rid_hk10)*y(k,vid_o2dg)
         mat(k,54) = mat(k,54) + rxt(k,rid_hk10)*y(k,vid_o3p)

         mat(k,53) = -( rxt(k,rid_hk8)*y(k,vid_o2) + rxt(k,rid_hk10)
     $                *y(k,vid_o3p) )
         mat(k,243) = - rxt(k,rid_hk8)*y(k,vid_o2dg)
         mat(k,453) = - rxt(k,rid_hk10)*y(k,vid_o2dg)

         mat(k,81) = mat(k,81) + rxt(k,rid_hk13)*y(k,vid_o2s)
         mat(k,55) = mat(k,55) + rxt(k,rid_hk13)*y(k,vid_co2)
         mat(k,514) = mat(k,514) + rxt(k,rid_hk14)*y(k,vid_o2s)
         mat(k,55) = mat(k,55) + rxt(k,rid_hk14)*y(k,vid_o3)
         mat(k,453) = mat(k,453) + rxt(k,rid_hk15)*y(k,vid_o2s)
         mat(k,55) = mat(k,55) + rxt(k,rid_hk15)*y(k,vid_o3p)
         mat(k,243) = mat(k,243) + rxt(k,rid_hk16)*y(k,vid_o2s)
         mat(k,55) = mat(k,55) + rxt(k,rid_hk16)*y(k,vid_o2)

         mat(k,56) = -( rxt(k,rid_hk13)*y(k,vid_co2) + rxt(k,rid_hk14)
     $                *y(k,vid_o3) + rxt(k,rid_hk15)*y(k,vid_o3p)
     $                + rxt(k,rid_hk16)*y(k,vid_o2) )
         mat(k,82) = - rxt(k,rid_hk13)*y(k,vid_o2s)
         mat(k,515) = - rxt(k,rid_hk14)*y(k,vid_o2s)
         mat(k,454) = - rxt(k,rid_hk15)*y(k,vid_o2s)
         mat(k,244) = - rxt(k,rid_hk16)*y(k,vid_o2s)

         mat(k,353) = mat(k,353) + rxt(k,rid_hk5b)*y(k,vid_o2)
         mat(k,244) = mat(k,244) + rxt(k,rid_hk5b)*y(k,vid_o1d)




         end if
      end do

      end subroutine NLNMAT

      subroutine LU_FAC( lu, kl, ku, converged )

      implicit none

!-----------------------------------------------------------------------
!       ... Dummy arguments
!-----------------------------------------------------------------------
      integer, intent(in) ::   kl, ku
      real, intent(inout) ::   lu(4,573)
      logical, intent(in) ::   converged(4)

!-----------------------------------------------------------------------
!       ... Local variables
!-----------------------------------------------------------------------
      integer :: k

      do k = kl,ku
         if( .not. converged(k) ) then
         lu(k,1) = 1. / lu(k,1)

         lu(k,2) = 1. / lu(k,2)

         lu(k,3) = 1. / lu(k,3)
         lu(k,4) = lu(k,4) * lu(k,3)
         lu(k,5) = lu(k,5) * lu(k,3)
         lu(k,368) = lu(k,368) - lu(k,4) * lu(k,344)
         lu(k,371) = lu(k,371) - lu(k,5) * lu(k,344)

         lu(k,7) = 1. / lu(k,7)
         lu(k,8) = lu(k,8) * lu(k,7)
         lu(k,9) = lu(k,9) * lu(k,7)
         lu(k,368) = lu(k,368) - lu(k,8) * lu(k,345)
         lu(k,371) = lu(k,371) - lu(k,9) * lu(k,345)

         lu(k,11) = 1. / lu(k,11)
         lu(k,12) = lu(k,12) * lu(k,11)
         lu(k,13) = lu(k,13) * lu(k,11)
         lu(k,368) = lu(k,368) - lu(k,12) * lu(k,346)
         lu(k,371) = lu(k,371) - lu(k,13) * lu(k,346)

         lu(k,15) = 1. / lu(k,15)
         lu(k,16) = lu(k,16) * lu(k,15)
         lu(k,17) = lu(k,17) * lu(k,15)
         lu(k,368) = lu(k,368) - lu(k,16) * lu(k,347)
         lu(k,371) = lu(k,371) - lu(k,17) * lu(k,347)

         lu(k,19) = 1. / lu(k,19)
         lu(k,20) = lu(k,20) * lu(k,19)
         lu(k,21) = lu(k,21) * lu(k,19)
         lu(k,368) = lu(k,368) - lu(k,20) * lu(k,348)
         lu(k,371) = lu(k,371) - lu(k,21) * lu(k,348)

         lu(k,23) = 1. / lu(k,23)
         lu(k,24) = lu(k,24) * lu(k,23)
         lu(k,25) = lu(k,25) * lu(k,23)
         lu(k,368) = lu(k,368) - lu(k,24) * lu(k,349)
         lu(k,371) = lu(k,371) - lu(k,25) * lu(k,349)

         lu(k,27) = 1. / lu(k,27)
         lu(k,28) = lu(k,28) * lu(k,27)
         lu(k,29) = lu(k,29) * lu(k,27)
         lu(k,366) = lu(k,366) - lu(k,28) * lu(k,350)
         lu(k,368) = lu(k,368) - lu(k,29) * lu(k,350)

         lu(k,30) = 1. / lu(k,30)
         lu(k,31) = lu(k,31) * lu(k,30)
         lu(k,32) = lu(k,32) * lu(k,30)
         lu(k,33) = lu(k,33) * lu(k,30)
         lu(k,322) = lu(k,322) - lu(k,31) * lu(k,307)
         lu(k,332) = lu(k,332) - lu(k,32) * lu(k,307)
         lu(k,336) = lu(k,336) - lu(k,33) * lu(k,307)

         lu(k,35) = 1. / lu(k,35)
         lu(k,36) = lu(k,36) * lu(k,35)
         lu(k,37) = lu(k,37) * lu(k,35)
         lu(k,38) = lu(k,38) * lu(k,35)
         lu(k,366) = lu(k,366) - lu(k,36) * lu(k,351)
         lu(k,368) = lu(k,368) - lu(k,37) * lu(k,351)
         lu(k,371) = lu(k,371) - lu(k,38) * lu(k,351)

         lu(k,39) = 1. / lu(k,39)
         lu(k,40) = lu(k,40) * lu(k,39)
         lu(k,41) = lu(k,41) * lu(k,39)
         lu(k,42) = lu(k,42) * lu(k,39)
         lu(k,365) = lu(k,365) - lu(k,40) * lu(k,352)
         lu(k,368) = lu(k,368) - lu(k,41) * lu(k,352)
         lu(k,370) = lu(k,370) - lu(k,42) * lu(k,352)

         lu(k,43) = 1. / lu(k,43)
         lu(k,44) = lu(k,44) * lu(k,43)
         lu(k,45) = lu(k,45) * lu(k,43)
         lu(k,46) = lu(k,46) * lu(k,43)
         lu(k,322) = lu(k,322) - lu(k,44) * lu(k,308)
         lu(k,331) = lu(k,331) - lu(k,45) * lu(k,308)
         lu(k,332) = lu(k,332) - lu(k,46) * lu(k,308)

         lu(k,47) = 1. / lu(k,47)
         lu(k,48) = lu(k,48) * lu(k,47)
         lu(k,49) = lu(k,49) * lu(k,47)
         lu(k,276) = lu(k,276) - lu(k,48) * lu(k,270)
         lu(k,277) = lu(k,277) - lu(k,49) * lu(k,270)
         lu(k,393) = lu(k,393) - lu(k,48) * lu(k,378)
         lu(k,394) = lu(k,394) - lu(k,49) * lu(k,378)

         lu(k,50) = 1. / lu(k,50)
         lu(k,51) = lu(k,51) * lu(k,50)
         lu(k,52) = lu(k,52) * lu(k,50)
         lu(k,276) = lu(k,276) - lu(k,51) * lu(k,271)
         lu(k,281) = lu(k,281) - lu(k,52) * lu(k,271)
         lu(k,562) = lu(k,562) - lu(k,51) * lu(k,553)
         lu(k,567) = lu(k,567) - lu(k,52) * lu(k,553)

         lu(k,53) = 1. / lu(k,53)
         lu(k,54) = lu(k,54) * lu(k,53)
         lu(k,57) = lu(k,57) - lu(k,54) * lu(k,55)
         lu(k,85) = - lu(k,54) * lu(k,81)
         lu(k,246) = lu(k,246) - lu(k,54) * lu(k,243)
         lu(k,465) = lu(k,465) - lu(k,54) * lu(k,453)
         lu(k,516) = lu(k,516) - lu(k,54) * lu(k,514)

         lu(k,56) = 1. / lu(k,56)
         lu(k,57) = lu(k,57) * lu(k,56)
         lu(k,85) = lu(k,85) - lu(k,57) * lu(k,82)
         lu(k,246) = lu(k,246) - lu(k,57) * lu(k,244)
         lu(k,365) = lu(k,365) - lu(k,57) * lu(k,353)
         lu(k,465) = lu(k,465) - lu(k,57) * lu(k,454)
         lu(k,516) = lu(k,516) - lu(k,57) * lu(k,515)

         lu(k,58) = 1. / lu(k,58)
         lu(k,59) = lu(k,59) * lu(k,58)
         lu(k,60) = lu(k,60) * lu(k,58)
         lu(k,61) = lu(k,61) * lu(k,58)
         lu(k,246) = lu(k,246) - lu(k,59) * lu(k,245)
         lu(k,249) = lu(k,249) - lu(k,60) * lu(k,245)
         lu(k,250) = lu(k,250) - lu(k,61) * lu(k,245)
         lu(k,409) = lu(k,409) - lu(k,59) * lu(k,405)
         lu(k,416) = lu(k,416) - lu(k,60) * lu(k,405)
         lu(k,418) = lu(k,418) - lu(k,61) * lu(k,405)

         lu(k,62) = 1. / lu(k,62)
         lu(k,63) = lu(k,63) * lu(k,62)
         lu(k,64) = lu(k,64) * lu(k,62)
         lu(k,106) = - lu(k,63) * lu(k,102)
         lu(k,108) = lu(k,108) - lu(k,64) * lu(k,102)
         lu(k,219) = lu(k,219) - lu(k,63) * lu(k,209)
         lu(k,223) = - lu(k,64) * lu(k,209)
         lu(k,446) = lu(k,446) - lu(k,63) * lu(k,424)
         lu(k,451) = lu(k,451) - lu(k,64) * lu(k,424)
         lu(k,546) = lu(k,546) - lu(k,63) * lu(k,530)
         lu(k,551) = lu(k,551) - lu(k,64) * lu(k,530)

         lu(k,65) = 1. / lu(k,65)
         lu(k,66) = lu(k,66) * lu(k,65)
         lu(k,67) = lu(k,67) * lu(k,65)
         lu(k,68) = lu(k,68) * lu(k,65)
         lu(k,69) = lu(k,69) * lu(k,65)
         lu(k,430) = lu(k,430) - lu(k,66) * lu(k,425)
         lu(k,438) = lu(k,438) - lu(k,67) * lu(k,425)
         lu(k,446) = lu(k,446) - lu(k,68) * lu(k,425)
         lu(k,452) = lu(k,452) - lu(k,69) * lu(k,425)
         lu(k,555) = lu(k,555) - lu(k,66) * lu(k,554)
         lu(k,559) = lu(k,559) - lu(k,67) * lu(k,554)
         lu(k,567) = lu(k,567) - lu(k,68) * lu(k,554)
         lu(k,573) = lu(k,573) - lu(k,69) * lu(k,554)

         lu(k,70) = 1. / lu(k,70)
         lu(k,71) = lu(k,71) * lu(k,70)
         lu(k,72) = lu(k,72) * lu(k,70)
         lu(k,73) = lu(k,73) * lu(k,70)
         lu(k,74) = lu(k,74) * lu(k,70)
         lu(k,275) = lu(k,275) - lu(k,71) * lu(k,272)
         lu(k,276) = lu(k,276) - lu(k,72) * lu(k,272)
         lu(k,284) = - lu(k,73) * lu(k,272)
         lu(k,286) = lu(k,286) - lu(k,74) * lu(k,272)
         lu(k,540) = lu(k,540) - lu(k,71) * lu(k,531)
         lu(k,541) = - lu(k,72) * lu(k,531)
         lu(k,549) = lu(k,549) - lu(k,73) * lu(k,531)
         lu(k,551) = lu(k,551) - lu(k,74) * lu(k,531)

         lu(k,76) = 1. / lu(k,76)
         lu(k,77) = lu(k,77) * lu(k,76)
         lu(k,78) = lu(k,78) * lu(k,76)
         lu(k,79) = lu(k,79) * lu(k,76)
         lu(k,80) = lu(k,80) * lu(k,76)
         lu(k,322) = lu(k,322) - lu(k,77) * lu(k,309)
         lu(k,332) = lu(k,332) - lu(k,78) * lu(k,309)
         lu(k,333) = - lu(k,79) * lu(k,309)
         lu(k,336) = lu(k,336) - lu(k,80) * lu(k,309)
         lu(k,360) = lu(k,360) - lu(k,77) * lu(k,354)
         lu(k,367) = lu(k,367) - lu(k,78) * lu(k,354)
         lu(k,368) = lu(k,368) - lu(k,79) * lu(k,354)
         lu(k,371) = lu(k,371) - lu(k,80) * lu(k,354)

         lu(k,83) = 1. / lu(k,83)
         lu(k,84) = lu(k,84) * lu(k,83)
         lu(k,85) = lu(k,85) * lu(k,83)
         lu(k,86) = lu(k,86) * lu(k,83)
         lu(k,135) = lu(k,135) - lu(k,84) * lu(k,134)
         lu(k,136) = - lu(k,85) * lu(k,134)
         lu(k,138) = - lu(k,86) * lu(k,134)
         lu(k,317) = lu(k,317) - lu(k,84) * lu(k,310)
         lu(k,328) = lu(k,328) - lu(k,85) * lu(k,310)
         lu(k,333) = lu(k,333) - lu(k,86) * lu(k,310)
         lu(k,457) = lu(k,457) - lu(k,84) * lu(k,455)
         lu(k,465) = lu(k,465) - lu(k,85) * lu(k,455)
         lu(k,470) = - lu(k,86) * lu(k,455)

         lu(k,87) = 1. / lu(k,87)
         lu(k,88) = lu(k,88) * lu(k,87)
         lu(k,89) = lu(k,89) * lu(k,87)
         lu(k,90) = lu(k,90) * lu(k,87)
         lu(k,91) = lu(k,91) * lu(k,87)
         lu(k,92) = lu(k,92) * lu(k,87)
         lu(k,93) = lu(k,93) * lu(k,87)
         lu(k,321) = lu(k,321) - lu(k,88) * lu(k,311)
         lu(k,322) = lu(k,322) - lu(k,89) * lu(k,311)
         lu(k,331) = lu(k,331) - lu(k,90) * lu(k,311)
         lu(k,332) = lu(k,332) - lu(k,91) * lu(k,311)
         lu(k,333) = lu(k,333) - lu(k,92) * lu(k,311)
         lu(k,334) = lu(k,334) - lu(k,93) * lu(k,311)
         lu(k,359) = lu(k,359) - lu(k,88) * lu(k,355)
         lu(k,360) = lu(k,360) - lu(k,89) * lu(k,355)
         lu(k,366) = lu(k,366) - lu(k,90) * lu(k,355)
         lu(k,367) = lu(k,367) - lu(k,91) * lu(k,355)
         lu(k,368) = lu(k,368) - lu(k,92) * lu(k,355)
         lu(k,369) = lu(k,369) - lu(k,93) * lu(k,355)

         lu(k,94) = 1. / lu(k,94)
         lu(k,95) = lu(k,95) * lu(k,94)
         lu(k,96) = lu(k,96) * lu(k,94)
         lu(k,97) = lu(k,97) * lu(k,94)
         lu(k,98) = lu(k,98) * lu(k,94)
         lu(k,99) = lu(k,99) * lu(k,94)
         lu(k,100) = lu(k,100) * lu(k,94)
         lu(k,101) = lu(k,101) * lu(k,94)
         lu(k,317) = lu(k,317) - lu(k,95) * lu(k,312)
         lu(k,321) = lu(k,321) - lu(k,96) * lu(k,312)
         lu(k,322) = lu(k,322) - lu(k,97) * lu(k,312)
         lu(k,326) = lu(k,326) - lu(k,98) * lu(k,312)
         lu(k,332) = lu(k,332) - lu(k,99) * lu(k,312)
         lu(k,334) = lu(k,334) - lu(k,100) * lu(k,312)
         lu(k,336) = lu(k,336) - lu(k,101) * lu(k,312)
         lu(k,428) = lu(k,428) - lu(k,95) * lu(k,426)
         lu(k,431) = lu(k,431) - lu(k,96) * lu(k,426)
         lu(k,432) = - lu(k,97) * lu(k,426)
         lu(k,436) = lu(k,436) - lu(k,98) * lu(k,426)
         lu(k,442) = lu(k,442) - lu(k,99) * lu(k,426)
         lu(k,444) = lu(k,444) - lu(k,100) * lu(k,426)
         lu(k,446) = lu(k,446) - lu(k,101) * lu(k,426)

         lu(k,103) = 1. / lu(k,103)
         lu(k,104) = lu(k,104) * lu(k,103)
         lu(k,105) = lu(k,105) * lu(k,103)
         lu(k,106) = lu(k,106) * lu(k,103)
         lu(k,107) = lu(k,107) * lu(k,103)
         lu(k,108) = lu(k,108) * lu(k,103)
         lu(k,211) = lu(k,211) - lu(k,104) * lu(k,210)
         lu(k,216) = lu(k,216) - lu(k,105) * lu(k,210)
         lu(k,219) = lu(k,219) - lu(k,106) * lu(k,210)
         lu(k,222) = - lu(k,107) * lu(k,210)
         lu(k,223) = lu(k,223) - lu(k,108) * lu(k,210)
         lu(k,496) = lu(k,496) - lu(k,104) * lu(k,495)
         lu(k,499) = - lu(k,105) * lu(k,495)
         lu(k,507) = lu(k,507) - lu(k,106) * lu(k,495)
         lu(k,510) = lu(k,510) - lu(k,107) * lu(k,495)
         lu(k,512) = lu(k,512) - lu(k,108) * lu(k,495)
         lu(k,534) = lu(k,534) - lu(k,104) * lu(k,532)
         lu(k,538) = - lu(k,105) * lu(k,532)
         lu(k,546) = lu(k,546) - lu(k,106) * lu(k,532)
         lu(k,549) = lu(k,549) - lu(k,107) * lu(k,532)
         lu(k,551) = lu(k,551) - lu(k,108) * lu(k,532)

         lu(k,109) = 1. / lu(k,109)
         lu(k,110) = lu(k,110) * lu(k,109)
         lu(k,111) = lu(k,111) * lu(k,109)
         lu(k,112) = lu(k,112) * lu(k,109)
         lu(k,113) = lu(k,113) * lu(k,109)
         lu(k,114) = lu(k,114) * lu(k,109)
         lu(k,165) = lu(k,165) - lu(k,110) * lu(k,164)
         lu(k,166) = - lu(k,111) * lu(k,164)
         lu(k,167) = lu(k,167) - lu(k,112) * lu(k,164)
         lu(k,169) = - lu(k,113) * lu(k,164)
         lu(k,170) = lu(k,170) - lu(k,114) * lu(k,164)
         lu(k,321) = lu(k,321) - lu(k,110) * lu(k,313)
         lu(k,322) = lu(k,322) - lu(k,111) * lu(k,313)
         lu(k,327) = lu(k,327) - lu(k,112) * lu(k,313)
         lu(k,332) = lu(k,332) - lu(k,113) * lu(k,313)
         lu(k,334) = lu(k,334) - lu(k,114) * lu(k,313)
         lu(k,384) = lu(k,384) - lu(k,110) * lu(k,379)
         lu(k,385) = lu(k,385) - lu(k,111) * lu(k,379)
         lu(k,389) = - lu(k,112) * lu(k,379)
         lu(k,394) = lu(k,394) - lu(k,113) * lu(k,379)
         lu(k,396) = lu(k,396) - lu(k,114) * lu(k,379)

         lu(k,115) = 1. / lu(k,115)
         lu(k,116) = lu(k,116) * lu(k,115)
         lu(k,117) = lu(k,117) * lu(k,115)
         lu(k,118) = lu(k,118) * lu(k,115)
         lu(k,119) = lu(k,119) * lu(k,115)
         lu(k,120) = lu(k,120) * lu(k,115)
         lu(k,121) = lu(k,121) * lu(k,115)
         lu(k,322) = lu(k,322) - lu(k,116) * lu(k,314)
         lu(k,328) = lu(k,328) - lu(k,117) * lu(k,314)
         lu(k,332) = lu(k,332) - lu(k,118) * lu(k,314)
         lu(k,334) = lu(k,334) - lu(k,119) * lu(k,314)
         lu(k,339) = lu(k,339) - lu(k,120) * lu(k,314)
         lu(k,341) = lu(k,341) - lu(k,121) * lu(k,314)
         lu(k,385) = lu(k,385) - lu(k,116) * lu(k,380)
         lu(k,390) = lu(k,390) - lu(k,117) * lu(k,380)
         lu(k,394) = lu(k,394) - lu(k,118) * lu(k,380)
         lu(k,396) = lu(k,396) - lu(k,119) * lu(k,380)
         lu(k,401) = lu(k,401) - lu(k,120) * lu(k,380)
         lu(k,403) = lu(k,403) - lu(k,121) * lu(k,380)
         lu(k,535) = - lu(k,116) * lu(k,533)
         lu(k,539) = lu(k,539) - lu(k,117) * lu(k,533)
         lu(k,542) = lu(k,542) - lu(k,118) * lu(k,533)
         lu(k,544) = lu(k,544) - lu(k,119) * lu(k,533)
         lu(k,549) = lu(k,549) - lu(k,120) * lu(k,533)
         lu(k,551) = lu(k,551) - lu(k,121) * lu(k,533)

         lu(k,122) = 1. / lu(k,122)
         lu(k,123) = lu(k,123) * lu(k,122)
         lu(k,124) = lu(k,124) * lu(k,122)
         lu(k,125) = lu(k,125) * lu(k,122)
         lu(k,126) = lu(k,126) * lu(k,122)
         lu(k,127) = lu(k,127) * lu(k,122)
         lu(k,128) = lu(k,128) * lu(k,122)
         lu(k,322) = lu(k,322) - lu(k,123) * lu(k,315)
         lu(k,326) = lu(k,326) - lu(k,124) * lu(k,315)
         lu(k,332) = lu(k,332) - lu(k,125) * lu(k,315)
         lu(k,334) = lu(k,334) - lu(k,126) * lu(k,315)
         lu(k,336) = lu(k,336) - lu(k,127) * lu(k,315)
         lu(k,337) = lu(k,337) - lu(k,128) * lu(k,315)
         lu(k,385) = lu(k,385) - lu(k,123) * lu(k,381)
         lu(k,388) = lu(k,388) - lu(k,124) * lu(k,381)
         lu(k,394) = lu(k,394) - lu(k,125) * lu(k,381)
         lu(k,396) = lu(k,396) - lu(k,126) * lu(k,381)
         lu(k,398) = lu(k,398) - lu(k,127) * lu(k,381)
         lu(k,399) = lu(k,399) - lu(k,128) * lu(k,381)
         lu(k,432) = lu(k,432) - lu(k,123) * lu(k,427)
         lu(k,436) = lu(k,436) - lu(k,124) * lu(k,427)
         lu(k,442) = lu(k,442) - lu(k,125) * lu(k,427)
         lu(k,444) = lu(k,444) - lu(k,126) * lu(k,427)
         lu(k,446) = lu(k,446) - lu(k,127) * lu(k,427)
         lu(k,447) = - lu(k,128) * lu(k,427)
         lu(k,459) = - lu(k,123) * lu(k,456)
         lu(k,463) = lu(k,463) - lu(k,124) * lu(k,456)
         lu(k,469) = lu(k,469) - lu(k,125) * lu(k,456)
         lu(k,471) = lu(k,471) - lu(k,126) * lu(k,456)
         lu(k,473) = lu(k,473) - lu(k,127) * lu(k,456)
         lu(k,474) = lu(k,474) - lu(k,128) * lu(k,456)

         lu(k,129) = 1. / lu(k,129)
         lu(k,130) = lu(k,130) * lu(k,129)
         lu(k,131) = lu(k,131) * lu(k,129)
         lu(k,132) = lu(k,132) * lu(k,129)
         lu(k,133) = lu(k,133) * lu(k,129)
         lu(k,187) = - lu(k,130) * lu(k,185)
         lu(k,191) = lu(k,191) - lu(k,131) * lu(k,185)
         lu(k,196) = lu(k,196) - lu(k,132) * lu(k,185)
         lu(k,197) = lu(k,197) - lu(k,133) * lu(k,185)
         lu(k,213) = lu(k,213) - lu(k,130) * lu(k,211)
         lu(k,217) = lu(k,217) - lu(k,131) * lu(k,211)
         lu(k,222) = lu(k,222) - lu(k,132) * lu(k,211)
         lu(k,223) = lu(k,223) - lu(k,133) * lu(k,211)
         lu(k,228) = lu(k,228) - lu(k,130) * lu(k,225)
         lu(k,234) = lu(k,234) - lu(k,131) * lu(k,225)
         lu(k,240) = lu(k,240) - lu(k,132) * lu(k,225)
         lu(k,241) = - lu(k,133) * lu(k,225)
         lu(k,322) = lu(k,322) - lu(k,130) * lu(k,316)
         lu(k,332) = lu(k,332) - lu(k,131) * lu(k,316)
         lu(k,339) = lu(k,339) - lu(k,132) * lu(k,316)
         lu(k,341) = lu(k,341) - lu(k,133) * lu(k,316)
         lu(k,385) = lu(k,385) - lu(k,130) * lu(k,382)
         lu(k,394) = lu(k,394) - lu(k,131) * lu(k,382)
         lu(k,401) = lu(k,401) - lu(k,132) * lu(k,382)
         lu(k,403) = lu(k,403) - lu(k,133) * lu(k,382)
         lu(k,498) = - lu(k,130) * lu(k,496)
         lu(k,503) = lu(k,503) - lu(k,131) * lu(k,496)
         lu(k,510) = lu(k,510) - lu(k,132) * lu(k,496)
         lu(k,512) = lu(k,512) - lu(k,133) * lu(k,496)
         lu(k,535) = lu(k,535) - lu(k,130) * lu(k,534)
         lu(k,542) = lu(k,542) - lu(k,131) * lu(k,534)
         lu(k,549) = lu(k,549) - lu(k,132) * lu(k,534)
         lu(k,551) = lu(k,551) - lu(k,133) * lu(k,534)

         lu(k,135) = 1. / lu(k,135)
         lu(k,136) = lu(k,136) * lu(k,135)
         lu(k,137) = lu(k,137) * lu(k,135)
         lu(k,138) = lu(k,138) * lu(k,135)
         lu(k,139) = lu(k,139) * lu(k,135)
         lu(k,140) = lu(k,140) * lu(k,135)
         lu(k,232) = - lu(k,136) * lu(k,226)
         lu(k,234) = lu(k,234) - lu(k,137) * lu(k,226)
         lu(k,235) = - lu(k,138) * lu(k,226)
         lu(k,238) = lu(k,238) - lu(k,139) * lu(k,226)
         lu(k,239) = lu(k,239) - lu(k,140) * lu(k,226)
         lu(k,292) = lu(k,292) - lu(k,136) * lu(k,288)
         lu(k,296) = - lu(k,137) * lu(k,288)
         lu(k,297) = - lu(k,138) * lu(k,288)
         lu(k,301) = - lu(k,139) * lu(k,288)
         lu(k,302) = - lu(k,140) * lu(k,288)
         lu(k,328) = lu(k,328) - lu(k,136) * lu(k,317)
         lu(k,332) = lu(k,332) - lu(k,137) * lu(k,317)
         lu(k,333) = lu(k,333) - lu(k,138) * lu(k,317)
         lu(k,337) = lu(k,337) - lu(k,139) * lu(k,317)
         lu(k,338) = lu(k,338) - lu(k,140) * lu(k,317)
         lu(k,438) = lu(k,438) - lu(k,136) * lu(k,428)
         lu(k,442) = lu(k,442) - lu(k,137) * lu(k,428)
         lu(k,443) = - lu(k,138) * lu(k,428)
         lu(k,447) = lu(k,447) - lu(k,139) * lu(k,428)
         lu(k,448) = lu(k,448) - lu(k,140) * lu(k,428)
         lu(k,465) = lu(k,465) - lu(k,136) * lu(k,457)
         lu(k,469) = lu(k,469) - lu(k,137) * lu(k,457)
         lu(k,470) = lu(k,470) - lu(k,138) * lu(k,457)
         lu(k,474) = lu(k,474) - lu(k,139) * lu(k,457)
         lu(k,475) = lu(k,475) - lu(k,140) * lu(k,457)
         lu(k,501) = lu(k,501) - lu(k,136) * lu(k,497)
         lu(k,503) = lu(k,503) - lu(k,137) * lu(k,497)
         lu(k,504) = - lu(k,138) * lu(k,497)
         lu(k,508) = lu(k,508) - lu(k,139) * lu(k,497)
         lu(k,509) = - lu(k,140) * lu(k,497)

         lu(k,141) = 1. / lu(k,141)
         lu(k,142) = lu(k,142) * lu(k,141)
         lu(k,143) = lu(k,143) * lu(k,141)
         lu(k,144) = lu(k,144) * lu(k,141)
         lu(k,145) = lu(k,145) * lu(k,141)
         lu(k,146) = lu(k,146) * lu(k,141)
         lu(k,228) = lu(k,228) - lu(k,142) * lu(k,227)
         lu(k,233) = lu(k,233) - lu(k,143) * lu(k,227)
         lu(k,234) = lu(k,234) - lu(k,144) * lu(k,227)
         lu(k,235) = lu(k,235) - lu(k,145) * lu(k,227)
         lu(k,238) = lu(k,238) - lu(k,146) * lu(k,227)
         lu(k,290) = - lu(k,142) * lu(k,289)
         lu(k,295) = lu(k,295) - lu(k,143) * lu(k,289)
         lu(k,296) = lu(k,296) - lu(k,144) * lu(k,289)
         lu(k,297) = lu(k,297) - lu(k,145) * lu(k,289)
         lu(k,301) = lu(k,301) - lu(k,146) * lu(k,289)
         lu(k,322) = lu(k,322) - lu(k,142) * lu(k,318)
         lu(k,331) = lu(k,331) - lu(k,143) * lu(k,318)
         lu(k,332) = lu(k,332) - lu(k,144) * lu(k,318)
         lu(k,333) = lu(k,333) - lu(k,145) * lu(k,318)
         lu(k,337) = lu(k,337) - lu(k,146) * lu(k,318)
         lu(k,360) = lu(k,360) - lu(k,142) * lu(k,356)
         lu(k,366) = lu(k,366) - lu(k,143) * lu(k,356)
         lu(k,367) = lu(k,367) - lu(k,144) * lu(k,356)
         lu(k,368) = lu(k,368) - lu(k,145) * lu(k,356)
         lu(k,372) = lu(k,372) - lu(k,146) * lu(k,356)
         lu(k,385) = lu(k,385) - lu(k,142) * lu(k,383)
         lu(k,393) = lu(k,393) - lu(k,143) * lu(k,383)
         lu(k,394) = lu(k,394) - lu(k,144) * lu(k,383)
         lu(k,395) = - lu(k,145) * lu(k,383)
         lu(k,399) = lu(k,399) - lu(k,146) * lu(k,383)
         lu(k,459) = lu(k,459) - lu(k,142) * lu(k,458)
         lu(k,468) = lu(k,468) - lu(k,143) * lu(k,458)
         lu(k,469) = lu(k,469) - lu(k,144) * lu(k,458)
         lu(k,470) = lu(k,470) - lu(k,145) * lu(k,458)
         lu(k,474) = lu(k,474) - lu(k,146) * lu(k,458)

         lu(k,147) = 1. / lu(k,147)
         lu(k,148) = lu(k,148) * lu(k,147)
         lu(k,149) = lu(k,149) * lu(k,147)
         lu(k,150) = lu(k,150) * lu(k,147)
         lu(k,151) = lu(k,151) * lu(k,147)
         lu(k,152) = lu(k,152) * lu(k,147)
         lu(k,153) = lu(k,153) * lu(k,147)
         lu(k,154) = lu(k,154) * lu(k,147)
         lu(k,155) = lu(k,155) * lu(k,147)
         lu(k,156) = lu(k,156) * lu(k,147)
         lu(k,157) = lu(k,157) * lu(k,147)
         lu(k,321) = lu(k,321) - lu(k,148) * lu(k,319)
         lu(k,322) = lu(k,322) - lu(k,149) * lu(k,319)
         lu(k,323) = lu(k,323) - lu(k,150) * lu(k,319)
         lu(k,326) = lu(k,326) - lu(k,151) * lu(k,319)
         lu(k,327) = lu(k,327) - lu(k,152) * lu(k,319)
         lu(k,332) = lu(k,332) - lu(k,153) * lu(k,319)
         lu(k,333) = lu(k,333) - lu(k,154) * lu(k,319)
         lu(k,334) = lu(k,334) - lu(k,155) * lu(k,319)
         lu(k,336) = lu(k,336) - lu(k,156) * lu(k,319)
         lu(k,338) = lu(k,338) - lu(k,157) * lu(k,319)
         lu(k,359) = lu(k,359) - lu(k,148) * lu(k,357)
         lu(k,360) = lu(k,360) - lu(k,149) * lu(k,357)
         lu(k,361) = lu(k,361) - lu(k,150) * lu(k,357)
         lu(k,363) = lu(k,363) - lu(k,151) * lu(k,357)
         lu(k,364) = lu(k,364) - lu(k,152) * lu(k,357)
         lu(k,367) = lu(k,367) - lu(k,153) * lu(k,357)
         lu(k,368) = lu(k,368) - lu(k,154) * lu(k,357)
         lu(k,369) = lu(k,369) - lu(k,155) * lu(k,357)
         lu(k,371) = lu(k,371) - lu(k,156) * lu(k,357)
         lu(k,373) = lu(k,373) - lu(k,157) * lu(k,357)
         lu(k,431) = lu(k,431) - lu(k,148) * lu(k,429)
         lu(k,432) = lu(k,432) - lu(k,149) * lu(k,429)
         lu(k,433) = lu(k,433) - lu(k,150) * lu(k,429)
         lu(k,436) = lu(k,436) - lu(k,151) * lu(k,429)
         lu(k,437) = lu(k,437) - lu(k,152) * lu(k,429)
         lu(k,442) = lu(k,442) - lu(k,153) * lu(k,429)
         lu(k,443) = lu(k,443) - lu(k,154) * lu(k,429)
         lu(k,444) = lu(k,444) - lu(k,155) * lu(k,429)
         lu(k,446) = lu(k,446) - lu(k,156) * lu(k,429)
         lu(k,448) = lu(k,448) - lu(k,157) * lu(k,429)

         lu(k,158) = 1. / lu(k,158)
         lu(k,159) = lu(k,159) * lu(k,158)
         lu(k,160) = lu(k,160) * lu(k,158)
         lu(k,161) = lu(k,161) * lu(k,158)
         lu(k,162) = lu(k,162) * lu(k,158)
         lu(k,163) = lu(k,163) * lu(k,158)
         lu(k,189) = lu(k,189) - lu(k,159) * lu(k,186)
         lu(k,191) = lu(k,191) - lu(k,160) * lu(k,186)
         lu(k,192) = - lu(k,161) * lu(k,186)
         lu(k,193) = lu(k,193) - lu(k,162) * lu(k,186)
         lu(k,198) = lu(k,198) - lu(k,163) * lu(k,186)
         lu(k,201) = lu(k,201) - lu(k,159) * lu(k,199)
         lu(k,203) = lu(k,203) - lu(k,160) * lu(k,199)
         lu(k,204) = - lu(k,161) * lu(k,199)
         lu(k,205) = lu(k,205) - lu(k,162) * lu(k,199)
         lu(k,208) = lu(k,208) - lu(k,163) * lu(k,199)
         lu(k,215) = lu(k,215) - lu(k,159) * lu(k,212)
         lu(k,217) = lu(k,217) - lu(k,160) * lu(k,212)
         lu(k,218) = lu(k,218) - lu(k,161) * lu(k,212)
         lu(k,219) = lu(k,219) - lu(k,162) * lu(k,212)
         lu(k,224) = - lu(k,163) * lu(k,212)
         lu(k,325) = lu(k,325) - lu(k,159) * lu(k,320)
         lu(k,332) = lu(k,332) - lu(k,160) * lu(k,320)
         lu(k,333) = lu(k,333) - lu(k,161) * lu(k,320)
         lu(k,336) = lu(k,336) - lu(k,162) * lu(k,320)
         lu(k,342) = lu(k,342) - lu(k,163) * lu(k,320)
         lu(k,362) = - lu(k,159) * lu(k,358)
         lu(k,367) = lu(k,367) - lu(k,160) * lu(k,358)
         lu(k,368) = lu(k,368) - lu(k,161) * lu(k,358)
         lu(k,371) = lu(k,371) - lu(k,162) * lu(k,358)
         lu(k,377) = lu(k,377) - lu(k,163) * lu(k,358)
         lu(k,435) = lu(k,435) - lu(k,159) * lu(k,430)
         lu(k,442) = lu(k,442) - lu(k,160) * lu(k,430)
         lu(k,443) = lu(k,443) - lu(k,161) * lu(k,430)
         lu(k,446) = lu(k,446) - lu(k,162) * lu(k,430)
         lu(k,452) = lu(k,452) - lu(k,163) * lu(k,430)
         lu(k,557) = lu(k,557) - lu(k,159) * lu(k,555)
         lu(k,563) = lu(k,563) - lu(k,160) * lu(k,555)
         lu(k,564) = - lu(k,161) * lu(k,555)
         lu(k,567) = lu(k,567) - lu(k,162) * lu(k,555)
         lu(k,573) = lu(k,573) - lu(k,163) * lu(k,555)

         lu(k,165) = 1. / lu(k,165)
         lu(k,166) = lu(k,166) * lu(k,165)
         lu(k,167) = lu(k,167) * lu(k,165)
         lu(k,168) = lu(k,168) * lu(k,165)
         lu(k,169) = lu(k,169) * lu(k,165)
         lu(k,170) = lu(k,170) * lu(k,165)
         lu(k,171) = lu(k,171) * lu(k,165)
         lu(k,172) = lu(k,172) * lu(k,165)
         lu(k,322) = lu(k,322) - lu(k,166) * lu(k,321)
         lu(k,327) = lu(k,327) - lu(k,167) * lu(k,321)
         lu(k,328) = lu(k,328) - lu(k,168) * lu(k,321)
         lu(k,332) = lu(k,332) - lu(k,169) * lu(k,321)
         lu(k,334) = lu(k,334) - lu(k,170) * lu(k,321)
         lu(k,335) = - lu(k,171) * lu(k,321)
         lu(k,341) = lu(k,341) - lu(k,172) * lu(k,321)
         lu(k,360) = lu(k,360) - lu(k,166) * lu(k,359)
         lu(k,364) = lu(k,364) - lu(k,167) * lu(k,359)
         lu(k,365) = lu(k,365) - lu(k,168) * lu(k,359)
         lu(k,367) = lu(k,367) - lu(k,169) * lu(k,359)
         lu(k,369) = lu(k,369) - lu(k,170) * lu(k,359)
         lu(k,370) = lu(k,370) - lu(k,171) * lu(k,359)
         lu(k,376) = - lu(k,172) * lu(k,359)
         lu(k,385) = lu(k,385) - lu(k,166) * lu(k,384)
         lu(k,389) = lu(k,389) - lu(k,167) * lu(k,384)
         lu(k,390) = lu(k,390) - lu(k,168) * lu(k,384)
         lu(k,394) = lu(k,394) - lu(k,169) * lu(k,384)
         lu(k,396) = lu(k,396) - lu(k,170) * lu(k,384)
         lu(k,397) = lu(k,397) - lu(k,171) * lu(k,384)
         lu(k,403) = lu(k,403) - lu(k,172) * lu(k,384)
         lu(k,407) = - lu(k,166) * lu(k,406)
         lu(k,408) = lu(k,408) - lu(k,167) * lu(k,406)
         lu(k,409) = lu(k,409) - lu(k,168) * lu(k,406)
         lu(k,413) = lu(k,413) - lu(k,169) * lu(k,406)
         lu(k,415) = lu(k,415) - lu(k,170) * lu(k,406)
         lu(k,416) = lu(k,416) - lu(k,171) * lu(k,406)
         lu(k,422) = lu(k,422) - lu(k,172) * lu(k,406)
         lu(k,432) = lu(k,432) - lu(k,166) * lu(k,431)
         lu(k,437) = lu(k,437) - lu(k,167) * lu(k,431)
         lu(k,438) = lu(k,438) - lu(k,168) * lu(k,431)
         lu(k,442) = lu(k,442) - lu(k,169) * lu(k,431)
         lu(k,444) = lu(k,444) - lu(k,170) * lu(k,431)
         lu(k,445) = - lu(k,171) * lu(k,431)
         lu(k,451) = lu(k,451) - lu(k,172) * lu(k,431)

         lu(k,173) = 1. / lu(k,173)
         lu(k,174) = lu(k,174) * lu(k,173)
         lu(k,175) = lu(k,175) * lu(k,173)
         lu(k,176) = lu(k,176) * lu(k,173)
         lu(k,180) = lu(k,180) - lu(k,174) * lu(k,177)
         lu(k,181) = lu(k,181) - lu(k,175) * lu(k,177)
         lu(k,184) = lu(k,184) - lu(k,176) * lu(k,177)
         lu(k,191) = lu(k,191) - lu(k,174) * lu(k,187)
         lu(k,192) = lu(k,192) - lu(k,175) * lu(k,187)
         lu(k,195) = - lu(k,176) * lu(k,187)
         lu(k,203) = lu(k,203) - lu(k,174) * lu(k,200)
         lu(k,204) = lu(k,204) - lu(k,175) * lu(k,200)
         lu(k,207) = - lu(k,176) * lu(k,200)
         lu(k,217) = lu(k,217) - lu(k,174) * lu(k,213)
         lu(k,218) = lu(k,218) - lu(k,175) * lu(k,213)
         lu(k,221) = lu(k,221) - lu(k,176) * lu(k,213)
         lu(k,234) = lu(k,234) - lu(k,174) * lu(k,228)
         lu(k,235) = lu(k,235) - lu(k,175) * lu(k,228)
         lu(k,239) = lu(k,239) - lu(k,176) * lu(k,228)
         lu(k,296) = lu(k,296) - lu(k,174) * lu(k,290)
         lu(k,297) = lu(k,297) - lu(k,175) * lu(k,290)
         lu(k,302) = lu(k,302) - lu(k,176) * lu(k,290)
         lu(k,332) = lu(k,332) - lu(k,174) * lu(k,322)
         lu(k,333) = lu(k,333) - lu(k,175) * lu(k,322)
         lu(k,338) = lu(k,338) - lu(k,176) * lu(k,322)
         lu(k,367) = lu(k,367) - lu(k,174) * lu(k,360)
         lu(k,368) = lu(k,368) - lu(k,175) * lu(k,360)
         lu(k,373) = lu(k,373) - lu(k,176) * lu(k,360)
         lu(k,394) = lu(k,394) - lu(k,174) * lu(k,385)
         lu(k,395) = lu(k,395) - lu(k,175) * lu(k,385)
         lu(k,400) = lu(k,400) - lu(k,176) * lu(k,385)
         lu(k,413) = lu(k,413) - lu(k,174) * lu(k,407)
         lu(k,414) = - lu(k,175) * lu(k,407)
         lu(k,419) = - lu(k,176) * lu(k,407)
         lu(k,442) = lu(k,442) - lu(k,174) * lu(k,432)
         lu(k,443) = lu(k,443) - lu(k,175) * lu(k,432)
         lu(k,448) = lu(k,448) - lu(k,176) * lu(k,432)
         lu(k,469) = lu(k,469) - lu(k,174) * lu(k,459)
         lu(k,470) = lu(k,470) - lu(k,175) * lu(k,459)
         lu(k,475) = lu(k,475) - lu(k,176) * lu(k,459)
         lu(k,484) = lu(k,484) - lu(k,174) * lu(k,480)
         lu(k,485) = - lu(k,175) * lu(k,480)
         lu(k,490) = lu(k,490) - lu(k,176) * lu(k,480)
         lu(k,503) = lu(k,503) - lu(k,174) * lu(k,498)
         lu(k,504) = lu(k,504) - lu(k,175) * lu(k,498)
         lu(k,509) = lu(k,509) - lu(k,176) * lu(k,498)
         lu(k,542) = lu(k,542) - lu(k,174) * lu(k,535)
         lu(k,543) = - lu(k,175) * lu(k,535)
         lu(k,548) = - lu(k,176) * lu(k,535)

         lu(k,178) = 1. / lu(k,178)
         lu(k,179) = lu(k,179) * lu(k,178)
         lu(k,180) = lu(k,180) * lu(k,178)
         lu(k,181) = lu(k,181) * lu(k,178)
         lu(k,182) = lu(k,182) * lu(k,178)
         lu(k,183) = lu(k,183) * lu(k,178)
         lu(k,184) = lu(k,184) * lu(k,178)
         lu(k,230) = lu(k,230) - lu(k,179) * lu(k,229)
         lu(k,234) = lu(k,234) - lu(k,180) * lu(k,229)
         lu(k,235) = lu(k,235) - lu(k,181) * lu(k,229)
         lu(k,237) = lu(k,237) - lu(k,182) * lu(k,229)
         lu(k,238) = lu(k,238) - lu(k,183) * lu(k,229)
         lu(k,239) = lu(k,239) - lu(k,184) * lu(k,229)
         lu(k,326) = lu(k,326) - lu(k,179) * lu(k,323)
         lu(k,332) = lu(k,332) - lu(k,180) * lu(k,323)
         lu(k,333) = lu(k,333) - lu(k,181) * lu(k,323)
         lu(k,336) = lu(k,336) - lu(k,182) * lu(k,323)
         lu(k,337) = lu(k,337) - lu(k,183) * lu(k,323)
         lu(k,338) = lu(k,338) - lu(k,184) * lu(k,323)
         lu(k,363) = lu(k,363) - lu(k,179) * lu(k,361)
         lu(k,367) = lu(k,367) - lu(k,180) * lu(k,361)
         lu(k,368) = lu(k,368) - lu(k,181) * lu(k,361)
         lu(k,371) = lu(k,371) - lu(k,182) * lu(k,361)
         lu(k,372) = lu(k,372) - lu(k,183) * lu(k,361)
         lu(k,373) = lu(k,373) - lu(k,184) * lu(k,361)
         lu(k,388) = lu(k,388) - lu(k,179) * lu(k,386)
         lu(k,394) = lu(k,394) - lu(k,180) * lu(k,386)
         lu(k,395) = lu(k,395) - lu(k,181) * lu(k,386)
         lu(k,398) = lu(k,398) - lu(k,182) * lu(k,386)
         lu(k,399) = lu(k,399) - lu(k,183) * lu(k,386)
         lu(k,400) = lu(k,400) - lu(k,184) * lu(k,386)
         lu(k,436) = lu(k,436) - lu(k,179) * lu(k,433)
         lu(k,442) = lu(k,442) - lu(k,180) * lu(k,433)
         lu(k,443) = lu(k,443) - lu(k,181) * lu(k,433)
         lu(k,446) = lu(k,446) - lu(k,182) * lu(k,433)
         lu(k,447) = lu(k,447) - lu(k,183) * lu(k,433)
         lu(k,448) = lu(k,448) - lu(k,184) * lu(k,433)
         lu(k,463) = lu(k,463) - lu(k,179) * lu(k,460)
         lu(k,469) = lu(k,469) - lu(k,180) * lu(k,460)
         lu(k,470) = lu(k,470) - lu(k,181) * lu(k,460)
         lu(k,473) = lu(k,473) - lu(k,182) * lu(k,460)
         lu(k,474) = lu(k,474) - lu(k,183) * lu(k,460)
         lu(k,475) = lu(k,475) - lu(k,184) * lu(k,460)
         lu(k,482) = - lu(k,179) * lu(k,481)
         lu(k,484) = lu(k,484) - lu(k,180) * lu(k,481)
         lu(k,485) = lu(k,485) - lu(k,181) * lu(k,481)
         lu(k,488) = - lu(k,182) * lu(k,481)
         lu(k,489) = lu(k,489) - lu(k,183) * lu(k,481)
         lu(k,490) = lu(k,490) - lu(k,184) * lu(k,481)

         lu(k,188) = 1. / lu(k,188)
         lu(k,189) = lu(k,189) * lu(k,188)
         lu(k,190) = lu(k,190) * lu(k,188)
         lu(k,191) = lu(k,191) * lu(k,188)
         lu(k,192) = lu(k,192) * lu(k,188)
         lu(k,193) = lu(k,193) * lu(k,188)
         lu(k,194) = lu(k,194) * lu(k,188)
         lu(k,195) = lu(k,195) * lu(k,188)
         lu(k,196) = lu(k,196) * lu(k,188)
         lu(k,197) = lu(k,197) * lu(k,188)
         lu(k,198) = lu(k,198) * lu(k,188)
         lu(k,215) = lu(k,215) - lu(k,189) * lu(k,214)
         lu(k,216) = lu(k,216) - lu(k,190) * lu(k,214)
         lu(k,217) = lu(k,217) - lu(k,191) * lu(k,214)
         lu(k,218) = lu(k,218) - lu(k,192) * lu(k,214)
         lu(k,219) = lu(k,219) - lu(k,193) * lu(k,214)
         lu(k,220) = lu(k,220) - lu(k,194) * lu(k,214)
         lu(k,221) = lu(k,221) - lu(k,195) * lu(k,214)
         lu(k,222) = lu(k,222) - lu(k,196) * lu(k,214)
         lu(k,223) = lu(k,223) - lu(k,197) * lu(k,214)
         lu(k,224) = lu(k,224) - lu(k,198) * lu(k,214)
         lu(k,325) = lu(k,325) - lu(k,189) * lu(k,324)
         lu(k,326) = lu(k,326) - lu(k,190) * lu(k,324)
         lu(k,332) = lu(k,332) - lu(k,191) * lu(k,324)
         lu(k,333) = lu(k,333) - lu(k,192) * lu(k,324)
         lu(k,336) = lu(k,336) - lu(k,193) * lu(k,324)
         lu(k,337) = lu(k,337) - lu(k,194) * lu(k,324)
         lu(k,338) = lu(k,338) - lu(k,195) * lu(k,324)
         lu(k,339) = lu(k,339) - lu(k,196) * lu(k,324)
         lu(k,341) = lu(k,341) - lu(k,197) * lu(k,324)
         lu(k,342) = lu(k,342) - lu(k,198) * lu(k,324)
         lu(k,435) = lu(k,435) - lu(k,189) * lu(k,434)
         lu(k,436) = lu(k,436) - lu(k,190) * lu(k,434)
         lu(k,442) = lu(k,442) - lu(k,191) * lu(k,434)
         lu(k,443) = lu(k,443) - lu(k,192) * lu(k,434)
         lu(k,446) = lu(k,446) - lu(k,193) * lu(k,434)
         lu(k,447) = lu(k,447) - lu(k,194) * lu(k,434)
         lu(k,448) = lu(k,448) - lu(k,195) * lu(k,434)
         lu(k,449) = lu(k,449) - lu(k,196) * lu(k,434)
         lu(k,451) = lu(k,451) - lu(k,197) * lu(k,434)
         lu(k,452) = lu(k,452) - lu(k,198) * lu(k,434)
         lu(k,462) = lu(k,462) - lu(k,189) * lu(k,461)
         lu(k,463) = lu(k,463) - lu(k,190) * lu(k,461)
         lu(k,469) = lu(k,469) - lu(k,191) * lu(k,461)
         lu(k,470) = lu(k,470) - lu(k,192) * lu(k,461)
         lu(k,473) = lu(k,473) - lu(k,193) * lu(k,461)
         lu(k,474) = lu(k,474) - lu(k,194) * lu(k,461)
         lu(k,475) = lu(k,475) - lu(k,195) * lu(k,461)
         lu(k,476) = lu(k,476) - lu(k,196) * lu(k,461)
         lu(k,478) = lu(k,478) - lu(k,197) * lu(k,461)
         lu(k,479) = lu(k,479) - lu(k,198) * lu(k,461)
         lu(k,537) = - lu(k,189) * lu(k,536)
         lu(k,538) = lu(k,538) - lu(k,190) * lu(k,536)
         lu(k,542) = lu(k,542) - lu(k,191) * lu(k,536)
         lu(k,543) = lu(k,543) - lu(k,192) * lu(k,536)
         lu(k,546) = lu(k,546) - lu(k,193) * lu(k,536)
         lu(k,547) = lu(k,547) - lu(k,194) * lu(k,536)
         lu(k,548) = lu(k,548) - lu(k,195) * lu(k,536)
         lu(k,549) = lu(k,549) - lu(k,196) * lu(k,536)
         lu(k,551) = lu(k,551) - lu(k,197) * lu(k,536)
         lu(k,552) = lu(k,552) - lu(k,198) * lu(k,536)
         lu(k,557) = lu(k,557) - lu(k,189) * lu(k,556)
         lu(k,558) = lu(k,558) - lu(k,190) * lu(k,556)
         lu(k,563) = lu(k,563) - lu(k,191) * lu(k,556)
         lu(k,564) = lu(k,564) - lu(k,192) * lu(k,556)
         lu(k,567) = lu(k,567) - lu(k,193) * lu(k,556)
         lu(k,568) = lu(k,568) - lu(k,194) * lu(k,556)
         lu(k,569) = - lu(k,195) * lu(k,556)
         lu(k,570) = lu(k,570) - lu(k,196) * lu(k,556)
         lu(k,572) = lu(k,572) - lu(k,197) * lu(k,556)
         lu(k,573) = lu(k,573) - lu(k,198) * lu(k,556)

         lu(k,201) = 1. / lu(k,201)
         lu(k,202) = lu(k,202) * lu(k,201)
         lu(k,203) = lu(k,203) * lu(k,201)
         lu(k,204) = lu(k,204) * lu(k,201)
         lu(k,205) = lu(k,205) * lu(k,201)
         lu(k,206) = lu(k,206) * lu(k,201)
         lu(k,207) = lu(k,207) * lu(k,201)
         lu(k,208) = lu(k,208) * lu(k,201)
         lu(k,216) = lu(k,216) - lu(k,202) * lu(k,215)
         lu(k,217) = lu(k,217) - lu(k,203) * lu(k,215)
         lu(k,218) = lu(k,218) - lu(k,204) * lu(k,215)
         lu(k,219) = lu(k,219) - lu(k,205) * lu(k,215)
         lu(k,220) = lu(k,220) - lu(k,206) * lu(k,215)
         lu(k,221) = lu(k,221) - lu(k,207) * lu(k,215)
         lu(k,224) = lu(k,224) - lu(k,208) * lu(k,215)
         lu(k,254) = - lu(k,202) * lu(k,253)
         lu(k,259) = lu(k,259) - lu(k,203) * lu(k,253)
         lu(k,260) = - lu(k,204) * lu(k,253)
         lu(k,263) = lu(k,263) - lu(k,205) * lu(k,253)
         lu(k,264) = lu(k,264) - lu(k,206) * lu(k,253)
         lu(k,265) = - lu(k,207) * lu(k,253)
         lu(k,269) = lu(k,269) - lu(k,208) * lu(k,253)
         lu(k,326) = lu(k,326) - lu(k,202) * lu(k,325)
         lu(k,332) = lu(k,332) - lu(k,203) * lu(k,325)
         lu(k,333) = lu(k,333) - lu(k,204) * lu(k,325)
         lu(k,336) = lu(k,336) - lu(k,205) * lu(k,325)
         lu(k,337) = lu(k,337) - lu(k,206) * lu(k,325)
         lu(k,338) = lu(k,338) - lu(k,207) * lu(k,325)
         lu(k,342) = lu(k,342) - lu(k,208) * lu(k,325)
         lu(k,363) = lu(k,363) - lu(k,202) * lu(k,362)
         lu(k,367) = lu(k,367) - lu(k,203) * lu(k,362)
         lu(k,368) = lu(k,368) - lu(k,204) * lu(k,362)
         lu(k,371) = lu(k,371) - lu(k,205) * lu(k,362)
         lu(k,372) = lu(k,372) - lu(k,206) * lu(k,362)
         lu(k,373) = lu(k,373) - lu(k,207) * lu(k,362)
         lu(k,377) = lu(k,377) - lu(k,208) * lu(k,362)
         lu(k,388) = lu(k,388) - lu(k,202) * lu(k,387)
         lu(k,394) = lu(k,394) - lu(k,203) * lu(k,387)
         lu(k,395) = lu(k,395) - lu(k,204) * lu(k,387)
         lu(k,398) = lu(k,398) - lu(k,205) * lu(k,387)
         lu(k,399) = lu(k,399) - lu(k,206) * lu(k,387)
         lu(k,400) = lu(k,400) - lu(k,207) * lu(k,387)
         lu(k,404) = lu(k,404) - lu(k,208) * lu(k,387)
         lu(k,436) = lu(k,436) - lu(k,202) * lu(k,435)
         lu(k,442) = lu(k,442) - lu(k,203) * lu(k,435)
         lu(k,443) = lu(k,443) - lu(k,204) * lu(k,435)
         lu(k,446) = lu(k,446) - lu(k,205) * lu(k,435)
         lu(k,447) = lu(k,447) - lu(k,206) * lu(k,435)
         lu(k,448) = lu(k,448) - lu(k,207) * lu(k,435)
         lu(k,452) = lu(k,452) - lu(k,208) * lu(k,435)
         lu(k,463) = lu(k,463) - lu(k,202) * lu(k,462)
         lu(k,469) = lu(k,469) - lu(k,203) * lu(k,462)
         lu(k,470) = lu(k,470) - lu(k,204) * lu(k,462)
         lu(k,473) = lu(k,473) - lu(k,205) * lu(k,462)
         lu(k,474) = lu(k,474) - lu(k,206) * lu(k,462)
         lu(k,475) = lu(k,475) - lu(k,207) * lu(k,462)
         lu(k,479) = lu(k,479) - lu(k,208) * lu(k,462)
         lu(k,538) = lu(k,538) - lu(k,202) * lu(k,537)
         lu(k,542) = lu(k,542) - lu(k,203) * lu(k,537)
         lu(k,543) = lu(k,543) - lu(k,204) * lu(k,537)
         lu(k,546) = lu(k,546) - lu(k,205) * lu(k,537)
         lu(k,547) = lu(k,547) - lu(k,206) * lu(k,537)
         lu(k,548) = lu(k,548) - lu(k,207) * lu(k,537)
         lu(k,552) = lu(k,552) - lu(k,208) * lu(k,537)
         lu(k,558) = lu(k,558) - lu(k,202) * lu(k,557)
         lu(k,563) = lu(k,563) - lu(k,203) * lu(k,557)
         lu(k,564) = lu(k,564) - lu(k,204) * lu(k,557)
         lu(k,567) = lu(k,567) - lu(k,205) * lu(k,557)
         lu(k,568) = lu(k,568) - lu(k,206) * lu(k,557)
         lu(k,569) = lu(k,569) - lu(k,207) * lu(k,557)
         lu(k,573) = lu(k,573) - lu(k,208) * lu(k,557)

         lu(k,216) = 1. / lu(k,216)
         lu(k,217) = lu(k,217) * lu(k,216)
         lu(k,218) = lu(k,218) * lu(k,216)
         lu(k,219) = lu(k,219) * lu(k,216)
         lu(k,220) = lu(k,220) * lu(k,216)
         lu(k,221) = lu(k,221) * lu(k,216)
         lu(k,222) = lu(k,222) * lu(k,216)
         lu(k,223) = lu(k,223) * lu(k,216)
         lu(k,224) = lu(k,224) * lu(k,216)
         lu(k,234) = lu(k,234) - lu(k,217) * lu(k,230)
         lu(k,235) = lu(k,235) - lu(k,218) * lu(k,230)
         lu(k,237) = lu(k,237) - lu(k,219) * lu(k,230)
         lu(k,238) = lu(k,238) - lu(k,220) * lu(k,230)
         lu(k,239) = lu(k,239) - lu(k,221) * lu(k,230)
         lu(k,240) = lu(k,240) - lu(k,222) * lu(k,230)
         lu(k,241) = lu(k,241) - lu(k,223) * lu(k,230)
         lu(k,242) = - lu(k,224) * lu(k,230)
         lu(k,259) = lu(k,259) - lu(k,217) * lu(k,254)
         lu(k,260) = lu(k,260) - lu(k,218) * lu(k,254)
         lu(k,263) = lu(k,263) - lu(k,219) * lu(k,254)
         lu(k,264) = lu(k,264) - lu(k,220) * lu(k,254)
         lu(k,265) = lu(k,265) - lu(k,221) * lu(k,254)
         lu(k,266) = - lu(k,222) * lu(k,254)
         lu(k,268) = lu(k,268) - lu(k,223) * lu(k,254)
         lu(k,269) = lu(k,269) - lu(k,224) * lu(k,254)
         lu(k,332) = lu(k,332) - lu(k,217) * lu(k,326)
         lu(k,333) = lu(k,333) - lu(k,218) * lu(k,326)
         lu(k,336) = lu(k,336) - lu(k,219) * lu(k,326)
         lu(k,337) = lu(k,337) - lu(k,220) * lu(k,326)
         lu(k,338) = lu(k,338) - lu(k,221) * lu(k,326)
         lu(k,339) = lu(k,339) - lu(k,222) * lu(k,326)
         lu(k,341) = lu(k,341) - lu(k,223) * lu(k,326)
         lu(k,342) = lu(k,342) - lu(k,224) * lu(k,326)
         lu(k,367) = lu(k,367) - lu(k,217) * lu(k,363)
         lu(k,368) = lu(k,368) - lu(k,218) * lu(k,363)
         lu(k,371) = lu(k,371) - lu(k,219) * lu(k,363)
         lu(k,372) = lu(k,372) - lu(k,220) * lu(k,363)
         lu(k,373) = lu(k,373) - lu(k,221) * lu(k,363)
         lu(k,374) = - lu(k,222) * lu(k,363)
         lu(k,376) = lu(k,376) - lu(k,223) * lu(k,363)
         lu(k,377) = lu(k,377) - lu(k,224) * lu(k,363)
         lu(k,394) = lu(k,394) - lu(k,217) * lu(k,388)
         lu(k,395) = lu(k,395) - lu(k,218) * lu(k,388)
         lu(k,398) = lu(k,398) - lu(k,219) * lu(k,388)
         lu(k,399) = lu(k,399) - lu(k,220) * lu(k,388)
         lu(k,400) = lu(k,400) - lu(k,221) * lu(k,388)
         lu(k,401) = lu(k,401) - lu(k,222) * lu(k,388)
         lu(k,403) = lu(k,403) - lu(k,223) * lu(k,388)
         lu(k,404) = lu(k,404) - lu(k,224) * lu(k,388)
         lu(k,442) = lu(k,442) - lu(k,217) * lu(k,436)
         lu(k,443) = lu(k,443) - lu(k,218) * lu(k,436)
         lu(k,446) = lu(k,446) - lu(k,219) * lu(k,436)
         lu(k,447) = lu(k,447) - lu(k,220) * lu(k,436)
         lu(k,448) = lu(k,448) - lu(k,221) * lu(k,436)
         lu(k,449) = lu(k,449) - lu(k,222) * lu(k,436)
         lu(k,451) = lu(k,451) - lu(k,223) * lu(k,436)
         lu(k,452) = lu(k,452) - lu(k,224) * lu(k,436)
         lu(k,469) = lu(k,469) - lu(k,217) * lu(k,463)
         lu(k,470) = lu(k,470) - lu(k,218) * lu(k,463)
         lu(k,473) = lu(k,473) - lu(k,219) * lu(k,463)
         lu(k,474) = lu(k,474) - lu(k,220) * lu(k,463)
         lu(k,475) = lu(k,475) - lu(k,221) * lu(k,463)
         lu(k,476) = lu(k,476) - lu(k,222) * lu(k,463)
         lu(k,478) = lu(k,478) - lu(k,223) * lu(k,463)
         lu(k,479) = lu(k,479) - lu(k,224) * lu(k,463)
         lu(k,484) = lu(k,484) - lu(k,217) * lu(k,482)
         lu(k,485) = lu(k,485) - lu(k,218) * lu(k,482)
         lu(k,488) = lu(k,488) - lu(k,219) * lu(k,482)
         lu(k,489) = lu(k,489) - lu(k,220) * lu(k,482)
         lu(k,490) = lu(k,490) - lu(k,221) * lu(k,482)
         lu(k,491) = - lu(k,222) * lu(k,482)
         lu(k,493) = - lu(k,223) * lu(k,482)
         lu(k,494) = - lu(k,224) * lu(k,482)
         lu(k,503) = lu(k,503) - lu(k,217) * lu(k,499)
         lu(k,504) = lu(k,504) - lu(k,218) * lu(k,499)
         lu(k,507) = lu(k,507) - lu(k,219) * lu(k,499)
         lu(k,508) = lu(k,508) - lu(k,220) * lu(k,499)
         lu(k,509) = lu(k,509) - lu(k,221) * lu(k,499)
         lu(k,510) = lu(k,510) - lu(k,222) * lu(k,499)
         lu(k,512) = lu(k,512) - lu(k,223) * lu(k,499)
         lu(k,513) = lu(k,513) - lu(k,224) * lu(k,499)
         lu(k,542) = lu(k,542) - lu(k,217) * lu(k,538)
         lu(k,543) = lu(k,543) - lu(k,218) * lu(k,538)
         lu(k,546) = lu(k,546) - lu(k,219) * lu(k,538)
         lu(k,547) = lu(k,547) - lu(k,220) * lu(k,538)
         lu(k,548) = lu(k,548) - lu(k,221) * lu(k,538)
         lu(k,549) = lu(k,549) - lu(k,222) * lu(k,538)
         lu(k,551) = lu(k,551) - lu(k,223) * lu(k,538)
         lu(k,552) = lu(k,552) - lu(k,224) * lu(k,538)
         lu(k,563) = lu(k,563) - lu(k,217) * lu(k,558)
         lu(k,564) = lu(k,564) - lu(k,218) * lu(k,558)
         lu(k,567) = lu(k,567) - lu(k,219) * lu(k,558)
         lu(k,568) = lu(k,568) - lu(k,220) * lu(k,558)
         lu(k,569) = lu(k,569) - lu(k,221) * lu(k,558)
         lu(k,570) = lu(k,570) - lu(k,222) * lu(k,558)
         lu(k,572) = lu(k,572) - lu(k,223) * lu(k,558)
         lu(k,573) = lu(k,573) - lu(k,224) * lu(k,558)

         lu(k,231) = 1. / lu(k,231)
         lu(k,232) = lu(k,232) * lu(k,231)
         lu(k,233) = lu(k,233) * lu(k,231)
         lu(k,234) = lu(k,234) * lu(k,231)
         lu(k,235) = lu(k,235) * lu(k,231)
         lu(k,236) = lu(k,236) * lu(k,231)
         lu(k,237) = lu(k,237) * lu(k,231)
         lu(k,238) = lu(k,238) * lu(k,231)
         lu(k,239) = lu(k,239) * lu(k,231)
         lu(k,240) = lu(k,240) * lu(k,231)
         lu(k,241) = lu(k,241) * lu(k,231)
         lu(k,242) = lu(k,242) * lu(k,231)
         lu(k,292) = lu(k,292) - lu(k,232) * lu(k,291)
         lu(k,295) = lu(k,295) - lu(k,233) * lu(k,291)
         lu(k,296) = lu(k,296) - lu(k,234) * lu(k,291)
         lu(k,297) = lu(k,297) - lu(k,235) * lu(k,291)
         lu(k,298) = lu(k,298) - lu(k,236) * lu(k,291)
         lu(k,300) = - lu(k,237) * lu(k,291)
         lu(k,301) = lu(k,301) - lu(k,238) * lu(k,291)
         lu(k,302) = lu(k,302) - lu(k,239) * lu(k,291)
         lu(k,303) = - lu(k,240) * lu(k,291)
         lu(k,305) = - lu(k,241) * lu(k,291)
         lu(k,306) = lu(k,306) - lu(k,242) * lu(k,291)
         lu(k,328) = lu(k,328) - lu(k,232) * lu(k,327)
         lu(k,331) = lu(k,331) - lu(k,233) * lu(k,327)
         lu(k,332) = lu(k,332) - lu(k,234) * lu(k,327)
         lu(k,333) = lu(k,333) - lu(k,235) * lu(k,327)
         lu(k,334) = lu(k,334) - lu(k,236) * lu(k,327)
         lu(k,336) = lu(k,336) - lu(k,237) * lu(k,327)
         lu(k,337) = lu(k,337) - lu(k,238) * lu(k,327)
         lu(k,338) = lu(k,338) - lu(k,239) * lu(k,327)
         lu(k,339) = lu(k,339) - lu(k,240) * lu(k,327)
         lu(k,341) = lu(k,341) - lu(k,241) * lu(k,327)
         lu(k,342) = lu(k,342) - lu(k,242) * lu(k,327)
         lu(k,365) = lu(k,365) - lu(k,232) * lu(k,364)
         lu(k,366) = lu(k,366) - lu(k,233) * lu(k,364)
         lu(k,367) = lu(k,367) - lu(k,234) * lu(k,364)
         lu(k,368) = lu(k,368) - lu(k,235) * lu(k,364)
         lu(k,369) = lu(k,369) - lu(k,236) * lu(k,364)
         lu(k,371) = lu(k,371) - lu(k,237) * lu(k,364)
         lu(k,372) = lu(k,372) - lu(k,238) * lu(k,364)
         lu(k,373) = lu(k,373) - lu(k,239) * lu(k,364)
         lu(k,374) = lu(k,374) - lu(k,240) * lu(k,364)
         lu(k,376) = lu(k,376) - lu(k,241) * lu(k,364)
         lu(k,377) = lu(k,377) - lu(k,242) * lu(k,364)
         lu(k,390) = lu(k,390) - lu(k,232) * lu(k,389)
         lu(k,393) = lu(k,393) - lu(k,233) * lu(k,389)
         lu(k,394) = lu(k,394) - lu(k,234) * lu(k,389)
         lu(k,395) = lu(k,395) - lu(k,235) * lu(k,389)
         lu(k,396) = lu(k,396) - lu(k,236) * lu(k,389)
         lu(k,398) = lu(k,398) - lu(k,237) * lu(k,389)
         lu(k,399) = lu(k,399) - lu(k,238) * lu(k,389)
         lu(k,400) = lu(k,400) - lu(k,239) * lu(k,389)
         lu(k,401) = lu(k,401) - lu(k,240) * lu(k,389)
         lu(k,403) = lu(k,403) - lu(k,241) * lu(k,389)
         lu(k,404) = lu(k,404) - lu(k,242) * lu(k,389)
         lu(k,409) = lu(k,409) - lu(k,232) * lu(k,408)
         lu(k,412) = lu(k,412) - lu(k,233) * lu(k,408)
         lu(k,413) = lu(k,413) - lu(k,234) * lu(k,408)
         lu(k,414) = lu(k,414) - lu(k,235) * lu(k,408)
         lu(k,415) = lu(k,415) - lu(k,236) * lu(k,408)
         lu(k,417) = lu(k,417) - lu(k,237) * lu(k,408)
         lu(k,418) = lu(k,418) - lu(k,238) * lu(k,408)
         lu(k,419) = lu(k,419) - lu(k,239) * lu(k,408)
         lu(k,420) = lu(k,420) - lu(k,240) * lu(k,408)
         lu(k,422) = lu(k,422) - lu(k,241) * lu(k,408)
         lu(k,423) = lu(k,423) - lu(k,242) * lu(k,408)
         lu(k,438) = lu(k,438) - lu(k,232) * lu(k,437)
         lu(k,441) = - lu(k,233) * lu(k,437)
         lu(k,442) = lu(k,442) - lu(k,234) * lu(k,437)
         lu(k,443) = lu(k,443) - lu(k,235) * lu(k,437)
         lu(k,444) = lu(k,444) - lu(k,236) * lu(k,437)
         lu(k,446) = lu(k,446) - lu(k,237) * lu(k,437)
         lu(k,447) = lu(k,447) - lu(k,238) * lu(k,437)
         lu(k,448) = lu(k,448) - lu(k,239) * lu(k,437)
         lu(k,449) = lu(k,449) - lu(k,240) * lu(k,437)
         lu(k,451) = lu(k,451) - lu(k,241) * lu(k,437)
         lu(k,452) = lu(k,452) - lu(k,242) * lu(k,437)
         lu(k,465) = lu(k,465) - lu(k,232) * lu(k,464)
         lu(k,468) = lu(k,468) - lu(k,233) * lu(k,464)
         lu(k,469) = lu(k,469) - lu(k,234) * lu(k,464)
         lu(k,470) = lu(k,470) - lu(k,235) * lu(k,464)
         lu(k,471) = lu(k,471) - lu(k,236) * lu(k,464)
         lu(k,473) = lu(k,473) - lu(k,237) * lu(k,464)
         lu(k,474) = lu(k,474) - lu(k,238) * lu(k,464)
         lu(k,475) = lu(k,475) - lu(k,239) * lu(k,464)
         lu(k,476) = lu(k,476) - lu(k,240) * lu(k,464)
         lu(k,478) = lu(k,478) - lu(k,241) * lu(k,464)
         lu(k,479) = lu(k,479) - lu(k,242) * lu(k,464)
         lu(k,501) = lu(k,501) - lu(k,232) * lu(k,500)
         lu(k,502) = - lu(k,233) * lu(k,500)
         lu(k,503) = lu(k,503) - lu(k,234) * lu(k,500)
         lu(k,504) = lu(k,504) - lu(k,235) * lu(k,500)
         lu(k,505) = lu(k,505) - lu(k,236) * lu(k,500)
         lu(k,507) = lu(k,507) - lu(k,237) * lu(k,500)
         lu(k,508) = lu(k,508) - lu(k,238) * lu(k,500)
         lu(k,509) = lu(k,509) - lu(k,239) * lu(k,500)
         lu(k,510) = lu(k,510) - lu(k,240) * lu(k,500)
         lu(k,512) = lu(k,512) - lu(k,241) * lu(k,500)
         lu(k,513) = lu(k,513) - lu(k,242) * lu(k,500)

         lu(k,246) = 1. / lu(k,246)
         lu(k,247) = lu(k,247) * lu(k,246)
         lu(k,248) = lu(k,248) * lu(k,246)
         lu(k,249) = lu(k,249) * lu(k,246)
         lu(k,250) = lu(k,250) * lu(k,246)
         lu(k,251) = lu(k,251) * lu(k,246)
         lu(k,252) = lu(k,252) * lu(k,246)
         lu(k,260) = lu(k,260) - lu(k,247) * lu(k,255)
         lu(k,261) = - lu(k,248) * lu(k,255)
         lu(k,262) = lu(k,262) - lu(k,249) * lu(k,255)
         lu(k,264) = lu(k,264) - lu(k,250) * lu(k,255)
         lu(k,265) = lu(k,265) - lu(k,251) * lu(k,255)
         lu(k,267) = - lu(k,252) * lu(k,255)
         lu(k,278) = - lu(k,247) * lu(k,273)
         lu(k,279) = lu(k,279) - lu(k,248) * lu(k,273)
         lu(k,280) = lu(k,280) - lu(k,249) * lu(k,273)
         lu(k,282) = lu(k,282) - lu(k,250) * lu(k,273)
         lu(k,283) = - lu(k,251) * lu(k,273)
         lu(k,285) = - lu(k,252) * lu(k,273)
         lu(k,297) = lu(k,297) - lu(k,247) * lu(k,292)
         lu(k,298) = lu(k,298) - lu(k,248) * lu(k,292)
         lu(k,299) = - lu(k,249) * lu(k,292)
         lu(k,301) = lu(k,301) - lu(k,250) * lu(k,292)
         lu(k,302) = lu(k,302) - lu(k,251) * lu(k,292)
         lu(k,304) = lu(k,304) - lu(k,252) * lu(k,292)
         lu(k,333) = lu(k,333) - lu(k,247) * lu(k,328)
         lu(k,334) = lu(k,334) - lu(k,248) * lu(k,328)
         lu(k,335) = lu(k,335) - lu(k,249) * lu(k,328)
         lu(k,337) = lu(k,337) - lu(k,250) * lu(k,328)
         lu(k,338) = lu(k,338) - lu(k,251) * lu(k,328)
         lu(k,340) = lu(k,340) - lu(k,252) * lu(k,328)
         lu(k,368) = lu(k,368) - lu(k,247) * lu(k,365)
         lu(k,369) = lu(k,369) - lu(k,248) * lu(k,365)
         lu(k,370) = lu(k,370) - lu(k,249) * lu(k,365)
         lu(k,372) = lu(k,372) - lu(k,250) * lu(k,365)
         lu(k,373) = lu(k,373) - lu(k,251) * lu(k,365)
         lu(k,375) = lu(k,375) - lu(k,252) * lu(k,365)
         lu(k,395) = lu(k,395) - lu(k,247) * lu(k,390)
         lu(k,396) = lu(k,396) - lu(k,248) * lu(k,390)
         lu(k,397) = lu(k,397) - lu(k,249) * lu(k,390)
         lu(k,399) = lu(k,399) - lu(k,250) * lu(k,390)
         lu(k,400) = lu(k,400) - lu(k,251) * lu(k,390)
         lu(k,402) = lu(k,402) - lu(k,252) * lu(k,390)
         lu(k,414) = lu(k,414) - lu(k,247) * lu(k,409)
         lu(k,415) = lu(k,415) - lu(k,248) * lu(k,409)
         lu(k,416) = lu(k,416) - lu(k,249) * lu(k,409)
         lu(k,418) = lu(k,418) - lu(k,250) * lu(k,409)
         lu(k,419) = lu(k,419) - lu(k,251) * lu(k,409)
         lu(k,421) = lu(k,421) - lu(k,252) * lu(k,409)
         lu(k,443) = lu(k,443) - lu(k,247) * lu(k,438)
         lu(k,444) = lu(k,444) - lu(k,248) * lu(k,438)
         lu(k,445) = lu(k,445) - lu(k,249) * lu(k,438)
         lu(k,447) = lu(k,447) - lu(k,250) * lu(k,438)
         lu(k,448) = lu(k,448) - lu(k,251) * lu(k,438)
         lu(k,450) = lu(k,450) - lu(k,252) * lu(k,438)
         lu(k,470) = lu(k,470) - lu(k,247) * lu(k,465)
         lu(k,471) = lu(k,471) - lu(k,248) * lu(k,465)
         lu(k,472) = lu(k,472) - lu(k,249) * lu(k,465)
         lu(k,474) = lu(k,474) - lu(k,250) * lu(k,465)
         lu(k,475) = lu(k,475) - lu(k,251) * lu(k,465)
         lu(k,477) = lu(k,477) - lu(k,252) * lu(k,465)
         lu(k,485) = lu(k,485) - lu(k,247) * lu(k,483)
         lu(k,486) = lu(k,486) - lu(k,248) * lu(k,483)
         lu(k,487) = - lu(k,249) * lu(k,483)
         lu(k,489) = lu(k,489) - lu(k,250) * lu(k,483)
         lu(k,490) = lu(k,490) - lu(k,251) * lu(k,483)
         lu(k,492) = lu(k,492) - lu(k,252) * lu(k,483)
         lu(k,504) = lu(k,504) - lu(k,247) * lu(k,501)
         lu(k,505) = lu(k,505) - lu(k,248) * lu(k,501)
         lu(k,506) = lu(k,506) - lu(k,249) * lu(k,501)
         lu(k,508) = lu(k,508) - lu(k,250) * lu(k,501)
         lu(k,509) = lu(k,509) - lu(k,251) * lu(k,501)
         lu(k,511) = - lu(k,252) * lu(k,501)
         lu(k,520) = lu(k,520) - lu(k,247) * lu(k,516)
         lu(k,521) = lu(k,521) - lu(k,248) * lu(k,516)
         lu(k,522) = lu(k,522) - lu(k,249) * lu(k,516)
         lu(k,524) = lu(k,524) - lu(k,250) * lu(k,516)
         lu(k,525) = lu(k,525) - lu(k,251) * lu(k,516)
         lu(k,527) = lu(k,527) - lu(k,252) * lu(k,516)
         lu(k,543) = lu(k,543) - lu(k,247) * lu(k,539)
         lu(k,544) = lu(k,544) - lu(k,248) * lu(k,539)
         lu(k,545) = lu(k,545) - lu(k,249) * lu(k,539)
         lu(k,547) = lu(k,547) - lu(k,250) * lu(k,539)
         lu(k,548) = lu(k,548) - lu(k,251) * lu(k,539)
         lu(k,550) = lu(k,550) - lu(k,252) * lu(k,539)
         lu(k,564) = lu(k,564) - lu(k,247) * lu(k,559)
         lu(k,565) = lu(k,565) - lu(k,248) * lu(k,559)
         lu(k,566) = lu(k,566) - lu(k,249) * lu(k,559)
         lu(k,568) = lu(k,568) - lu(k,250) * lu(k,559)
         lu(k,569) = lu(k,569) - lu(k,251) * lu(k,559)
         lu(k,571) = lu(k,571) - lu(k,252) * lu(k,559)

         lu(k,256) = 1. / lu(k,256)
         lu(k,257) = lu(k,257) * lu(k,256)
         lu(k,258) = lu(k,258) * lu(k,256)
         lu(k,259) = lu(k,259) * lu(k,256)
         lu(k,260) = lu(k,260) * lu(k,256)
         lu(k,261) = lu(k,261) * lu(k,256)
         lu(k,262) = lu(k,262) * lu(k,256)
         lu(k,263) = lu(k,263) * lu(k,256)
         lu(k,264) = lu(k,264) * lu(k,256)
         lu(k,265) = lu(k,265) * lu(k,256)
         lu(k,266) = lu(k,266) * lu(k,256)
         lu(k,267) = lu(k,267) * lu(k,256)
         lu(k,268) = lu(k,268) * lu(k,256)
         lu(k,269) = lu(k,269) * lu(k,256)
         lu(k,275) = lu(k,275) - lu(k,257) * lu(k,274)
         lu(k,276) = lu(k,276) - lu(k,258) * lu(k,274)
         lu(k,277) = lu(k,277) - lu(k,259) * lu(k,274)
         lu(k,278) = lu(k,278) - lu(k,260) * lu(k,274)
         lu(k,279) = lu(k,279) - lu(k,261) * lu(k,274)
         lu(k,280) = lu(k,280) - lu(k,262) * lu(k,274)
         lu(k,281) = lu(k,281) - lu(k,263) * lu(k,274)
         lu(k,282) = lu(k,282) - lu(k,264) * lu(k,274)
         lu(k,283) = lu(k,283) - lu(k,265) * lu(k,274)
         lu(k,284) = lu(k,284) - lu(k,266) * lu(k,274)
         lu(k,285) = lu(k,285) - lu(k,267) * lu(k,274)
         lu(k,286) = lu(k,286) - lu(k,268) * lu(k,274)
         lu(k,287) = lu(k,287) - lu(k,269) * lu(k,274)
         lu(k,294) = lu(k,294) - lu(k,257) * lu(k,293)
         lu(k,295) = lu(k,295) - lu(k,258) * lu(k,293)
         lu(k,296) = lu(k,296) - lu(k,259) * lu(k,293)
         lu(k,297) = lu(k,297) - lu(k,260) * lu(k,293)
         lu(k,298) = lu(k,298) - lu(k,261) * lu(k,293)
         lu(k,299) = lu(k,299) - lu(k,262) * lu(k,293)
         lu(k,300) = lu(k,300) - lu(k,263) * lu(k,293)
         lu(k,301) = lu(k,301) - lu(k,264) * lu(k,293)
         lu(k,302) = lu(k,302) - lu(k,265) * lu(k,293)
         lu(k,303) = lu(k,303) - lu(k,266) * lu(k,293)
         lu(k,304) = lu(k,304) - lu(k,267) * lu(k,293)
         lu(k,305) = lu(k,305) - lu(k,268) * lu(k,293)
         lu(k,306) = lu(k,306) - lu(k,269) * lu(k,293)
         lu(k,330) = lu(k,330) - lu(k,257) * lu(k,329)
         lu(k,331) = lu(k,331) - lu(k,258) * lu(k,329)
         lu(k,332) = lu(k,332) - lu(k,259) * lu(k,329)
         lu(k,333) = lu(k,333) - lu(k,260) * lu(k,329)
         lu(k,334) = lu(k,334) - lu(k,261) * lu(k,329)
         lu(k,335) = lu(k,335) - lu(k,262) * lu(k,329)
         lu(k,336) = lu(k,336) - lu(k,263) * lu(k,329)
         lu(k,337) = lu(k,337) - lu(k,264) * lu(k,329)
         lu(k,338) = lu(k,338) - lu(k,265) * lu(k,329)
         lu(k,339) = lu(k,339) - lu(k,266) * lu(k,329)
         lu(k,340) = lu(k,340) - lu(k,267) * lu(k,329)
         lu(k,341) = lu(k,341) - lu(k,268) * lu(k,329)
         lu(k,342) = lu(k,342) - lu(k,269) * lu(k,329)
         lu(k,392) = lu(k,392) - lu(k,257) * lu(k,391)
         lu(k,393) = lu(k,393) - lu(k,258) * lu(k,391)
         lu(k,394) = lu(k,394) - lu(k,259) * lu(k,391)
         lu(k,395) = lu(k,395) - lu(k,260) * lu(k,391)
         lu(k,396) = lu(k,396) - lu(k,261) * lu(k,391)
         lu(k,397) = lu(k,397) - lu(k,262) * lu(k,391)
         lu(k,398) = lu(k,398) - lu(k,263) * lu(k,391)
         lu(k,399) = lu(k,399) - lu(k,264) * lu(k,391)
         lu(k,400) = lu(k,400) - lu(k,265) * lu(k,391)
         lu(k,401) = lu(k,401) - lu(k,266) * lu(k,391)
         lu(k,402) = lu(k,402) - lu(k,267) * lu(k,391)
         lu(k,403) = lu(k,403) - lu(k,268) * lu(k,391)
         lu(k,404) = lu(k,404) - lu(k,269) * lu(k,391)
         lu(k,411) = lu(k,411) - lu(k,257) * lu(k,410)
         lu(k,412) = lu(k,412) - lu(k,258) * lu(k,410)
         lu(k,413) = lu(k,413) - lu(k,259) * lu(k,410)
         lu(k,414) = lu(k,414) - lu(k,260) * lu(k,410)
         lu(k,415) = lu(k,415) - lu(k,261) * lu(k,410)
         lu(k,416) = lu(k,416) - lu(k,262) * lu(k,410)
         lu(k,417) = lu(k,417) - lu(k,263) * lu(k,410)
         lu(k,418) = lu(k,418) - lu(k,264) * lu(k,410)
         lu(k,419) = lu(k,419) - lu(k,265) * lu(k,410)
         lu(k,420) = lu(k,420) - lu(k,266) * lu(k,410)
         lu(k,421) = lu(k,421) - lu(k,267) * lu(k,410)
         lu(k,422) = lu(k,422) - lu(k,268) * lu(k,410)
         lu(k,423) = lu(k,423) - lu(k,269) * lu(k,410)
         lu(k,440) = - lu(k,257) * lu(k,439)
         lu(k,441) = lu(k,441) - lu(k,258) * lu(k,439)
         lu(k,442) = lu(k,442) - lu(k,259) * lu(k,439)
         lu(k,443) = lu(k,443) - lu(k,260) * lu(k,439)
         lu(k,444) = lu(k,444) - lu(k,261) * lu(k,439)
         lu(k,445) = lu(k,445) - lu(k,262) * lu(k,439)
         lu(k,446) = lu(k,446) - lu(k,263) * lu(k,439)
         lu(k,447) = lu(k,447) - lu(k,264) * lu(k,439)
         lu(k,448) = lu(k,448) - lu(k,265) * lu(k,439)
         lu(k,449) = lu(k,449) - lu(k,266) * lu(k,439)
         lu(k,450) = lu(k,450) - lu(k,267) * lu(k,439)
         lu(k,451) = lu(k,451) - lu(k,268) * lu(k,439)
         lu(k,452) = lu(k,452) - lu(k,269) * lu(k,439)
         lu(k,467) = lu(k,467) - lu(k,257) * lu(k,466)
         lu(k,468) = lu(k,468) - lu(k,258) * lu(k,466)
         lu(k,469) = lu(k,469) - lu(k,259) * lu(k,466)
         lu(k,470) = lu(k,470) - lu(k,260) * lu(k,466)
         lu(k,471) = lu(k,471) - lu(k,261) * lu(k,466)
         lu(k,472) = lu(k,472) - lu(k,262) * lu(k,466)
         lu(k,473) = lu(k,473) - lu(k,263) * lu(k,466)
         lu(k,474) = lu(k,474) - lu(k,264) * lu(k,466)
         lu(k,475) = lu(k,475) - lu(k,265) * lu(k,466)
         lu(k,476) = lu(k,476) - lu(k,266) * lu(k,466)
         lu(k,477) = lu(k,477) - lu(k,267) * lu(k,466)
         lu(k,478) = lu(k,478) - lu(k,268) * lu(k,466)
         lu(k,479) = lu(k,479) - lu(k,269) * lu(k,466)
         lu(k,561) = lu(k,561) - lu(k,257) * lu(k,560)
         lu(k,562) = lu(k,562) - lu(k,258) * lu(k,560)
         lu(k,563) = lu(k,563) - lu(k,259) * lu(k,560)
         lu(k,564) = lu(k,564) - lu(k,260) * lu(k,560)
         lu(k,565) = lu(k,565) - lu(k,261) * lu(k,560)
         lu(k,566) = lu(k,566) - lu(k,262) * lu(k,560)
         lu(k,567) = lu(k,567) - lu(k,263) * lu(k,560)
         lu(k,568) = lu(k,568) - lu(k,264) * lu(k,560)
         lu(k,569) = lu(k,569) - lu(k,265) * lu(k,560)
         lu(k,570) = lu(k,570) - lu(k,266) * lu(k,560)
         lu(k,571) = lu(k,571) - lu(k,267) * lu(k,560)
         lu(k,572) = lu(k,572) - lu(k,268) * lu(k,560)
         lu(k,573) = lu(k,573) - lu(k,269) * lu(k,560)

         lu(k,275) = 1. / lu(k,275)
         lu(k,276) = lu(k,276) * lu(k,275)
         lu(k,277) = lu(k,277) * lu(k,275)
         lu(k,278) = lu(k,278) * lu(k,275)
         lu(k,279) = lu(k,279) * lu(k,275)
         lu(k,280) = lu(k,280) * lu(k,275)
         lu(k,281) = lu(k,281) * lu(k,275)
         lu(k,282) = lu(k,282) * lu(k,275)
         lu(k,283) = lu(k,283) * lu(k,275)
         lu(k,284) = lu(k,284) * lu(k,275)
         lu(k,285) = lu(k,285) * lu(k,275)
         lu(k,286) = lu(k,286) * lu(k,275)
         lu(k,287) = lu(k,287) * lu(k,275)
         lu(k,295) = lu(k,295) - lu(k,276) * lu(k,294)
         lu(k,296) = lu(k,296) - lu(k,277) * lu(k,294)
         lu(k,297) = lu(k,297) - lu(k,278) * lu(k,294)
         lu(k,298) = lu(k,298) - lu(k,279) * lu(k,294)
         lu(k,299) = lu(k,299) - lu(k,280) * lu(k,294)
         lu(k,300) = lu(k,300) - lu(k,281) * lu(k,294)
         lu(k,301) = lu(k,301) - lu(k,282) * lu(k,294)
         lu(k,302) = lu(k,302) - lu(k,283) * lu(k,294)
         lu(k,303) = lu(k,303) - lu(k,284) * lu(k,294)
         lu(k,304) = lu(k,304) - lu(k,285) * lu(k,294)
         lu(k,305) = lu(k,305) - lu(k,286) * lu(k,294)
         lu(k,306) = lu(k,306) - lu(k,287) * lu(k,294)
         lu(k,331) = lu(k,331) - lu(k,276) * lu(k,330)
         lu(k,332) = lu(k,332) - lu(k,277) * lu(k,330)
         lu(k,333) = lu(k,333) - lu(k,278) * lu(k,330)
         lu(k,334) = lu(k,334) - lu(k,279) * lu(k,330)
         lu(k,335) = lu(k,335) - lu(k,280) * lu(k,330)
         lu(k,336) = lu(k,336) - lu(k,281) * lu(k,330)
         lu(k,337) = lu(k,337) - lu(k,282) * lu(k,330)
         lu(k,338) = lu(k,338) - lu(k,283) * lu(k,330)
         lu(k,339) = lu(k,339) - lu(k,284) * lu(k,330)
         lu(k,340) = lu(k,340) - lu(k,285) * lu(k,330)
         lu(k,341) = lu(k,341) - lu(k,286) * lu(k,330)
         lu(k,342) = lu(k,342) - lu(k,287) * lu(k,330)
         lu(k,393) = lu(k,393) - lu(k,276) * lu(k,392)
         lu(k,394) = lu(k,394) - lu(k,277) * lu(k,392)
         lu(k,395) = lu(k,395) - lu(k,278) * lu(k,392)
         lu(k,396) = lu(k,396) - lu(k,279) * lu(k,392)
         lu(k,397) = lu(k,397) - lu(k,280) * lu(k,392)
         lu(k,398) = lu(k,398) - lu(k,281) * lu(k,392)
         lu(k,399) = lu(k,399) - lu(k,282) * lu(k,392)
         lu(k,400) = lu(k,400) - lu(k,283) * lu(k,392)
         lu(k,401) = lu(k,401) - lu(k,284) * lu(k,392)
         lu(k,402) = lu(k,402) - lu(k,285) * lu(k,392)
         lu(k,403) = lu(k,403) - lu(k,286) * lu(k,392)
         lu(k,404) = lu(k,404) - lu(k,287) * lu(k,392)
         lu(k,412) = lu(k,412) - lu(k,276) * lu(k,411)
         lu(k,413) = lu(k,413) - lu(k,277) * lu(k,411)
         lu(k,414) = lu(k,414) - lu(k,278) * lu(k,411)
         lu(k,415) = lu(k,415) - lu(k,279) * lu(k,411)
         lu(k,416) = lu(k,416) - lu(k,280) * lu(k,411)
         lu(k,417) = lu(k,417) - lu(k,281) * lu(k,411)
         lu(k,418) = lu(k,418) - lu(k,282) * lu(k,411)
         lu(k,419) = lu(k,419) - lu(k,283) * lu(k,411)
         lu(k,420) = lu(k,420) - lu(k,284) * lu(k,411)
         lu(k,421) = lu(k,421) - lu(k,285) * lu(k,411)
         lu(k,422) = lu(k,422) - lu(k,286) * lu(k,411)
         lu(k,423) = lu(k,423) - lu(k,287) * lu(k,411)
         lu(k,441) = lu(k,441) - lu(k,276) * lu(k,440)
         lu(k,442) = lu(k,442) - lu(k,277) * lu(k,440)
         lu(k,443) = lu(k,443) - lu(k,278) * lu(k,440)
         lu(k,444) = lu(k,444) - lu(k,279) * lu(k,440)
         lu(k,445) = lu(k,445) - lu(k,280) * lu(k,440)
         lu(k,446) = lu(k,446) - lu(k,281) * lu(k,440)
         lu(k,447) = lu(k,447) - lu(k,282) * lu(k,440)
         lu(k,448) = lu(k,448) - lu(k,283) * lu(k,440)
         lu(k,449) = lu(k,449) - lu(k,284) * lu(k,440)
         lu(k,450) = lu(k,450) - lu(k,285) * lu(k,440)
         lu(k,451) = lu(k,451) - lu(k,286) * lu(k,440)
         lu(k,452) = lu(k,452) - lu(k,287) * lu(k,440)
         lu(k,468) = lu(k,468) - lu(k,276) * lu(k,467)
         lu(k,469) = lu(k,469) - lu(k,277) * lu(k,467)
         lu(k,470) = lu(k,470) - lu(k,278) * lu(k,467)
         lu(k,471) = lu(k,471) - lu(k,279) * lu(k,467)
         lu(k,472) = lu(k,472) - lu(k,280) * lu(k,467)
         lu(k,473) = lu(k,473) - lu(k,281) * lu(k,467)
         lu(k,474) = lu(k,474) - lu(k,282) * lu(k,467)
         lu(k,475) = lu(k,475) - lu(k,283) * lu(k,467)
         lu(k,476) = lu(k,476) - lu(k,284) * lu(k,467)
         lu(k,477) = lu(k,477) - lu(k,285) * lu(k,467)
         lu(k,478) = lu(k,478) - lu(k,286) * lu(k,467)
         lu(k,479) = lu(k,479) - lu(k,287) * lu(k,467)
         lu(k,518) = lu(k,518) - lu(k,276) * lu(k,517)
         lu(k,519) = lu(k,519) - lu(k,277) * lu(k,517)
         lu(k,520) = lu(k,520) - lu(k,278) * lu(k,517)
         lu(k,521) = lu(k,521) - lu(k,279) * lu(k,517)
         lu(k,522) = lu(k,522) - lu(k,280) * lu(k,517)
         lu(k,523) = lu(k,523) - lu(k,281) * lu(k,517)
         lu(k,524) = lu(k,524) - lu(k,282) * lu(k,517)
         lu(k,525) = lu(k,525) - lu(k,283) * lu(k,517)
         lu(k,526) = lu(k,526) - lu(k,284) * lu(k,517)
         lu(k,527) = lu(k,527) - lu(k,285) * lu(k,517)
         lu(k,528) = lu(k,528) - lu(k,286) * lu(k,517)
         lu(k,529) = lu(k,529) - lu(k,287) * lu(k,517)
         lu(k,541) = lu(k,541) - lu(k,276) * lu(k,540)
         lu(k,542) = lu(k,542) - lu(k,277) * lu(k,540)
         lu(k,543) = lu(k,543) - lu(k,278) * lu(k,540)
         lu(k,544) = lu(k,544) - lu(k,279) * lu(k,540)
         lu(k,545) = lu(k,545) - lu(k,280) * lu(k,540)
         lu(k,546) = lu(k,546) - lu(k,281) * lu(k,540)
         lu(k,547) = lu(k,547) - lu(k,282) * lu(k,540)
         lu(k,548) = lu(k,548) - lu(k,283) * lu(k,540)
         lu(k,549) = lu(k,549) - lu(k,284) * lu(k,540)
         lu(k,550) = lu(k,550) - lu(k,285) * lu(k,540)
         lu(k,551) = lu(k,551) - lu(k,286) * lu(k,540)
         lu(k,552) = lu(k,552) - lu(k,287) * lu(k,540)
         lu(k,562) = lu(k,562) - lu(k,276) * lu(k,561)
         lu(k,563) = lu(k,563) - lu(k,277) * lu(k,561)
         lu(k,564) = lu(k,564) - lu(k,278) * lu(k,561)
         lu(k,565) = lu(k,565) - lu(k,279) * lu(k,561)
         lu(k,566) = lu(k,566) - lu(k,280) * lu(k,561)
         lu(k,567) = lu(k,567) - lu(k,281) * lu(k,561)
         lu(k,568) = lu(k,568) - lu(k,282) * lu(k,561)
         lu(k,569) = lu(k,569) - lu(k,283) * lu(k,561)
         lu(k,570) = lu(k,570) - lu(k,284) * lu(k,561)
         lu(k,571) = lu(k,571) - lu(k,285) * lu(k,561)
         lu(k,572) = lu(k,572) - lu(k,286) * lu(k,561)
         lu(k,573) = lu(k,573) - lu(k,287) * lu(k,561)

         lu(k,295) = 1. / lu(k,295)
         lu(k,296) = lu(k,296) * lu(k,295)
         lu(k,297) = lu(k,297) * lu(k,295)
         lu(k,298) = lu(k,298) * lu(k,295)
         lu(k,299) = lu(k,299) * lu(k,295)
         lu(k,300) = lu(k,300) * lu(k,295)
         lu(k,301) = lu(k,301) * lu(k,295)
         lu(k,302) = lu(k,302) * lu(k,295)
         lu(k,303) = lu(k,303) * lu(k,295)
         lu(k,304) = lu(k,304) * lu(k,295)
         lu(k,305) = lu(k,305) * lu(k,295)
         lu(k,306) = lu(k,306) * lu(k,295)
         lu(k,332) = lu(k,332) - lu(k,296) * lu(k,331)
         lu(k,333) = lu(k,333) - lu(k,297) * lu(k,331)
         lu(k,334) = lu(k,334) - lu(k,298) * lu(k,331)
         lu(k,335) = lu(k,335) - lu(k,299) * lu(k,331)
         lu(k,336) = lu(k,336) - lu(k,300) * lu(k,331)
         lu(k,337) = lu(k,337) - lu(k,301) * lu(k,331)
         lu(k,338) = lu(k,338) - lu(k,302) * lu(k,331)
         lu(k,339) = lu(k,339) - lu(k,303) * lu(k,331)
         lu(k,340) = lu(k,340) - lu(k,304) * lu(k,331)
         lu(k,341) = lu(k,341) - lu(k,305) * lu(k,331)
         lu(k,342) = lu(k,342) - lu(k,306) * lu(k,331)
         lu(k,367) = lu(k,367) - lu(k,296) * lu(k,366)
         lu(k,368) = lu(k,368) - lu(k,297) * lu(k,366)
         lu(k,369) = lu(k,369) - lu(k,298) * lu(k,366)
         lu(k,370) = lu(k,370) - lu(k,299) * lu(k,366)
         lu(k,371) = lu(k,371) - lu(k,300) * lu(k,366)
         lu(k,372) = lu(k,372) - lu(k,301) * lu(k,366)
         lu(k,373) = lu(k,373) - lu(k,302) * lu(k,366)
         lu(k,374) = lu(k,374) - lu(k,303) * lu(k,366)
         lu(k,375) = lu(k,375) - lu(k,304) * lu(k,366)
         lu(k,376) = lu(k,376) - lu(k,305) * lu(k,366)
         lu(k,377) = lu(k,377) - lu(k,306) * lu(k,366)
         lu(k,394) = lu(k,394) - lu(k,296) * lu(k,393)
         lu(k,395) = lu(k,395) - lu(k,297) * lu(k,393)
         lu(k,396) = lu(k,396) - lu(k,298) * lu(k,393)
         lu(k,397) = lu(k,397) - lu(k,299) * lu(k,393)
         lu(k,398) = lu(k,398) - lu(k,300) * lu(k,393)
         lu(k,399) = lu(k,399) - lu(k,301) * lu(k,393)
         lu(k,400) = lu(k,400) - lu(k,302) * lu(k,393)
         lu(k,401) = lu(k,401) - lu(k,303) * lu(k,393)
         lu(k,402) = lu(k,402) - lu(k,304) * lu(k,393)
         lu(k,403) = lu(k,403) - lu(k,305) * lu(k,393)
         lu(k,404) = lu(k,404) - lu(k,306) * lu(k,393)
         lu(k,413) = lu(k,413) - lu(k,296) * lu(k,412)
         lu(k,414) = lu(k,414) - lu(k,297) * lu(k,412)
         lu(k,415) = lu(k,415) - lu(k,298) * lu(k,412)
         lu(k,416) = lu(k,416) - lu(k,299) * lu(k,412)
         lu(k,417) = lu(k,417) - lu(k,300) * lu(k,412)
         lu(k,418) = lu(k,418) - lu(k,301) * lu(k,412)
         lu(k,419) = lu(k,419) - lu(k,302) * lu(k,412)
         lu(k,420) = lu(k,420) - lu(k,303) * lu(k,412)
         lu(k,421) = lu(k,421) - lu(k,304) * lu(k,412)
         lu(k,422) = lu(k,422) - lu(k,305) * lu(k,412)
         lu(k,423) = lu(k,423) - lu(k,306) * lu(k,412)
         lu(k,442) = lu(k,442) - lu(k,296) * lu(k,441)
         lu(k,443) = lu(k,443) - lu(k,297) * lu(k,441)
         lu(k,444) = lu(k,444) - lu(k,298) * lu(k,441)
         lu(k,445) = lu(k,445) - lu(k,299) * lu(k,441)
         lu(k,446) = lu(k,446) - lu(k,300) * lu(k,441)
         lu(k,447) = lu(k,447) - lu(k,301) * lu(k,441)
         lu(k,448) = lu(k,448) - lu(k,302) * lu(k,441)
         lu(k,449) = lu(k,449) - lu(k,303) * lu(k,441)
         lu(k,450) = lu(k,450) - lu(k,304) * lu(k,441)
         lu(k,451) = lu(k,451) - lu(k,305) * lu(k,441)
         lu(k,452) = lu(k,452) - lu(k,306) * lu(k,441)
         lu(k,469) = lu(k,469) - lu(k,296) * lu(k,468)
         lu(k,470) = lu(k,470) - lu(k,297) * lu(k,468)
         lu(k,471) = lu(k,471) - lu(k,298) * lu(k,468)
         lu(k,472) = lu(k,472) - lu(k,299) * lu(k,468)
         lu(k,473) = lu(k,473) - lu(k,300) * lu(k,468)
         lu(k,474) = lu(k,474) - lu(k,301) * lu(k,468)
         lu(k,475) = lu(k,475) - lu(k,302) * lu(k,468)
         lu(k,476) = lu(k,476) - lu(k,303) * lu(k,468)
         lu(k,477) = lu(k,477) - lu(k,304) * lu(k,468)
         lu(k,478) = lu(k,478) - lu(k,305) * lu(k,468)
         lu(k,479) = lu(k,479) - lu(k,306) * lu(k,468)
         lu(k,503) = lu(k,503) - lu(k,296) * lu(k,502)
         lu(k,504) = lu(k,504) - lu(k,297) * lu(k,502)
         lu(k,505) = lu(k,505) - lu(k,298) * lu(k,502)
         lu(k,506) = lu(k,506) - lu(k,299) * lu(k,502)
         lu(k,507) = lu(k,507) - lu(k,300) * lu(k,502)
         lu(k,508) = lu(k,508) - lu(k,301) * lu(k,502)
         lu(k,509) = lu(k,509) - lu(k,302) * lu(k,502)
         lu(k,510) = lu(k,510) - lu(k,303) * lu(k,502)
         lu(k,511) = lu(k,511) - lu(k,304) * lu(k,502)
         lu(k,512) = lu(k,512) - lu(k,305) * lu(k,502)
         lu(k,513) = lu(k,513) - lu(k,306) * lu(k,502)
         lu(k,519) = lu(k,519) - lu(k,296) * lu(k,518)
         lu(k,520) = lu(k,520) - lu(k,297) * lu(k,518)
         lu(k,521) = lu(k,521) - lu(k,298) * lu(k,518)
         lu(k,522) = lu(k,522) - lu(k,299) * lu(k,518)
         lu(k,523) = lu(k,523) - lu(k,300) * lu(k,518)
         lu(k,524) = lu(k,524) - lu(k,301) * lu(k,518)
         lu(k,525) = lu(k,525) - lu(k,302) * lu(k,518)
         lu(k,526) = lu(k,526) - lu(k,303) * lu(k,518)
         lu(k,527) = lu(k,527) - lu(k,304) * lu(k,518)
         lu(k,528) = lu(k,528) - lu(k,305) * lu(k,518)
         lu(k,529) = lu(k,529) - lu(k,306) * lu(k,518)
         lu(k,542) = lu(k,542) - lu(k,296) * lu(k,541)
         lu(k,543) = lu(k,543) - lu(k,297) * lu(k,541)
         lu(k,544) = lu(k,544) - lu(k,298) * lu(k,541)
         lu(k,545) = lu(k,545) - lu(k,299) * lu(k,541)
         lu(k,546) = lu(k,546) - lu(k,300) * lu(k,541)
         lu(k,547) = lu(k,547) - lu(k,301) * lu(k,541)
         lu(k,548) = lu(k,548) - lu(k,302) * lu(k,541)
         lu(k,549) = lu(k,549) - lu(k,303) * lu(k,541)
         lu(k,550) = lu(k,550) - lu(k,304) * lu(k,541)
         lu(k,551) = lu(k,551) - lu(k,305) * lu(k,541)
         lu(k,552) = lu(k,552) - lu(k,306) * lu(k,541)
         lu(k,563) = lu(k,563) - lu(k,296) * lu(k,562)
         lu(k,564) = lu(k,564) - lu(k,297) * lu(k,562)
         lu(k,565) = lu(k,565) - lu(k,298) * lu(k,562)
         lu(k,566) = lu(k,566) - lu(k,299) * lu(k,562)
         lu(k,567) = lu(k,567) - lu(k,300) * lu(k,562)
         lu(k,568) = lu(k,568) - lu(k,301) * lu(k,562)
         lu(k,569) = lu(k,569) - lu(k,302) * lu(k,562)
         lu(k,570) = lu(k,570) - lu(k,303) * lu(k,562)
         lu(k,571) = lu(k,571) - lu(k,304) * lu(k,562)
         lu(k,572) = lu(k,572) - lu(k,305) * lu(k,562)
         lu(k,573) = lu(k,573) - lu(k,306) * lu(k,562)

         lu(k,332) = 1. / lu(k,332)
         lu(k,333) = lu(k,333) * lu(k,332)
         lu(k,334) = lu(k,334) * lu(k,332)
         lu(k,335) = lu(k,335) * lu(k,332)
         lu(k,336) = lu(k,336) * lu(k,332)
         lu(k,337) = lu(k,337) * lu(k,332)
         lu(k,338) = lu(k,338) * lu(k,332)
         lu(k,339) = lu(k,339) * lu(k,332)
         lu(k,340) = lu(k,340) * lu(k,332)
         lu(k,341) = lu(k,341) * lu(k,332)
         lu(k,342) = lu(k,342) * lu(k,332)
         lu(k,368) = lu(k,368) - lu(k,333) * lu(k,367)
         lu(k,369) = lu(k,369) - lu(k,334) * lu(k,367)
         lu(k,370) = lu(k,370) - lu(k,335) * lu(k,367)
         lu(k,371) = lu(k,371) - lu(k,336) * lu(k,367)
         lu(k,372) = lu(k,372) - lu(k,337) * lu(k,367)
         lu(k,373) = lu(k,373) - lu(k,338) * lu(k,367)
         lu(k,374) = lu(k,374) - lu(k,339) * lu(k,367)
         lu(k,375) = lu(k,375) - lu(k,340) * lu(k,367)
         lu(k,376) = lu(k,376) - lu(k,341) * lu(k,367)
         lu(k,377) = lu(k,377) - lu(k,342) * lu(k,367)
         lu(k,395) = lu(k,395) - lu(k,333) * lu(k,394)
         lu(k,396) = lu(k,396) - lu(k,334) * lu(k,394)
         lu(k,397) = lu(k,397) - lu(k,335) * lu(k,394)
         lu(k,398) = lu(k,398) - lu(k,336) * lu(k,394)
         lu(k,399) = lu(k,399) - lu(k,337) * lu(k,394)
         lu(k,400) = lu(k,400) - lu(k,338) * lu(k,394)
         lu(k,401) = lu(k,401) - lu(k,339) * lu(k,394)
         lu(k,402) = lu(k,402) - lu(k,340) * lu(k,394)
         lu(k,403) = lu(k,403) - lu(k,341) * lu(k,394)
         lu(k,404) = lu(k,404) - lu(k,342) * lu(k,394)
         lu(k,414) = lu(k,414) - lu(k,333) * lu(k,413)
         lu(k,415) = lu(k,415) - lu(k,334) * lu(k,413)
         lu(k,416) = lu(k,416) - lu(k,335) * lu(k,413)
         lu(k,417) = lu(k,417) - lu(k,336) * lu(k,413)
         lu(k,418) = lu(k,418) - lu(k,337) * lu(k,413)
         lu(k,419) = lu(k,419) - lu(k,338) * lu(k,413)
         lu(k,420) = lu(k,420) - lu(k,339) * lu(k,413)
         lu(k,421) = lu(k,421) - lu(k,340) * lu(k,413)
         lu(k,422) = lu(k,422) - lu(k,341) * lu(k,413)
         lu(k,423) = lu(k,423) - lu(k,342) * lu(k,413)
         lu(k,443) = lu(k,443) - lu(k,333) * lu(k,442)
         lu(k,444) = lu(k,444) - lu(k,334) * lu(k,442)
         lu(k,445) = lu(k,445) - lu(k,335) * lu(k,442)
         lu(k,446) = lu(k,446) - lu(k,336) * lu(k,442)
         lu(k,447) = lu(k,447) - lu(k,337) * lu(k,442)
         lu(k,448) = lu(k,448) - lu(k,338) * lu(k,442)
         lu(k,449) = lu(k,449) - lu(k,339) * lu(k,442)
         lu(k,450) = lu(k,450) - lu(k,340) * lu(k,442)
         lu(k,451) = lu(k,451) - lu(k,341) * lu(k,442)
         lu(k,452) = lu(k,452) - lu(k,342) * lu(k,442)
         lu(k,470) = lu(k,470) - lu(k,333) * lu(k,469)
         lu(k,471) = lu(k,471) - lu(k,334) * lu(k,469)
         lu(k,472) = lu(k,472) - lu(k,335) * lu(k,469)
         lu(k,473) = lu(k,473) - lu(k,336) * lu(k,469)
         lu(k,474) = lu(k,474) - lu(k,337) * lu(k,469)
         lu(k,475) = lu(k,475) - lu(k,338) * lu(k,469)
         lu(k,476) = lu(k,476) - lu(k,339) * lu(k,469)
         lu(k,477) = lu(k,477) - lu(k,340) * lu(k,469)
         lu(k,478) = lu(k,478) - lu(k,341) * lu(k,469)
         lu(k,479) = lu(k,479) - lu(k,342) * lu(k,469)
         lu(k,485) = lu(k,485) - lu(k,333) * lu(k,484)
         lu(k,486) = lu(k,486) - lu(k,334) * lu(k,484)
         lu(k,487) = lu(k,487) - lu(k,335) * lu(k,484)
         lu(k,488) = lu(k,488) - lu(k,336) * lu(k,484)
         lu(k,489) = lu(k,489) - lu(k,337) * lu(k,484)
         lu(k,490) = lu(k,490) - lu(k,338) * lu(k,484)
         lu(k,491) = lu(k,491) - lu(k,339) * lu(k,484)
         lu(k,492) = lu(k,492) - lu(k,340) * lu(k,484)
         lu(k,493) = lu(k,493) - lu(k,341) * lu(k,484)
         lu(k,494) = lu(k,494) - lu(k,342) * lu(k,484)
         lu(k,504) = lu(k,504) - lu(k,333) * lu(k,503)
         lu(k,505) = lu(k,505) - lu(k,334) * lu(k,503)
         lu(k,506) = lu(k,506) - lu(k,335) * lu(k,503)
         lu(k,507) = lu(k,507) - lu(k,336) * lu(k,503)
         lu(k,508) = lu(k,508) - lu(k,337) * lu(k,503)
         lu(k,509) = lu(k,509) - lu(k,338) * lu(k,503)
         lu(k,510) = lu(k,510) - lu(k,339) * lu(k,503)
         lu(k,511) = lu(k,511) - lu(k,340) * lu(k,503)
         lu(k,512) = lu(k,512) - lu(k,341) * lu(k,503)
         lu(k,513) = lu(k,513) - lu(k,342) * lu(k,503)
         lu(k,520) = lu(k,520) - lu(k,333) * lu(k,519)
         lu(k,521) = lu(k,521) - lu(k,334) * lu(k,519)
         lu(k,522) = lu(k,522) - lu(k,335) * lu(k,519)
         lu(k,523) = lu(k,523) - lu(k,336) * lu(k,519)
         lu(k,524) = lu(k,524) - lu(k,337) * lu(k,519)
         lu(k,525) = lu(k,525) - lu(k,338) * lu(k,519)
         lu(k,526) = lu(k,526) - lu(k,339) * lu(k,519)
         lu(k,527) = lu(k,527) - lu(k,340) * lu(k,519)
         lu(k,528) = lu(k,528) - lu(k,341) * lu(k,519)
         lu(k,529) = lu(k,529) - lu(k,342) * lu(k,519)
         lu(k,543) = lu(k,543) - lu(k,333) * lu(k,542)
         lu(k,544) = lu(k,544) - lu(k,334) * lu(k,542)
         lu(k,545) = lu(k,545) - lu(k,335) * lu(k,542)
         lu(k,546) = lu(k,546) - lu(k,336) * lu(k,542)
         lu(k,547) = lu(k,547) - lu(k,337) * lu(k,542)
         lu(k,548) = lu(k,548) - lu(k,338) * lu(k,542)
         lu(k,549) = lu(k,549) - lu(k,339) * lu(k,542)
         lu(k,550) = lu(k,550) - lu(k,340) * lu(k,542)
         lu(k,551) = lu(k,551) - lu(k,341) * lu(k,542)
         lu(k,552) = lu(k,552) - lu(k,342) * lu(k,542)
         lu(k,564) = lu(k,564) - lu(k,333) * lu(k,563)
         lu(k,565) = lu(k,565) - lu(k,334) * lu(k,563)
         lu(k,566) = lu(k,566) - lu(k,335) * lu(k,563)
         lu(k,567) = lu(k,567) - lu(k,336) * lu(k,563)
         lu(k,568) = lu(k,568) - lu(k,337) * lu(k,563)
         lu(k,569) = lu(k,569) - lu(k,338) * lu(k,563)
         lu(k,570) = lu(k,570) - lu(k,339) * lu(k,563)
         lu(k,571) = lu(k,571) - lu(k,340) * lu(k,563)
         lu(k,572) = lu(k,572) - lu(k,341) * lu(k,563)
         lu(k,573) = lu(k,573) - lu(k,342) * lu(k,563)

         lu(k,368) = 1. / lu(k,368)
         lu(k,369) = lu(k,369) * lu(k,368)
         lu(k,370) = lu(k,370) * lu(k,368)
         lu(k,371) = lu(k,371) * lu(k,368)
         lu(k,372) = lu(k,372) * lu(k,368)
         lu(k,373) = lu(k,373) * lu(k,368)
         lu(k,374) = lu(k,374) * lu(k,368)
         lu(k,375) = lu(k,375) * lu(k,368)
         lu(k,376) = lu(k,376) * lu(k,368)
         lu(k,377) = lu(k,377) * lu(k,368)
         lu(k,396) = lu(k,396) - lu(k,369) * lu(k,395)
         lu(k,397) = lu(k,397) - lu(k,370) * lu(k,395)
         lu(k,398) = lu(k,398) - lu(k,371) * lu(k,395)
         lu(k,399) = lu(k,399) - lu(k,372) * lu(k,395)
         lu(k,400) = lu(k,400) - lu(k,373) * lu(k,395)
         lu(k,401) = lu(k,401) - lu(k,374) * lu(k,395)
         lu(k,402) = lu(k,402) - lu(k,375) * lu(k,395)
         lu(k,403) = lu(k,403) - lu(k,376) * lu(k,395)
         lu(k,404) = lu(k,404) - lu(k,377) * lu(k,395)
         lu(k,415) = lu(k,415) - lu(k,369) * lu(k,414)
         lu(k,416) = lu(k,416) - lu(k,370) * lu(k,414)
         lu(k,417) = lu(k,417) - lu(k,371) * lu(k,414)
         lu(k,418) = lu(k,418) - lu(k,372) * lu(k,414)
         lu(k,419) = lu(k,419) - lu(k,373) * lu(k,414)
         lu(k,420) = lu(k,420) - lu(k,374) * lu(k,414)
         lu(k,421) = lu(k,421) - lu(k,375) * lu(k,414)
         lu(k,422) = lu(k,422) - lu(k,376) * lu(k,414)
         lu(k,423) = lu(k,423) - lu(k,377) * lu(k,414)
         lu(k,444) = lu(k,444) - lu(k,369) * lu(k,443)
         lu(k,445) = lu(k,445) - lu(k,370) * lu(k,443)
         lu(k,446) = lu(k,446) - lu(k,371) * lu(k,443)
         lu(k,447) = lu(k,447) - lu(k,372) * lu(k,443)
         lu(k,448) = lu(k,448) - lu(k,373) * lu(k,443)
         lu(k,449) = lu(k,449) - lu(k,374) * lu(k,443)
         lu(k,450) = lu(k,450) - lu(k,375) * lu(k,443)
         lu(k,451) = lu(k,451) - lu(k,376) * lu(k,443)
         lu(k,452) = lu(k,452) - lu(k,377) * lu(k,443)
         lu(k,471) = lu(k,471) - lu(k,369) * lu(k,470)
         lu(k,472) = lu(k,472) - lu(k,370) * lu(k,470)
         lu(k,473) = lu(k,473) - lu(k,371) * lu(k,470)
         lu(k,474) = lu(k,474) - lu(k,372) * lu(k,470)
         lu(k,475) = lu(k,475) - lu(k,373) * lu(k,470)
         lu(k,476) = lu(k,476) - lu(k,374) * lu(k,470)
         lu(k,477) = lu(k,477) - lu(k,375) * lu(k,470)
         lu(k,478) = lu(k,478) - lu(k,376) * lu(k,470)
         lu(k,479) = lu(k,479) - lu(k,377) * lu(k,470)
         lu(k,486) = lu(k,486) - lu(k,369) * lu(k,485)
         lu(k,487) = lu(k,487) - lu(k,370) * lu(k,485)
         lu(k,488) = lu(k,488) - lu(k,371) * lu(k,485)
         lu(k,489) = lu(k,489) - lu(k,372) * lu(k,485)
         lu(k,490) = lu(k,490) - lu(k,373) * lu(k,485)
         lu(k,491) = lu(k,491) - lu(k,374) * lu(k,485)
         lu(k,492) = lu(k,492) - lu(k,375) * lu(k,485)
         lu(k,493) = lu(k,493) - lu(k,376) * lu(k,485)
         lu(k,494) = lu(k,494) - lu(k,377) * lu(k,485)
         lu(k,505) = lu(k,505) - lu(k,369) * lu(k,504)
         lu(k,506) = lu(k,506) - lu(k,370) * lu(k,504)
         lu(k,507) = lu(k,507) - lu(k,371) * lu(k,504)
         lu(k,508) = lu(k,508) - lu(k,372) * lu(k,504)
         lu(k,509) = lu(k,509) - lu(k,373) * lu(k,504)
         lu(k,510) = lu(k,510) - lu(k,374) * lu(k,504)
         lu(k,511) = lu(k,511) - lu(k,375) * lu(k,504)
         lu(k,512) = lu(k,512) - lu(k,376) * lu(k,504)
         lu(k,513) = lu(k,513) - lu(k,377) * lu(k,504)
         lu(k,521) = lu(k,521) - lu(k,369) * lu(k,520)
         lu(k,522) = lu(k,522) - lu(k,370) * lu(k,520)
         lu(k,523) = lu(k,523) - lu(k,371) * lu(k,520)
         lu(k,524) = lu(k,524) - lu(k,372) * lu(k,520)
         lu(k,525) = lu(k,525) - lu(k,373) * lu(k,520)
         lu(k,526) = lu(k,526) - lu(k,374) * lu(k,520)
         lu(k,527) = lu(k,527) - lu(k,375) * lu(k,520)
         lu(k,528) = lu(k,528) - lu(k,376) * lu(k,520)
         lu(k,529) = lu(k,529) - lu(k,377) * lu(k,520)
         lu(k,544) = lu(k,544) - lu(k,369) * lu(k,543)
         lu(k,545) = lu(k,545) - lu(k,370) * lu(k,543)
         lu(k,546) = lu(k,546) - lu(k,371) * lu(k,543)
         lu(k,547) = lu(k,547) - lu(k,372) * lu(k,543)
         lu(k,548) = lu(k,548) - lu(k,373) * lu(k,543)
         lu(k,549) = lu(k,549) - lu(k,374) * lu(k,543)
         lu(k,550) = lu(k,550) - lu(k,375) * lu(k,543)
         lu(k,551) = lu(k,551) - lu(k,376) * lu(k,543)
         lu(k,552) = lu(k,552) - lu(k,377) * lu(k,543)
         lu(k,565) = lu(k,565) - lu(k,369) * lu(k,564)
         lu(k,566) = lu(k,566) - lu(k,370) * lu(k,564)
         lu(k,567) = lu(k,567) - lu(k,371) * lu(k,564)
         lu(k,568) = lu(k,568) - lu(k,372) * lu(k,564)
         lu(k,569) = lu(k,569) - lu(k,373) * lu(k,564)
         lu(k,570) = lu(k,570) - lu(k,374) * lu(k,564)
         lu(k,571) = lu(k,571) - lu(k,375) * lu(k,564)
         lu(k,572) = lu(k,572) - lu(k,376) * lu(k,564)
         lu(k,573) = lu(k,573) - lu(k,377) * lu(k,564)

         lu(k,396) = 1. / lu(k,396)
         lu(k,397) = lu(k,397) * lu(k,396)
         lu(k,398) = lu(k,398) * lu(k,396)
         lu(k,399) = lu(k,399) * lu(k,396)
         lu(k,400) = lu(k,400) * lu(k,396)
         lu(k,401) = lu(k,401) * lu(k,396)
         lu(k,402) = lu(k,402) * lu(k,396)
         lu(k,403) = lu(k,403) * lu(k,396)
         lu(k,404) = lu(k,404) * lu(k,396)
         lu(k,416) = lu(k,416) - lu(k,397) * lu(k,415)
         lu(k,417) = lu(k,417) - lu(k,398) * lu(k,415)
         lu(k,418) = lu(k,418) - lu(k,399) * lu(k,415)
         lu(k,419) = lu(k,419) - lu(k,400) * lu(k,415)
         lu(k,420) = lu(k,420) - lu(k,401) * lu(k,415)
         lu(k,421) = lu(k,421) - lu(k,402) * lu(k,415)
         lu(k,422) = lu(k,422) - lu(k,403) * lu(k,415)
         lu(k,423) = lu(k,423) - lu(k,404) * lu(k,415)
         lu(k,445) = lu(k,445) - lu(k,397) * lu(k,444)
         lu(k,446) = lu(k,446) - lu(k,398) * lu(k,444)
         lu(k,447) = lu(k,447) - lu(k,399) * lu(k,444)
         lu(k,448) = lu(k,448) - lu(k,400) * lu(k,444)
         lu(k,449) = lu(k,449) - lu(k,401) * lu(k,444)
         lu(k,450) = lu(k,450) - lu(k,402) * lu(k,444)
         lu(k,451) = lu(k,451) - lu(k,403) * lu(k,444)
         lu(k,452) = lu(k,452) - lu(k,404) * lu(k,444)
         lu(k,472) = lu(k,472) - lu(k,397) * lu(k,471)
         lu(k,473) = lu(k,473) - lu(k,398) * lu(k,471)
         lu(k,474) = lu(k,474) - lu(k,399) * lu(k,471)
         lu(k,475) = lu(k,475) - lu(k,400) * lu(k,471)
         lu(k,476) = lu(k,476) - lu(k,401) * lu(k,471)
         lu(k,477) = lu(k,477) - lu(k,402) * lu(k,471)
         lu(k,478) = lu(k,478) - lu(k,403) * lu(k,471)
         lu(k,479) = lu(k,479) - lu(k,404) * lu(k,471)
         lu(k,487) = lu(k,487) - lu(k,397) * lu(k,486)
         lu(k,488) = lu(k,488) - lu(k,398) * lu(k,486)
         lu(k,489) = lu(k,489) - lu(k,399) * lu(k,486)
         lu(k,490) = lu(k,490) - lu(k,400) * lu(k,486)
         lu(k,491) = lu(k,491) - lu(k,401) * lu(k,486)
         lu(k,492) = lu(k,492) - lu(k,402) * lu(k,486)
         lu(k,493) = lu(k,493) - lu(k,403) * lu(k,486)
         lu(k,494) = lu(k,494) - lu(k,404) * lu(k,486)
         lu(k,506) = lu(k,506) - lu(k,397) * lu(k,505)
         lu(k,507) = lu(k,507) - lu(k,398) * lu(k,505)
         lu(k,508) = lu(k,508) - lu(k,399) * lu(k,505)
         lu(k,509) = lu(k,509) - lu(k,400) * lu(k,505)
         lu(k,510) = lu(k,510) - lu(k,401) * lu(k,505)
         lu(k,511) = lu(k,511) - lu(k,402) * lu(k,505)
         lu(k,512) = lu(k,512) - lu(k,403) * lu(k,505)
         lu(k,513) = lu(k,513) - lu(k,404) * lu(k,505)
         lu(k,522) = lu(k,522) - lu(k,397) * lu(k,521)
         lu(k,523) = lu(k,523) - lu(k,398) * lu(k,521)
         lu(k,524) = lu(k,524) - lu(k,399) * lu(k,521)
         lu(k,525) = lu(k,525) - lu(k,400) * lu(k,521)
         lu(k,526) = lu(k,526) - lu(k,401) * lu(k,521)
         lu(k,527) = lu(k,527) - lu(k,402) * lu(k,521)
         lu(k,528) = lu(k,528) - lu(k,403) * lu(k,521)
         lu(k,529) = lu(k,529) - lu(k,404) * lu(k,521)
         lu(k,545) = lu(k,545) - lu(k,397) * lu(k,544)
         lu(k,546) = lu(k,546) - lu(k,398) * lu(k,544)
         lu(k,547) = lu(k,547) - lu(k,399) * lu(k,544)
         lu(k,548) = lu(k,548) - lu(k,400) * lu(k,544)
         lu(k,549) = lu(k,549) - lu(k,401) * lu(k,544)
         lu(k,550) = lu(k,550) - lu(k,402) * lu(k,544)
         lu(k,551) = lu(k,551) - lu(k,403) * lu(k,544)
         lu(k,552) = lu(k,552) - lu(k,404) * lu(k,544)
         lu(k,566) = lu(k,566) - lu(k,397) * lu(k,565)
         lu(k,567) = lu(k,567) - lu(k,398) * lu(k,565)
         lu(k,568) = lu(k,568) - lu(k,399) * lu(k,565)
         lu(k,569) = lu(k,569) - lu(k,400) * lu(k,565)
         lu(k,570) = lu(k,570) - lu(k,401) * lu(k,565)
         lu(k,571) = lu(k,571) - lu(k,402) * lu(k,565)
         lu(k,572) = lu(k,572) - lu(k,403) * lu(k,565)
         lu(k,573) = lu(k,573) - lu(k,404) * lu(k,565)

         lu(k,416) = 1. / lu(k,416)
         lu(k,417) = lu(k,417) * lu(k,416)
         lu(k,418) = lu(k,418) * lu(k,416)
         lu(k,419) = lu(k,419) * lu(k,416)
         lu(k,420) = lu(k,420) * lu(k,416)
         lu(k,421) = lu(k,421) * lu(k,416)
         lu(k,422) = lu(k,422) * lu(k,416)
         lu(k,423) = lu(k,423) * lu(k,416)
         lu(k,446) = lu(k,446) - lu(k,417) * lu(k,445)
         lu(k,447) = lu(k,447) - lu(k,418) * lu(k,445)
         lu(k,448) = lu(k,448) - lu(k,419) * lu(k,445)
         lu(k,449) = lu(k,449) - lu(k,420) * lu(k,445)
         lu(k,450) = lu(k,450) - lu(k,421) * lu(k,445)
         lu(k,451) = lu(k,451) - lu(k,422) * lu(k,445)
         lu(k,452) = lu(k,452) - lu(k,423) * lu(k,445)
         lu(k,473) = lu(k,473) - lu(k,417) * lu(k,472)
         lu(k,474) = lu(k,474) - lu(k,418) * lu(k,472)
         lu(k,475) = lu(k,475) - lu(k,419) * lu(k,472)
         lu(k,476) = lu(k,476) - lu(k,420) * lu(k,472)
         lu(k,477) = lu(k,477) - lu(k,421) * lu(k,472)
         lu(k,478) = lu(k,478) - lu(k,422) * lu(k,472)
         lu(k,479) = lu(k,479) - lu(k,423) * lu(k,472)
         lu(k,488) = lu(k,488) - lu(k,417) * lu(k,487)
         lu(k,489) = lu(k,489) - lu(k,418) * lu(k,487)
         lu(k,490) = lu(k,490) - lu(k,419) * lu(k,487)
         lu(k,491) = lu(k,491) - lu(k,420) * lu(k,487)
         lu(k,492) = lu(k,492) - lu(k,421) * lu(k,487)
         lu(k,493) = lu(k,493) - lu(k,422) * lu(k,487)
         lu(k,494) = lu(k,494) - lu(k,423) * lu(k,487)
         lu(k,507) = lu(k,507) - lu(k,417) * lu(k,506)
         lu(k,508) = lu(k,508) - lu(k,418) * lu(k,506)
         lu(k,509) = lu(k,509) - lu(k,419) * lu(k,506)
         lu(k,510) = lu(k,510) - lu(k,420) * lu(k,506)
         lu(k,511) = lu(k,511) - lu(k,421) * lu(k,506)
         lu(k,512) = lu(k,512) - lu(k,422) * lu(k,506)
         lu(k,513) = lu(k,513) - lu(k,423) * lu(k,506)
         lu(k,523) = lu(k,523) - lu(k,417) * lu(k,522)
         lu(k,524) = lu(k,524) - lu(k,418) * lu(k,522)
         lu(k,525) = lu(k,525) - lu(k,419) * lu(k,522)
         lu(k,526) = lu(k,526) - lu(k,420) * lu(k,522)
         lu(k,527) = lu(k,527) - lu(k,421) * lu(k,522)
         lu(k,528) = lu(k,528) - lu(k,422) * lu(k,522)
         lu(k,529) = lu(k,529) - lu(k,423) * lu(k,522)
         lu(k,546) = lu(k,546) - lu(k,417) * lu(k,545)
         lu(k,547) = lu(k,547) - lu(k,418) * lu(k,545)
         lu(k,548) = lu(k,548) - lu(k,419) * lu(k,545)
         lu(k,549) = lu(k,549) - lu(k,420) * lu(k,545)
         lu(k,550) = lu(k,550) - lu(k,421) * lu(k,545)
         lu(k,551) = lu(k,551) - lu(k,422) * lu(k,545)
         lu(k,552) = lu(k,552) - lu(k,423) * lu(k,545)
         lu(k,567) = lu(k,567) - lu(k,417) * lu(k,566)
         lu(k,568) = lu(k,568) - lu(k,418) * lu(k,566)
         lu(k,569) = lu(k,569) - lu(k,419) * lu(k,566)
         lu(k,570) = lu(k,570) - lu(k,420) * lu(k,566)
         lu(k,571) = lu(k,571) - lu(k,421) * lu(k,566)
         lu(k,572) = lu(k,572) - lu(k,422) * lu(k,566)
         lu(k,573) = lu(k,573) - lu(k,423) * lu(k,566)

         lu(k,446) = 1. / lu(k,446)
         lu(k,447) = lu(k,447) * lu(k,446)
         lu(k,448) = lu(k,448) * lu(k,446)
         lu(k,449) = lu(k,449) * lu(k,446)
         lu(k,450) = lu(k,450) * lu(k,446)
         lu(k,451) = lu(k,451) * lu(k,446)
         lu(k,452) = lu(k,452) * lu(k,446)
         lu(k,474) = lu(k,474) - lu(k,447) * lu(k,473)
         lu(k,475) = lu(k,475) - lu(k,448) * lu(k,473)
         lu(k,476) = lu(k,476) - lu(k,449) * lu(k,473)
         lu(k,477) = lu(k,477) - lu(k,450) * lu(k,473)
         lu(k,478) = lu(k,478) - lu(k,451) * lu(k,473)
         lu(k,479) = lu(k,479) - lu(k,452) * lu(k,473)
         lu(k,489) = lu(k,489) - lu(k,447) * lu(k,488)
         lu(k,490) = lu(k,490) - lu(k,448) * lu(k,488)
         lu(k,491) = lu(k,491) - lu(k,449) * lu(k,488)
         lu(k,492) = lu(k,492) - lu(k,450) * lu(k,488)
         lu(k,493) = lu(k,493) - lu(k,451) * lu(k,488)
         lu(k,494) = lu(k,494) - lu(k,452) * lu(k,488)
         lu(k,508) = lu(k,508) - lu(k,447) * lu(k,507)
         lu(k,509) = lu(k,509) - lu(k,448) * lu(k,507)
         lu(k,510) = lu(k,510) - lu(k,449) * lu(k,507)
         lu(k,511) = lu(k,511) - lu(k,450) * lu(k,507)
         lu(k,512) = lu(k,512) - lu(k,451) * lu(k,507)
         lu(k,513) = lu(k,513) - lu(k,452) * lu(k,507)
         lu(k,524) = lu(k,524) - lu(k,447) * lu(k,523)
         lu(k,525) = lu(k,525) - lu(k,448) * lu(k,523)
         lu(k,526) = lu(k,526) - lu(k,449) * lu(k,523)
         lu(k,527) = lu(k,527) - lu(k,450) * lu(k,523)
         lu(k,528) = lu(k,528) - lu(k,451) * lu(k,523)
         lu(k,529) = lu(k,529) - lu(k,452) * lu(k,523)
         lu(k,547) = lu(k,547) - lu(k,447) * lu(k,546)
         lu(k,548) = lu(k,548) - lu(k,448) * lu(k,546)
         lu(k,549) = lu(k,549) - lu(k,449) * lu(k,546)
         lu(k,550) = lu(k,550) - lu(k,450) * lu(k,546)
         lu(k,551) = lu(k,551) - lu(k,451) * lu(k,546)
         lu(k,552) = lu(k,552) - lu(k,452) * lu(k,546)
         lu(k,568) = lu(k,568) - lu(k,447) * lu(k,567)
         lu(k,569) = lu(k,569) - lu(k,448) * lu(k,567)
         lu(k,570) = lu(k,570) - lu(k,449) * lu(k,567)
         lu(k,571) = lu(k,571) - lu(k,450) * lu(k,567)
         lu(k,572) = lu(k,572) - lu(k,451) * lu(k,567)
         lu(k,573) = lu(k,573) - lu(k,452) * lu(k,567)

         lu(k,474) = 1. / lu(k,474)
         lu(k,475) = lu(k,475) * lu(k,474)
         lu(k,476) = lu(k,476) * lu(k,474)
         lu(k,477) = lu(k,477) * lu(k,474)
         lu(k,478) = lu(k,478) * lu(k,474)
         lu(k,479) = lu(k,479) * lu(k,474)
         lu(k,490) = lu(k,490) - lu(k,475) * lu(k,489)
         lu(k,491) = lu(k,491) - lu(k,476) * lu(k,489)
         lu(k,492) = lu(k,492) - lu(k,477) * lu(k,489)
         lu(k,493) = lu(k,493) - lu(k,478) * lu(k,489)
         lu(k,494) = lu(k,494) - lu(k,479) * lu(k,489)
         lu(k,509) = lu(k,509) - lu(k,475) * lu(k,508)
         lu(k,510) = lu(k,510) - lu(k,476) * lu(k,508)
         lu(k,511) = lu(k,511) - lu(k,477) * lu(k,508)
         lu(k,512) = lu(k,512) - lu(k,478) * lu(k,508)
         lu(k,513) = lu(k,513) - lu(k,479) * lu(k,508)
         lu(k,525) = lu(k,525) - lu(k,475) * lu(k,524)
         lu(k,526) = lu(k,526) - lu(k,476) * lu(k,524)
         lu(k,527) = lu(k,527) - lu(k,477) * lu(k,524)
         lu(k,528) = lu(k,528) - lu(k,478) * lu(k,524)
         lu(k,529) = lu(k,529) - lu(k,479) * lu(k,524)
         lu(k,548) = lu(k,548) - lu(k,475) * lu(k,547)
         lu(k,549) = lu(k,549) - lu(k,476) * lu(k,547)
         lu(k,550) = lu(k,550) - lu(k,477) * lu(k,547)
         lu(k,551) = lu(k,551) - lu(k,478) * lu(k,547)
         lu(k,552) = lu(k,552) - lu(k,479) * lu(k,547)
         lu(k,569) = lu(k,569) - lu(k,475) * lu(k,568)
         lu(k,570) = lu(k,570) - lu(k,476) * lu(k,568)
         lu(k,571) = lu(k,571) - lu(k,477) * lu(k,568)
         lu(k,572) = lu(k,572) - lu(k,478) * lu(k,568)
         lu(k,573) = lu(k,573) - lu(k,479) * lu(k,568)

         lu(k,490) = 1. / lu(k,490)
         lu(k,491) = lu(k,491) * lu(k,490)
         lu(k,492) = lu(k,492) * lu(k,490)
         lu(k,493) = lu(k,493) * lu(k,490)
         lu(k,494) = lu(k,494) * lu(k,490)
         lu(k,510) = lu(k,510) - lu(k,491) * lu(k,509)
         lu(k,511) = lu(k,511) - lu(k,492) * lu(k,509)
         lu(k,512) = lu(k,512) - lu(k,493) * lu(k,509)
         lu(k,513) = lu(k,513) - lu(k,494) * lu(k,509)
         lu(k,526) = lu(k,526) - lu(k,491) * lu(k,525)
         lu(k,527) = lu(k,527) - lu(k,492) * lu(k,525)
         lu(k,528) = lu(k,528) - lu(k,493) * lu(k,525)
         lu(k,529) = lu(k,529) - lu(k,494) * lu(k,525)
         lu(k,549) = lu(k,549) - lu(k,491) * lu(k,548)
         lu(k,550) = lu(k,550) - lu(k,492) * lu(k,548)
         lu(k,551) = lu(k,551) - lu(k,493) * lu(k,548)
         lu(k,552) = lu(k,552) - lu(k,494) * lu(k,548)
         lu(k,570) = lu(k,570) - lu(k,491) * lu(k,569)
         lu(k,571) = lu(k,571) - lu(k,492) * lu(k,569)
         lu(k,572) = lu(k,572) - lu(k,493) * lu(k,569)
         lu(k,573) = lu(k,573) - lu(k,494) * lu(k,569)

         lu(k,510) = 1. / lu(k,510)
         lu(k,511) = lu(k,511) * lu(k,510)
         lu(k,512) = lu(k,512) * lu(k,510)
         lu(k,513) = lu(k,513) * lu(k,510)
         lu(k,527) = lu(k,527) - lu(k,511) * lu(k,526)
         lu(k,528) = lu(k,528) - lu(k,512) * lu(k,526)
         lu(k,529) = lu(k,529) - lu(k,513) * lu(k,526)
         lu(k,550) = lu(k,550) - lu(k,511) * lu(k,549)
         lu(k,551) = lu(k,551) - lu(k,512) * lu(k,549)
         lu(k,552) = lu(k,552) - lu(k,513) * lu(k,549)
         lu(k,571) = lu(k,571) - lu(k,511) * lu(k,570)
         lu(k,572) = lu(k,572) - lu(k,512) * lu(k,570)
         lu(k,573) = lu(k,573) - lu(k,513) * lu(k,570)

         lu(k,527) = 1. / lu(k,527)
         lu(k,528) = lu(k,528) * lu(k,527)
         lu(k,529) = lu(k,529) * lu(k,527)
         lu(k,551) = lu(k,551) - lu(k,528) * lu(k,550)
         lu(k,552) = lu(k,552) - lu(k,529) * lu(k,550)
         lu(k,572) = lu(k,572) - lu(k,528) * lu(k,571)
         lu(k,573) = lu(k,573) - lu(k,529) * lu(k,571)

         lu(k,551) = 1. / lu(k,551)
         lu(k,552) = lu(k,552) * lu(k,551)
         lu(k,573) = lu(k,573) - lu(k,552) * lu(k,572)

         lu(k,573) = 1. / lu(k,573)

         end if
      end do

      end subroutine LU_FAC

      subroutine LU_SLV( lu, b, kl, ku, converged )

      implicit none

!-----------------------------------------------------------------------
!       ... Dummy arguments
!-----------------------------------------------------------------------
      integer, intent(in) ::   kl, ku
      real, intent(in)    ::   lu(4,573)
      real, intent(inout) ::   b(4,56)
      logical, intent(in) ::   converged(4)

!-----------------------------------------------------------------------
!       ... Local variables
!-----------------------------------------------------------------------
      integer :: k


!-----------------------------------------------------------------------
!       ... Solve L * y = b
!-----------------------------------------------------------------------
      do k = kl,ku
         if( .not. converged(k) ) then


         b(k,47) = b(k,47) - lu(k,4) * b(k,3)
         b(k,50) = b(k,50) - lu(k,5) * b(k,3)

         b(k,47) = b(k,47) - lu(k,8) * b(k,4)
         b(k,50) = b(k,50) - lu(k,9) * b(k,4)

         b(k,47) = b(k,47) - lu(k,12) * b(k,5)
         b(k,50) = b(k,50) - lu(k,13) * b(k,5)

         b(k,47) = b(k,47) - lu(k,16) * b(k,6)
         b(k,50) = b(k,50) - lu(k,17) * b(k,6)

         b(k,47) = b(k,47) - lu(k,20) * b(k,7)
         b(k,50) = b(k,50) - lu(k,21) * b(k,7)

         b(k,47) = b(k,47) - lu(k,24) * b(k,8)
         b(k,50) = b(k,50) - lu(k,25) * b(k,8)

         b(k,45) = b(k,45) - lu(k,28) * b(k,9)
         b(k,47) = b(k,47) - lu(k,29) * b(k,9)

         b(k,36) = b(k,36) - lu(k,31) * b(k,10)
         b(k,46) = b(k,46) - lu(k,32) * b(k,10)
         b(k,50) = b(k,50) - lu(k,33) * b(k,10)

         b(k,45) = b(k,45) - lu(k,36) * b(k,11)
         b(k,47) = b(k,47) - lu(k,37) * b(k,11)
         b(k,50) = b(k,50) - lu(k,38) * b(k,11)

         b(k,42) = b(k,42) - lu(k,40) * b(k,12)
         b(k,47) = b(k,47) - lu(k,41) * b(k,12)
         b(k,49) = b(k,49) - lu(k,42) * b(k,12)

         b(k,36) = b(k,36) - lu(k,44) * b(k,13)
         b(k,45) = b(k,45) - lu(k,45) * b(k,13)
         b(k,46) = b(k,46) - lu(k,46) * b(k,13)

         b(k,45) = b(k,45) - lu(k,48) * b(k,14)
         b(k,46) = b(k,46) - lu(k,49) * b(k,14)

         b(k,45) = b(k,45) - lu(k,51) * b(k,15)
         b(k,50) = b(k,50) - lu(k,52) * b(k,15)

         b(k,42) = b(k,42) - lu(k,54) * b(k,16)

         b(k,42) = b(k,42) - lu(k,57) * b(k,17)

         b(k,42) = b(k,42) - lu(k,59) * b(k,18)
         b(k,49) = b(k,49) - lu(k,60) * b(k,18)
         b(k,51) = b(k,51) - lu(k,61) * b(k,18)

         b(k,50) = b(k,50) - lu(k,63) * b(k,19)
         b(k,55) = b(k,55) - lu(k,64) * b(k,19)

         b(k,34) = b(k,34) - lu(k,66) * b(k,20)
         b(k,42) = b(k,42) - lu(k,67) * b(k,20)
         b(k,50) = b(k,50) - lu(k,68) * b(k,20)
         b(k,56) = b(k,56) - lu(k,69) * b(k,20)

         b(k,44) = b(k,44) - lu(k,71) * b(k,21)
         b(k,45) = b(k,45) - lu(k,72) * b(k,21)
         b(k,53) = b(k,53) - lu(k,73) * b(k,21)
         b(k,55) = b(k,55) - lu(k,74) * b(k,21)

         b(k,36) = b(k,36) - lu(k,77) * b(k,22)
         b(k,46) = b(k,46) - lu(k,78) * b(k,22)
         b(k,47) = b(k,47) - lu(k,79) * b(k,22)
         b(k,50) = b(k,50) - lu(k,80) * b(k,22)

         b(k,31) = b(k,31) - lu(k,84) * b(k,23)
         b(k,42) = b(k,42) - lu(k,85) * b(k,23)
         b(k,47) = b(k,47) - lu(k,86) * b(k,23)

         b(k,35) = b(k,35) - lu(k,88) * b(k,24)
         b(k,36) = b(k,36) - lu(k,89) * b(k,24)
         b(k,45) = b(k,45) - lu(k,90) * b(k,24)
         b(k,46) = b(k,46) - lu(k,91) * b(k,24)
         b(k,47) = b(k,47) - lu(k,92) * b(k,24)
         b(k,48) = b(k,48) - lu(k,93) * b(k,24)

         b(k,31) = b(k,31) - lu(k,95) * b(k,25)
         b(k,35) = b(k,35) - lu(k,96) * b(k,25)
         b(k,36) = b(k,36) - lu(k,97) * b(k,25)
         b(k,40) = b(k,40) - lu(k,98) * b(k,25)
         b(k,46) = b(k,46) - lu(k,99) * b(k,25)
         b(k,48) = b(k,48) - lu(k,100) * b(k,25)
         b(k,50) = b(k,50) - lu(k,101) * b(k,25)

         b(k,30) = b(k,30) - lu(k,104) * b(k,26)
         b(k,40) = b(k,40) - lu(k,105) * b(k,26)
         b(k,50) = b(k,50) - lu(k,106) * b(k,26)
         b(k,53) = b(k,53) - lu(k,107) * b(k,26)
         b(k,55) = b(k,55) - lu(k,108) * b(k,26)

         b(k,35) = b(k,35) - lu(k,110) * b(k,27)
         b(k,36) = b(k,36) - lu(k,111) * b(k,27)
         b(k,41) = b(k,41) - lu(k,112) * b(k,27)
         b(k,46) = b(k,46) - lu(k,113) * b(k,27)
         b(k,48) = b(k,48) - lu(k,114) * b(k,27)

         b(k,36) = b(k,36) - lu(k,116) * b(k,28)
         b(k,42) = b(k,42) - lu(k,117) * b(k,28)
         b(k,46) = b(k,46) - lu(k,118) * b(k,28)
         b(k,48) = b(k,48) - lu(k,119) * b(k,28)
         b(k,53) = b(k,53) - lu(k,120) * b(k,28)
         b(k,55) = b(k,55) - lu(k,121) * b(k,28)

         b(k,36) = b(k,36) - lu(k,123) * b(k,29)
         b(k,40) = b(k,40) - lu(k,124) * b(k,29)
         b(k,46) = b(k,46) - lu(k,125) * b(k,29)
         b(k,48) = b(k,48) - lu(k,126) * b(k,29)
         b(k,50) = b(k,50) - lu(k,127) * b(k,29)
         b(k,51) = b(k,51) - lu(k,128) * b(k,29)

         b(k,36) = b(k,36) - lu(k,130) * b(k,30)
         b(k,46) = b(k,46) - lu(k,131) * b(k,30)
         b(k,53) = b(k,53) - lu(k,132) * b(k,30)
         b(k,55) = b(k,55) - lu(k,133) * b(k,30)

         b(k,42) = b(k,42) - lu(k,136) * b(k,31)
         b(k,46) = b(k,46) - lu(k,137) * b(k,31)
         b(k,47) = b(k,47) - lu(k,138) * b(k,31)
         b(k,51) = b(k,51) - lu(k,139) * b(k,31)
         b(k,52) = b(k,52) - lu(k,140) * b(k,31)

         b(k,36) = b(k,36) - lu(k,142) * b(k,32)
         b(k,45) = b(k,45) - lu(k,143) * b(k,32)
         b(k,46) = b(k,46) - lu(k,144) * b(k,32)
         b(k,47) = b(k,47) - lu(k,145) * b(k,32)
         b(k,51) = b(k,51) - lu(k,146) * b(k,32)

         b(k,35) = b(k,35) - lu(k,148) * b(k,33)
         b(k,36) = b(k,36) - lu(k,149) * b(k,33)
         b(k,37) = b(k,37) - lu(k,150) * b(k,33)
         b(k,40) = b(k,40) - lu(k,151) * b(k,33)
         b(k,41) = b(k,41) - lu(k,152) * b(k,33)
         b(k,46) = b(k,46) - lu(k,153) * b(k,33)
         b(k,47) = b(k,47) - lu(k,154) * b(k,33)
         b(k,48) = b(k,48) - lu(k,155) * b(k,33)
         b(k,50) = b(k,50) - lu(k,156) * b(k,33)
         b(k,52) = b(k,52) - lu(k,157) * b(k,33)

         b(k,39) = b(k,39) - lu(k,159) * b(k,34)
         b(k,46) = b(k,46) - lu(k,160) * b(k,34)
         b(k,47) = b(k,47) - lu(k,161) * b(k,34)
         b(k,50) = b(k,50) - lu(k,162) * b(k,34)
         b(k,56) = b(k,56) - lu(k,163) * b(k,34)

         b(k,36) = b(k,36) - lu(k,166) * b(k,35)
         b(k,41) = b(k,41) - lu(k,167) * b(k,35)
         b(k,42) = b(k,42) - lu(k,168) * b(k,35)
         b(k,46) = b(k,46) - lu(k,169) * b(k,35)
         b(k,48) = b(k,48) - lu(k,170) * b(k,35)
         b(k,49) = b(k,49) - lu(k,171) * b(k,35)
         b(k,55) = b(k,55) - lu(k,172) * b(k,35)

         b(k,46) = b(k,46) - lu(k,174) * b(k,36)
         b(k,47) = b(k,47) - lu(k,175) * b(k,36)
         b(k,52) = b(k,52) - lu(k,176) * b(k,36)

         b(k,40) = b(k,40) - lu(k,179) * b(k,37)
         b(k,46) = b(k,46) - lu(k,180) * b(k,37)
         b(k,47) = b(k,47) - lu(k,181) * b(k,37)
         b(k,50) = b(k,50) - lu(k,182) * b(k,37)
         b(k,51) = b(k,51) - lu(k,183) * b(k,37)
         b(k,52) = b(k,52) - lu(k,184) * b(k,37)

         b(k,39) = b(k,39) - lu(k,189) * b(k,38)
         b(k,40) = b(k,40) - lu(k,190) * b(k,38)
         b(k,46) = b(k,46) - lu(k,191) * b(k,38)
         b(k,47) = b(k,47) - lu(k,192) * b(k,38)
         b(k,50) = b(k,50) - lu(k,193) * b(k,38)
         b(k,51) = b(k,51) - lu(k,194) * b(k,38)
         b(k,52) = b(k,52) - lu(k,195) * b(k,38)
         b(k,53) = b(k,53) - lu(k,196) * b(k,38)
         b(k,55) = b(k,55) - lu(k,197) * b(k,38)
         b(k,56) = b(k,56) - lu(k,198) * b(k,38)

         b(k,40) = b(k,40) - lu(k,202) * b(k,39)
         b(k,46) = b(k,46) - lu(k,203) * b(k,39)
         b(k,47) = b(k,47) - lu(k,204) * b(k,39)
         b(k,50) = b(k,50) - lu(k,205) * b(k,39)
         b(k,51) = b(k,51) - lu(k,206) * b(k,39)
         b(k,52) = b(k,52) - lu(k,207) * b(k,39)
         b(k,56) = b(k,56) - lu(k,208) * b(k,39)

         b(k,46) = b(k,46) - lu(k,217) * b(k,40)
         b(k,47) = b(k,47) - lu(k,218) * b(k,40)
         b(k,50) = b(k,50) - lu(k,219) * b(k,40)
         b(k,51) = b(k,51) - lu(k,220) * b(k,40)
         b(k,52) = b(k,52) - lu(k,221) * b(k,40)
         b(k,53) = b(k,53) - lu(k,222) * b(k,40)
         b(k,55) = b(k,55) - lu(k,223) * b(k,40)
         b(k,56) = b(k,56) - lu(k,224) * b(k,40)

         b(k,42) = b(k,42) - lu(k,232) * b(k,41)
         b(k,45) = b(k,45) - lu(k,233) * b(k,41)
         b(k,46) = b(k,46) - lu(k,234) * b(k,41)
         b(k,47) = b(k,47) - lu(k,235) * b(k,41)
         b(k,48) = b(k,48) - lu(k,236) * b(k,41)
         b(k,50) = b(k,50) - lu(k,237) * b(k,41)
         b(k,51) = b(k,51) - lu(k,238) * b(k,41)
         b(k,52) = b(k,52) - lu(k,239) * b(k,41)
         b(k,53) = b(k,53) - lu(k,240) * b(k,41)
         b(k,55) = b(k,55) - lu(k,241) * b(k,41)
         b(k,56) = b(k,56) - lu(k,242) * b(k,41)

         b(k,47) = b(k,47) - lu(k,247) * b(k,42)
         b(k,48) = b(k,48) - lu(k,248) * b(k,42)
         b(k,49) = b(k,49) - lu(k,249) * b(k,42)
         b(k,51) = b(k,51) - lu(k,250) * b(k,42)
         b(k,52) = b(k,52) - lu(k,251) * b(k,42)
         b(k,54) = b(k,54) - lu(k,252) * b(k,42)

         b(k,44) = b(k,44) - lu(k,257) * b(k,43)
         b(k,45) = b(k,45) - lu(k,258) * b(k,43)
         b(k,46) = b(k,46) - lu(k,259) * b(k,43)
         b(k,47) = b(k,47) - lu(k,260) * b(k,43)
         b(k,48) = b(k,48) - lu(k,261) * b(k,43)
         b(k,49) = b(k,49) - lu(k,262) * b(k,43)
         b(k,50) = b(k,50) - lu(k,263) * b(k,43)
         b(k,51) = b(k,51) - lu(k,264) * b(k,43)
         b(k,52) = b(k,52) - lu(k,265) * b(k,43)
         b(k,53) = b(k,53) - lu(k,266) * b(k,43)
         b(k,54) = b(k,54) - lu(k,267) * b(k,43)
         b(k,55) = b(k,55) - lu(k,268) * b(k,43)
         b(k,56) = b(k,56) - lu(k,269) * b(k,43)

         b(k,45) = b(k,45) - lu(k,276) * b(k,44)
         b(k,46) = b(k,46) - lu(k,277) * b(k,44)
         b(k,47) = b(k,47) - lu(k,278) * b(k,44)
         b(k,48) = b(k,48) - lu(k,279) * b(k,44)
         b(k,49) = b(k,49) - lu(k,280) * b(k,44)
         b(k,50) = b(k,50) - lu(k,281) * b(k,44)
         b(k,51) = b(k,51) - lu(k,282) * b(k,44)
         b(k,52) = b(k,52) - lu(k,283) * b(k,44)
         b(k,53) = b(k,53) - lu(k,284) * b(k,44)
         b(k,54) = b(k,54) - lu(k,285) * b(k,44)
         b(k,55) = b(k,55) - lu(k,286) * b(k,44)
         b(k,56) = b(k,56) - lu(k,287) * b(k,44)

         b(k,46) = b(k,46) - lu(k,296) * b(k,45)
         b(k,47) = b(k,47) - lu(k,297) * b(k,45)
         b(k,48) = b(k,48) - lu(k,298) * b(k,45)
         b(k,49) = b(k,49) - lu(k,299) * b(k,45)
         b(k,50) = b(k,50) - lu(k,300) * b(k,45)
         b(k,51) = b(k,51) - lu(k,301) * b(k,45)
         b(k,52) = b(k,52) - lu(k,302) * b(k,45)
         b(k,53) = b(k,53) - lu(k,303) * b(k,45)
         b(k,54) = b(k,54) - lu(k,304) * b(k,45)
         b(k,55) = b(k,55) - lu(k,305) * b(k,45)
         b(k,56) = b(k,56) - lu(k,306) * b(k,45)

         b(k,47) = b(k,47) - lu(k,333) * b(k,46)
         b(k,48) = b(k,48) - lu(k,334) * b(k,46)
         b(k,49) = b(k,49) - lu(k,335) * b(k,46)
         b(k,50) = b(k,50) - lu(k,336) * b(k,46)
         b(k,51) = b(k,51) - lu(k,337) * b(k,46)
         b(k,52) = b(k,52) - lu(k,338) * b(k,46)
         b(k,53) = b(k,53) - lu(k,339) * b(k,46)
         b(k,54) = b(k,54) - lu(k,340) * b(k,46)
         b(k,55) = b(k,55) - lu(k,341) * b(k,46)
         b(k,56) = b(k,56) - lu(k,342) * b(k,46)

         b(k,48) = b(k,48) - lu(k,369) * b(k,47)
         b(k,49) = b(k,49) - lu(k,370) * b(k,47)
         b(k,50) = b(k,50) - lu(k,371) * b(k,47)
         b(k,51) = b(k,51) - lu(k,372) * b(k,47)
         b(k,52) = b(k,52) - lu(k,373) * b(k,47)
         b(k,53) = b(k,53) - lu(k,374) * b(k,47)
         b(k,54) = b(k,54) - lu(k,375) * b(k,47)
         b(k,55) = b(k,55) - lu(k,376) * b(k,47)
         b(k,56) = b(k,56) - lu(k,377) * b(k,47)

         b(k,49) = b(k,49) - lu(k,397) * b(k,48)
         b(k,50) = b(k,50) - lu(k,398) * b(k,48)
         b(k,51) = b(k,51) - lu(k,399) * b(k,48)
         b(k,52) = b(k,52) - lu(k,400) * b(k,48)
         b(k,53) = b(k,53) - lu(k,401) * b(k,48)
         b(k,54) = b(k,54) - lu(k,402) * b(k,48)
         b(k,55) = b(k,55) - lu(k,403) * b(k,48)
         b(k,56) = b(k,56) - lu(k,404) * b(k,48)

         b(k,50) = b(k,50) - lu(k,417) * b(k,49)
         b(k,51) = b(k,51) - lu(k,418) * b(k,49)
         b(k,52) = b(k,52) - lu(k,419) * b(k,49)
         b(k,53) = b(k,53) - lu(k,420) * b(k,49)
         b(k,54) = b(k,54) - lu(k,421) * b(k,49)
         b(k,55) = b(k,55) - lu(k,422) * b(k,49)
         b(k,56) = b(k,56) - lu(k,423) * b(k,49)

         b(k,51) = b(k,51) - lu(k,447) * b(k,50)
         b(k,52) = b(k,52) - lu(k,448) * b(k,50)
         b(k,53) = b(k,53) - lu(k,449) * b(k,50)
         b(k,54) = b(k,54) - lu(k,450) * b(k,50)
         b(k,55) = b(k,55) - lu(k,451) * b(k,50)
         b(k,56) = b(k,56) - lu(k,452) * b(k,50)

         b(k,52) = b(k,52) - lu(k,475) * b(k,51)
         b(k,53) = b(k,53) - lu(k,476) * b(k,51)
         b(k,54) = b(k,54) - lu(k,477) * b(k,51)
         b(k,55) = b(k,55) - lu(k,478) * b(k,51)
         b(k,56) = b(k,56) - lu(k,479) * b(k,51)

         b(k,53) = b(k,53) - lu(k,491) * b(k,52)
         b(k,54) = b(k,54) - lu(k,492) * b(k,52)
         b(k,55) = b(k,55) - lu(k,493) * b(k,52)
         b(k,56) = b(k,56) - lu(k,494) * b(k,52)

         b(k,54) = b(k,54) - lu(k,511) * b(k,53)
         b(k,55) = b(k,55) - lu(k,512) * b(k,53)
         b(k,56) = b(k,56) - lu(k,513) * b(k,53)

         b(k,55) = b(k,55) - lu(k,528) * b(k,54)
         b(k,56) = b(k,56) - lu(k,529) * b(k,54)

         b(k,56) = b(k,56) - lu(k,552) * b(k,55)


!-----------------------------------------------------------------------
!       ... Solve U * x = y
!-----------------------------------------------------------------------
         b(k,56) = b(k,56) * lu(k,573)
         b(k,55) = b(k,55) - lu(k,572) * b(k,56)
         b(k,54) = b(k,54) - lu(k,571) * b(k,56)
         b(k,53) = b(k,53) - lu(k,570) * b(k,56)
         b(k,52) = b(k,52) - lu(k,569) * b(k,56)
         b(k,51) = b(k,51) - lu(k,568) * b(k,56)
         b(k,50) = b(k,50) - lu(k,567) * b(k,56)
         b(k,49) = b(k,49) - lu(k,566) * b(k,56)
         b(k,48) = b(k,48) - lu(k,565) * b(k,56)
         b(k,47) = b(k,47) - lu(k,564) * b(k,56)
         b(k,46) = b(k,46) - lu(k,563) * b(k,56)
         b(k,45) = b(k,45) - lu(k,562) * b(k,56)
         b(k,44) = b(k,44) - lu(k,561) * b(k,56)
         b(k,43) = b(k,43) - lu(k,560) * b(k,56)
         b(k,42) = b(k,42) - lu(k,559) * b(k,56)
         b(k,40) = b(k,40) - lu(k,558) * b(k,56)
         b(k,39) = b(k,39) - lu(k,557) * b(k,56)
         b(k,38) = b(k,38) - lu(k,556) * b(k,56)
         b(k,34) = b(k,34) - lu(k,555) * b(k,56)
         b(k,20) = b(k,20) - lu(k,554) * b(k,56)
         b(k,15) = b(k,15) - lu(k,553) * b(k,56)

         b(k,55) = b(k,55) * lu(k,551)
         b(k,54) = b(k,54) - lu(k,550) * b(k,55)
         b(k,53) = b(k,53) - lu(k,549) * b(k,55)
         b(k,52) = b(k,52) - lu(k,548) * b(k,55)
         b(k,51) = b(k,51) - lu(k,547) * b(k,55)
         b(k,50) = b(k,50) - lu(k,546) * b(k,55)
         b(k,49) = b(k,49) - lu(k,545) * b(k,55)
         b(k,48) = b(k,48) - lu(k,544) * b(k,55)
         b(k,47) = b(k,47) - lu(k,543) * b(k,55)
         b(k,46) = b(k,46) - lu(k,542) * b(k,55)
         b(k,45) = b(k,45) - lu(k,541) * b(k,55)
         b(k,44) = b(k,44) - lu(k,540) * b(k,55)
         b(k,42) = b(k,42) - lu(k,539) * b(k,55)
         b(k,40) = b(k,40) - lu(k,538) * b(k,55)
         b(k,39) = b(k,39) - lu(k,537) * b(k,55)
         b(k,38) = b(k,38) - lu(k,536) * b(k,55)
         b(k,36) = b(k,36) - lu(k,535) * b(k,55)
         b(k,30) = b(k,30) - lu(k,534) * b(k,55)
         b(k,28) = b(k,28) - lu(k,533) * b(k,55)
         b(k,26) = b(k,26) - lu(k,532) * b(k,55)
         b(k,21) = b(k,21) - lu(k,531) * b(k,55)
         b(k,19) = b(k,19) - lu(k,530) * b(k,55)

         b(k,54) = b(k,54) * lu(k,527)
         b(k,53) = b(k,53) - lu(k,526) * b(k,54)
         b(k,52) = b(k,52) - lu(k,525) * b(k,54)
         b(k,51) = b(k,51) - lu(k,524) * b(k,54)
         b(k,50) = b(k,50) - lu(k,523) * b(k,54)
         b(k,49) = b(k,49) - lu(k,522) * b(k,54)
         b(k,48) = b(k,48) - lu(k,521) * b(k,54)
         b(k,47) = b(k,47) - lu(k,520) * b(k,54)
         b(k,46) = b(k,46) - lu(k,519) * b(k,54)
         b(k,45) = b(k,45) - lu(k,518) * b(k,54)
         b(k,44) = b(k,44) - lu(k,517) * b(k,54)
         b(k,42) = b(k,42) - lu(k,516) * b(k,54)
         b(k,17) = b(k,17) - lu(k,515) * b(k,54)
         b(k,16) = b(k,16) - lu(k,514) * b(k,54)

         b(k,53) = b(k,53) * lu(k,510)
         b(k,52) = b(k,52) - lu(k,509) * b(k,53)
         b(k,51) = b(k,51) - lu(k,508) * b(k,53)
         b(k,50) = b(k,50) - lu(k,507) * b(k,53)
         b(k,49) = b(k,49) - lu(k,506) * b(k,53)
         b(k,48) = b(k,48) - lu(k,505) * b(k,53)
         b(k,47) = b(k,47) - lu(k,504) * b(k,53)
         b(k,46) = b(k,46) - lu(k,503) * b(k,53)
         b(k,45) = b(k,45) - lu(k,502) * b(k,53)
         b(k,42) = b(k,42) - lu(k,501) * b(k,53)
         b(k,41) = b(k,41) - lu(k,500) * b(k,53)
         b(k,40) = b(k,40) - lu(k,499) * b(k,53)
         b(k,36) = b(k,36) - lu(k,498) * b(k,53)
         b(k,31) = b(k,31) - lu(k,497) * b(k,53)
         b(k,30) = b(k,30) - lu(k,496) * b(k,53)
         b(k,26) = b(k,26) - lu(k,495) * b(k,53)

         b(k,52) = b(k,52) * lu(k,490)
         b(k,51) = b(k,51) - lu(k,489) * b(k,52)
         b(k,50) = b(k,50) - lu(k,488) * b(k,52)
         b(k,49) = b(k,49) - lu(k,487) * b(k,52)
         b(k,48) = b(k,48) - lu(k,486) * b(k,52)
         b(k,47) = b(k,47) - lu(k,485) * b(k,52)
         b(k,46) = b(k,46) - lu(k,484) * b(k,52)
         b(k,42) = b(k,42) - lu(k,483) * b(k,52)
         b(k,40) = b(k,40) - lu(k,482) * b(k,52)
         b(k,37) = b(k,37) - lu(k,481) * b(k,52)
         b(k,36) = b(k,36) - lu(k,480) * b(k,52)

         b(k,51) = b(k,51) * lu(k,474)
         b(k,50) = b(k,50) - lu(k,473) * b(k,51)
         b(k,49) = b(k,49) - lu(k,472) * b(k,51)
         b(k,48) = b(k,48) - lu(k,471) * b(k,51)
         b(k,47) = b(k,47) - lu(k,470) * b(k,51)
         b(k,46) = b(k,46) - lu(k,469) * b(k,51)
         b(k,45) = b(k,45) - lu(k,468) * b(k,51)
         b(k,44) = b(k,44) - lu(k,467) * b(k,51)
         b(k,43) = b(k,43) - lu(k,466) * b(k,51)
         b(k,42) = b(k,42) - lu(k,465) * b(k,51)
         b(k,41) = b(k,41) - lu(k,464) * b(k,51)
         b(k,40) = b(k,40) - lu(k,463) * b(k,51)
         b(k,39) = b(k,39) - lu(k,462) * b(k,51)
         b(k,38) = b(k,38) - lu(k,461) * b(k,51)
         b(k,37) = b(k,37) - lu(k,460) * b(k,51)
         b(k,36) = b(k,36) - lu(k,459) * b(k,51)
         b(k,32) = b(k,32) - lu(k,458) * b(k,51)
         b(k,31) = b(k,31) - lu(k,457) * b(k,51)
         b(k,29) = b(k,29) - lu(k,456) * b(k,51)
         b(k,23) = b(k,23) - lu(k,455) * b(k,51)
         b(k,17) = b(k,17) - lu(k,454) * b(k,51)
         b(k,16) = b(k,16) - lu(k,453) * b(k,51)

         b(k,50) = b(k,50) * lu(k,446)
         b(k,49) = b(k,49) - lu(k,445) * b(k,50)
         b(k,48) = b(k,48) - lu(k,444) * b(k,50)
         b(k,47) = b(k,47) - lu(k,443) * b(k,50)
         b(k,46) = b(k,46) - lu(k,442) * b(k,50)
         b(k,45) = b(k,45) - lu(k,441) * b(k,50)
         b(k,44) = b(k,44) - lu(k,440) * b(k,50)
         b(k,43) = b(k,43) - lu(k,439) * b(k,50)
         b(k,42) = b(k,42) - lu(k,438) * b(k,50)
         b(k,41) = b(k,41) - lu(k,437) * b(k,50)
         b(k,40) = b(k,40) - lu(k,436) * b(k,50)
         b(k,39) = b(k,39) - lu(k,435) * b(k,50)
         b(k,38) = b(k,38) - lu(k,434) * b(k,50)
         b(k,37) = b(k,37) - lu(k,433) * b(k,50)
         b(k,36) = b(k,36) - lu(k,432) * b(k,50)
         b(k,35) = b(k,35) - lu(k,431) * b(k,50)
         b(k,34) = b(k,34) - lu(k,430) * b(k,50)
         b(k,33) = b(k,33) - lu(k,429) * b(k,50)
         b(k,31) = b(k,31) - lu(k,428) * b(k,50)
         b(k,29) = b(k,29) - lu(k,427) * b(k,50)
         b(k,25) = b(k,25) - lu(k,426) * b(k,50)
         b(k,20) = b(k,20) - lu(k,425) * b(k,50)
         b(k,19) = b(k,19) - lu(k,424) * b(k,50)

         b(k,49) = b(k,49) * lu(k,416)
         b(k,48) = b(k,48) - lu(k,415) * b(k,49)
         b(k,47) = b(k,47) - lu(k,414) * b(k,49)
         b(k,46) = b(k,46) - lu(k,413) * b(k,49)
         b(k,45) = b(k,45) - lu(k,412) * b(k,49)
         b(k,44) = b(k,44) - lu(k,411) * b(k,49)
         b(k,43) = b(k,43) - lu(k,410) * b(k,49)
         b(k,42) = b(k,42) - lu(k,409) * b(k,49)
         b(k,41) = b(k,41) - lu(k,408) * b(k,49)
         b(k,36) = b(k,36) - lu(k,407) * b(k,49)
         b(k,35) = b(k,35) - lu(k,406) * b(k,49)
         b(k,18) = b(k,18) - lu(k,405) * b(k,49)

         b(k,48) = b(k,48) * lu(k,396)
         b(k,47) = b(k,47) - lu(k,395) * b(k,48)
         b(k,46) = b(k,46) - lu(k,394) * b(k,48)
         b(k,45) = b(k,45) - lu(k,393) * b(k,48)
         b(k,44) = b(k,44) - lu(k,392) * b(k,48)
         b(k,43) = b(k,43) - lu(k,391) * b(k,48)
         b(k,42) = b(k,42) - lu(k,390) * b(k,48)
         b(k,41) = b(k,41) - lu(k,389) * b(k,48)
         b(k,40) = b(k,40) - lu(k,388) * b(k,48)
         b(k,39) = b(k,39) - lu(k,387) * b(k,48)
         b(k,37) = b(k,37) - lu(k,386) * b(k,48)
         b(k,36) = b(k,36) - lu(k,385) * b(k,48)
         b(k,35) = b(k,35) - lu(k,384) * b(k,48)
         b(k,32) = b(k,32) - lu(k,383) * b(k,48)
         b(k,30) = b(k,30) - lu(k,382) * b(k,48)
         b(k,29) = b(k,29) - lu(k,381) * b(k,48)
         b(k,28) = b(k,28) - lu(k,380) * b(k,48)
         b(k,27) = b(k,27) - lu(k,379) * b(k,48)
         b(k,14) = b(k,14) - lu(k,378) * b(k,48)

         b(k,47) = b(k,47) * lu(k,368)
         b(k,46) = b(k,46) - lu(k,367) * b(k,47)
         b(k,45) = b(k,45) - lu(k,366) * b(k,47)
         b(k,42) = b(k,42) - lu(k,365) * b(k,47)
         b(k,41) = b(k,41) - lu(k,364) * b(k,47)
         b(k,40) = b(k,40) - lu(k,363) * b(k,47)
         b(k,39) = b(k,39) - lu(k,362) * b(k,47)
         b(k,37) = b(k,37) - lu(k,361) * b(k,47)
         b(k,36) = b(k,36) - lu(k,360) * b(k,47)
         b(k,35) = b(k,35) - lu(k,359) * b(k,47)
         b(k,34) = b(k,34) - lu(k,358) * b(k,47)
         b(k,33) = b(k,33) - lu(k,357) * b(k,47)
         b(k,32) = b(k,32) - lu(k,356) * b(k,47)
         b(k,24) = b(k,24) - lu(k,355) * b(k,47)
         b(k,22) = b(k,22) - lu(k,354) * b(k,47)
         b(k,17) = b(k,17) - lu(k,353) * b(k,47)
         b(k,12) = b(k,12) - lu(k,352) * b(k,47)
         b(k,11) = b(k,11) - lu(k,351) * b(k,47)
         b(k,9) = b(k,9) - lu(k,350) * b(k,47)
         b(k,8) = b(k,8) - lu(k,349) * b(k,47)
         b(k,7) = b(k,7) - lu(k,348) * b(k,47)
         b(k,6) = b(k,6) - lu(k,347) * b(k,47)
         b(k,5) = b(k,5) - lu(k,346) * b(k,47)
         b(k,4) = b(k,4) - lu(k,345) * b(k,47)
         b(k,3) = b(k,3) - lu(k,344) * b(k,47)
         b(k,1) = b(k,1) - lu(k,343) * b(k,47)

         b(k,46) = b(k,46) * lu(k,332)
         b(k,45) = b(k,45) - lu(k,331) * b(k,46)
         b(k,44) = b(k,44) - lu(k,330) * b(k,46)
         b(k,43) = b(k,43) - lu(k,329) * b(k,46)
         b(k,42) = b(k,42) - lu(k,328) * b(k,46)
         b(k,41) = b(k,41) - lu(k,327) * b(k,46)
         b(k,40) = b(k,40) - lu(k,326) * b(k,46)
         b(k,39) = b(k,39) - lu(k,325) * b(k,46)
         b(k,38) = b(k,38) - lu(k,324) * b(k,46)
         b(k,37) = b(k,37) - lu(k,323) * b(k,46)
         b(k,36) = b(k,36) - lu(k,322) * b(k,46)
         b(k,35) = b(k,35) - lu(k,321) * b(k,46)
         b(k,34) = b(k,34) - lu(k,320) * b(k,46)
         b(k,33) = b(k,33) - lu(k,319) * b(k,46)
         b(k,32) = b(k,32) - lu(k,318) * b(k,46)
         b(k,31) = b(k,31) - lu(k,317) * b(k,46)
         b(k,30) = b(k,30) - lu(k,316) * b(k,46)
         b(k,29) = b(k,29) - lu(k,315) * b(k,46)
         b(k,28) = b(k,28) - lu(k,314) * b(k,46)
         b(k,27) = b(k,27) - lu(k,313) * b(k,46)
         b(k,25) = b(k,25) - lu(k,312) * b(k,46)
         b(k,24) = b(k,24) - lu(k,311) * b(k,46)
         b(k,23) = b(k,23) - lu(k,310) * b(k,46)
         b(k,22) = b(k,22) - lu(k,309) * b(k,46)
         b(k,13) = b(k,13) - lu(k,308) * b(k,46)
         b(k,10) = b(k,10) - lu(k,307) * b(k,46)

         b(k,45) = b(k,45) * lu(k,295)
         b(k,44) = b(k,44) - lu(k,294) * b(k,45)
         b(k,43) = b(k,43) - lu(k,293) * b(k,45)
         b(k,42) = b(k,42) - lu(k,292) * b(k,45)
         b(k,41) = b(k,41) - lu(k,291) * b(k,45)
         b(k,36) = b(k,36) - lu(k,290) * b(k,45)
         b(k,32) = b(k,32) - lu(k,289) * b(k,45)
         b(k,31) = b(k,31) - lu(k,288) * b(k,45)

         b(k,44) = b(k,44) * lu(k,275)
         b(k,43) = b(k,43) - lu(k,274) * b(k,44)
         b(k,42) = b(k,42) - lu(k,273) * b(k,44)
         b(k,21) = b(k,21) - lu(k,272) * b(k,44)
         b(k,15) = b(k,15) - lu(k,271) * b(k,44)
         b(k,14) = b(k,14) - lu(k,270) * b(k,44)

         b(k,43) = b(k,43) * lu(k,256)
         b(k,42) = b(k,42) - lu(k,255) * b(k,43)
         b(k,40) = b(k,40) - lu(k,254) * b(k,43)
         b(k,39) = b(k,39) - lu(k,253) * b(k,43)

         b(k,42) = b(k,42) * lu(k,246)
         b(k,18) = b(k,18) - lu(k,245) * b(k,42)
         b(k,17) = b(k,17) - lu(k,244) * b(k,42)
         b(k,16) = b(k,16) - lu(k,243) * b(k,42)

         b(k,41) = b(k,41) * lu(k,231)
         b(k,40) = b(k,40) - lu(k,230) * b(k,41)
         b(k,37) = b(k,37) - lu(k,229) * b(k,41)
         b(k,36) = b(k,36) - lu(k,228) * b(k,41)
         b(k,32) = b(k,32) - lu(k,227) * b(k,41)
         b(k,31) = b(k,31) - lu(k,226) * b(k,41)
         b(k,30) = b(k,30) - lu(k,225) * b(k,41)

         b(k,40) = b(k,40) * lu(k,216)
         b(k,39) = b(k,39) - lu(k,215) * b(k,40)
         b(k,38) = b(k,38) - lu(k,214) * b(k,40)
         b(k,36) = b(k,36) - lu(k,213) * b(k,40)
         b(k,34) = b(k,34) - lu(k,212) * b(k,40)
         b(k,30) = b(k,30) - lu(k,211) * b(k,40)
         b(k,26) = b(k,26) - lu(k,210) * b(k,40)
         b(k,19) = b(k,19) - lu(k,209) * b(k,40)

         b(k,39) = b(k,39) * lu(k,201)
         b(k,36) = b(k,36) - lu(k,200) * b(k,39)
         b(k,34) = b(k,34) - lu(k,199) * b(k,39)

         b(k,38) = b(k,38) * lu(k,188)
         b(k,36) = b(k,36) - lu(k,187) * b(k,38)
         b(k,34) = b(k,34) - lu(k,186) * b(k,38)
         b(k,30) = b(k,30) - lu(k,185) * b(k,38)

         b(k,37) = b(k,37) * lu(k,178)
         b(k,36) = b(k,36) - lu(k,177) * b(k,37)

         b(k,36) = b(k,36) * lu(k,173)

         b(k,35) = b(k,35) * lu(k,165)
         b(k,27) = b(k,27) - lu(k,164) * b(k,35)

         b(k,34) = b(k,34) * lu(k,158)

         b(k,33) = b(k,33) * lu(k,147)

         b(k,32) = b(k,32) * lu(k,141)

         b(k,31) = b(k,31) * lu(k,135)
         b(k,23) = b(k,23) - lu(k,134) * b(k,31)

         b(k,30) = b(k,30) * lu(k,129)

         b(k,29) = b(k,29) * lu(k,122)

         b(k,28) = b(k,28) * lu(k,115)

         b(k,27) = b(k,27) * lu(k,109)

         b(k,26) = b(k,26) * lu(k,103)
         b(k,19) = b(k,19) - lu(k,102) * b(k,26)

         b(k,25) = b(k,25) * lu(k,94)

         b(k,24) = b(k,24) * lu(k,87)

         b(k,23) = b(k,23) * lu(k,83)
         b(k,17) = b(k,17) - lu(k,82) * b(k,23)
         b(k,16) = b(k,16) - lu(k,81) * b(k,23)

         b(k,22) = b(k,22) * lu(k,76)
         b(k,1) = b(k,1) - lu(k,75) * b(k,22)

         b(k,21) = b(k,21) * lu(k,70)

         b(k,20) = b(k,20) * lu(k,65)

         b(k,19) = b(k,19) * lu(k,62)

         b(k,18) = b(k,18) * lu(k,58)

         b(k,17) = b(k,17) * lu(k,56)
         b(k,16) = b(k,16) - lu(k,55) * b(k,17)

         b(k,16) = b(k,16) * lu(k,53)

         b(k,15) = b(k,15) * lu(k,50)

         b(k,14) = b(k,14) * lu(k,47)

         b(k,13) = b(k,13) * lu(k,43)

         b(k,12) = b(k,12) * lu(k,39)

         b(k,11) = b(k,11) * lu(k,35)
         b(k,1) = b(k,1) - lu(k,34) * b(k,11)

         b(k,10) = b(k,10) * lu(k,30)

         b(k,9) = b(k,9) * lu(k,27)
         b(k,1) = b(k,1) - lu(k,26) * b(k,9)

         b(k,8) = b(k,8) * lu(k,23)
         b(k,1) = b(k,1) - lu(k,22) * b(k,8)

         b(k,7) = b(k,7) * lu(k,19)
         b(k,1) = b(k,1) - lu(k,18) * b(k,7)

         b(k,6) = b(k,6) * lu(k,15)
         b(k,1) = b(k,1) - lu(k,14) * b(k,6)

         b(k,5) = b(k,5) * lu(k,11)
         b(k,1) = b(k,1) - lu(k,10) * b(k,5)

         b(k,4) = b(k,4) * lu(k,7)
         b(k,1) = b(k,1) - lu(k,6) * b(k,4)

         b(k,3) = b(k,3) * lu(k,3)

         b(k,2) = b(k,2) * lu(k,2)

         b(k,1) = b(k,1) * lu(k,1)

         end if
      end do

      end subroutine LU_SLV

      subroutine SETRXT( lat,
     $                   temp )

      use RXT_NAMES
      use RATES_MODS, rate => rxt_rates

      implicit none

!----------------------------------------------
!       ... Dummy args
!----------------------------------------------
      integer, intent(in)  ::     lat
      real, intent(in)  ::     temp(121)

!----------------------------------------------
!       ... Local variables
!----------------------------------------------
      real    :: itemp(121)
      logical, save :: entered = .false.

         rate(:,rid_a1et,:) = 2.2e-10
         rate(:,rid_a3et,:) = 1.1e-10
         rate(:,rid_a23a,:) = 7.29e-11
         rate(:,rid_a23b,:) = 6.48e-12
         rate(:,rid_a23c,:) = 1.622e-12
         rate(:,rid_b38,:) = 4.9e-11
         rate(:,rid_b39,:) = 6.7e-11
         rate(:,rid_b71,:) = 1.e-11
         rate(:,rid_b72,:) = 2.2e-11
         rate(:,rid_b73a,:) = 2.8e-12
         rate(:,rid_b73b,:) = 7e-13
         rate(:,rid_c1,:) = 1.5e-10
         rate(:,rid_c1a,:) = 1.5e-11
         rate(:,rid_c8,:) = 1e-11
         rate(:,rid_d35,:) = 1.7e-13
         rate(:,rid_d71,:) = 2.8e-10
         rate(:,rid_d72,:) = 1e-10
         rate(:,rid_d73,:) = 2.4e-11
         rate(:,rid_d74,:) = 4.7e-13
         rate(:,rid_d75,:) = 1.5e-10
         rate(:,rid_d101,:) = 3.3e-10
         rate(:,rid_d102,:) = 2.3e-10
         rate(:,rid_d103,:) = 1.4e-10
         rate(:,rid_d104,:) = 2e-10
         rate(:,rid_d105,:) = 1.3e-10
         rate(:,rid_d106,:) = 5e-11
         rate(:,rid_d107,:) = 1e-10
         rate(:,rid_e11,:) = 1.1e-11
         rate(:,rid_e71,:) = 1.5e-10
         rate(:,rid_e72,:) = 7.5e-11
         rate(:,rid_e91,:) = 1e-10
         rate(:,rid_e92,:) = 1.5e-10
         rate(:,rid_e93,:) = 1.8e-10
         rate(:,rid_hk7a,:) = 1.2e-10
         rate(:,rid_hk7b,:) = 1.2e-10
         rate(:,rid_hk9,:) = 1.0e-20
         rate(:,rid_hk10,:) = 1.3e-16
         rate(:,rid_hk12,:) = 2.1e-15
         rate(:,rid_hk13,:) = 4.2e-13
         rate(:,rid_hk14,:) = 2.2e-11
         rate(:,rid_hk15,:) = 8.0e-14
         rate(:,rid_hk16,:) = 3.9e-17
         rate(:,rid_hk30,:) = 2.58e-04
         rate(:,rid_hk31,:) = 0.0758
      itemp(:) = 1. / temp(:)
      rate(:,rid_a2,lat) = 1.4e-10 * EXP( -470. * itemp(:) )
      rate(:,rid_a5,lat) = 2.2e-11 * EXP( 120. * itemp(:) )
      rate(:,rid_a6,lat) = 1.5e-12 * EXP( -880. * itemp(:) )
      rate(:,rid_a6b,lat) = 2.0e-14 * EXP( -680. * itemp(:) )
      rate(:,rid_a7,lat) = 3.e-11 * EXP( 200. * itemp(:) )
      rate(:,rid_a17,lat) = 4.8e-11 * EXP( 250. * itemp(:) )
      rate(:,rid_a19,lat) = 5.5e-12 * EXP( -2000. * itemp(:) )
      rate(:,rid_a24,lat) = 8.8e-12 * EXP( -4200. * itemp(:) )
      rate(:,rid_a26,lat) = 3.5e-12 * EXP( 250. * itemp(:) )
      rate(:,rid_a30,lat) = 2.9e-12 * EXP( -160. * itemp(:) )
      rate(:,rid_a81,lat) = 1.4e-12 * EXP( -2000. * itemp(:) )
      rate(:,rid_a82,lat) = 4.2e-12 * EXP( -240. * itemp(:) )
      rate(:,rid_b3,lat) = 5.6e-12 * EXP( 180. * itemp(:) )
      rate(:,rid_b4,lat) = 3.e-12 * EXP( -1500. * itemp(:) )
      rate(:,rid_b6,lat) = 2.1e-11 * EXP( 100. * itemp(:) )
      rate(:,rid_b7,lat) = 1.5e-11 * EXP( -3600. * itemp(:) )
      rate(:,rid_b9,lat) = 1.2e-13 * EXP( -2450. * itemp(:) )
      rate(:,rid_b28,lat) = 1.3e-12 * EXP( 380. * itemp(:) )
      rate(:,rid_b84,lat) = 1.5e-11 * EXP( 170. * itemp(:) )
      rate(:,rid_c2,lat) = 2.45e-12 * EXP( -1775. * itemp(:) )
      rate(:,rid_c3,lat) = 6.6e-33 * EXP( -1103. * itemp(:) )
      rate(:,rid_c5,lat) = 3.0e-12 * EXP( 280. * itemp(:) )
      rate(:,rid_c7,lat) = 3.8e-13 * EXP( 800. * itemp(:) )
      rate(:,rid_c9,lat) = 3.4e-11 * EXP( -1600. * itemp(:) )
      rate(:,rid_c10,lat) = 6.3e-13 * EXP( -2058. * itemp(:) )
      rate(:,rid_c17,lat) = 2.204e-12 * EXP( 200. * itemp(:) )
      rate(:,rid_c44,lat) = 1.596e-12 * EXP( 200. * itemp(:) )
      rate(:,rid_d0,lat) = 4.1e-12 * EXP( -1400. * itemp(:) )
      rate(:,rid_d1,lat) = 3.2e-11 * EXP( -1250. * itemp(:) )
      rate(:,rid_d2,lat) = 2.3e-11 * EXP( -200. * itemp(:) )
      rate(:,rid_d3,lat) = 3.0e-11 * EXP( 70. * itemp(:) )
      rate(:,rid_d4,lat) = 6.4e-12 * EXP( 290. * itemp(:) )
      rate(:,rid_d5,lat) = 9.6e-12 * EXP( -1360. * itemp(:) )
      rate(:,rid_d6,lat) = 3.7e-11 * EXP( -2300. * itemp(:) )
      rate(:,rid_d7,lat) = 1.8e-11 * EXP( 170. * itemp(:) )
      rate(:,rid_d8,lat) = 7.4e-12 * EXP( 270. * itemp(:) )
      rate(:,rid_d8a,lat) = 3.2e-13 * EXP( 320. * itemp(:) )
      rate(:,rid_d10,lat) = 8.1e-11 * EXP( -30. * itemp(:) )
      rate(:,rid_d11,lat) = 2.6e-12 * EXP( -350. * itemp(:) )
      rate(:,rid_d32,lat) = 2.9e-12 * EXP( -800. * itemp(:) )
      rate(:,rid_d33,lat) = 4.8e-13 * EXP( 700. * itemp(:) )
      rate(:,rid_d34,lat) = 3e-12 * EXP( -500. * itemp(:) )
      rate(:,rid_d37,lat) = 2.5e-12 * EXP( -130. * itemp(:) )
      rate(:,rid_d47,lat) = 3.5e-13 * EXP( -1370. * itemp(:) )
      rate(:,rid_d48,lat) = 1e-12 * EXP( -1590. * itemp(:) )
      rate(:,rid_d49,lat) = 3e-11 * EXP( -2450. * itemp(:) )
      rate(:,rid_d50,lat) = 1.8e-12 * EXP( -1550. * itemp(:) )
      rate(:,rid_d52,lat) = 1e-12 * EXP( -1600. * itemp(:) )
      rate(:,rid_d62,lat) = 4.5e-13 * EXP( 800. * itemp(:) )
      rate(:,rid_d63,lat) = 3.4e-11 * EXP( 160. * itemp(:) )
      rate(:,rid_d64,lat) = 2.4e-12 * EXP( -960. * itemp(:) )
      rate(:,rid_d65,lat) = 2.5e-12 * EXP( -600. * itemp(:) )
      rate(:,rid_d81,lat) = 1.4e-12 * EXP( -900. * itemp(:) )
      rate(:,rid_d82,lat) = 6.5e-12 * EXP( 135. * itemp(:) )
      rate(:,rid_d83,lat) = 4.1e-11 * EXP( -450. * itemp(:) )
      rate(:,rid_d84,lat) = 1.1e-11 * EXP( -980. * itemp(:) )
      rate(:,rid_d85,lat) = 1.e-11 * EXP( -3300. * itemp(:) )
      rate(:,rid_d87,lat) = 1.2e-12 * EXP( -330. * itemp(:) )
      rate(:,rid_e0,lat) = 4e-12 * EXP( -1470. * itemp(:) )
      rate(:,rid_e1,lat) = 1.6e-13 * EXP( -710. * itemp(:) )
      rate(:,rid_e2,lat) = 1.7e-11 * EXP( -800. * itemp(:) )
      rate(:,rid_e3,lat) = 1.9e-11 * EXP( 230. * itemp(:) )
      rate(:,rid_e4,lat) = 8.8e-12 * EXP( 260. * itemp(:) )
      rate(:,rid_e5a,lat) = 9.5e-13 * EXP( 550. * itemp(:) )
      rate(:,rid_e5b,lat) = 2.3e-12 * EXP( 260. * itemp(:) )
      rate(:,rid_e5c,lat) = 4.1e-13 * EXP( 290. * itemp(:) )
      rate(:,rid_e6,lat) = 1.5e-12 * EXP( 230. * itemp(:) )
      rate(:,rid_e7,lat) = 1.5e-11 * EXP( -600. * itemp(:) )
      rate(:,rid_e8,lat) = 2.6e-11 * EXP( -1300. * itemp(:) )
      rate(:,rid_e9,lat) = 1.7e-11 * EXP( -800. * itemp(:) )
      rate(:,rid_e15,lat) = 3.4e-12 * EXP( 540. * itemp(:) )
      rate(:,rid_e81,lat) = 5.8e-12 * EXP( -1500. * itemp(:) )
      rate(:,rid_hk3,lat) = 8.0e-12 * EXP( -2060. * itemp(:) )
      rate(:,rid_hk4,lat) = 1.8e-11 * EXP( 110. * itemp(:) )
      rate(:,rid_hk5a,lat) = 0.736e-11 * EXP( 70. * itemp(:) )
      rate(:,rid_hk5b,lat) = 2.464e-11 * EXP( 70. * itemp(:) )
      rate(:,rid_hk8,lat) = 3.6e-18 * EXP( -220. * itemp(:) )

      end subroutine SETRXT

      subroutine ADJRXT( rate
     $,                  inv )

      use RXT_NAMES

      implicit none

!--------------------------------------------------------------------
!       ... Dummy args
!--------------------------------------------------------------------
      real, intent(in) ::      inv(121,2)
      real, intent(inout) ::   rate(121,202)


      rate(:,rid_a1) = rate(:,rid_a1) * inv(:,1)
      rate(:,rid_a83) = rate(:,rid_a83) * inv(:,1)
      rate(:,rid_b12) = rate(:,rid_b12) * inv(:,1)
      rate(:,rid_b22) = rate(:,rid_b22) * inv(:,1)
      rate(:,rid_b23) = rate(:,rid_b23) * inv(:,1)
      rate(:,rid_b24) = rate(:,rid_b24) * inv(:,1)
      rate(:,rid_b32) = rate(:,rid_b32) * inv(:,1)
      rate(:,rid_b81) = rate(:,rid_b81) * inv(:,1)
      rate(:,rid_b82) = rate(:,rid_b82) * inv(:,1)
      rate(:,rid_c3) = rate(:,rid_c3) * inv(:,1)
      rate(:,rid_d31) = rate(:,rid_d31) * inv(:,1)
      rate(:,rid_d36) = rate(:,rid_d36) * inv(:,1)
      rate(:,rid_d60) = rate(:,rid_d60) * inv(:,1)
      rate(:,rid_d61) = rate(:,rid_d61) * inv(:,1)
      rate(:,rid_e13) = rate(:,rid_e13) * inv(:,1)
      rate(:,rid_hk1) = rate(:,rid_hk1) * inv(:,1)
      rate(:,rid_hk2) = rate(:,rid_hk2) * inv(:,1)
      rate(:,rid_hk4) = rate(:,rid_hk4) * inv(:,2)
      rate(:,rid_hk9) = rate(:,rid_hk9) * inv(:,2)
      rate(:,rid_hk12) = rate(:,rid_hk12) * inv(:,2)
      rate(:,rid_hk21) = rate(:,rid_hk21) * inv(:,2) * inv(:,1)

      end subroutine ADJRXT

      subroutine PHTADJ( p_rate
     $,                  inv )

      use RXT_NAMES

      implicit none

!--------------------------------------------------------------------
!       ... Dummy args
!--------------------------------------------------------------------
      real, intent(in) ::      inv(121,2)
      real, intent(inout) ::      p_rate(121,47)


      end subroutine PHTADJ
      real function SECOND()
!-------------------------------------------------------------
!	... Elapsed timer function
!-------------------------------------------------------------

      implicit none

      real(4) :: times(2), eltime
      real(4) :: ETIME

      eltime = ETIME( times )
      SECOND = DBLE( eltime )

      end function SECOND

      subroutine SOC_INTI( )
!--------------------------------------------------------
!    	... Initialize chemistry modules
!--------------------------------------------------------

      use TRACNM
      use CHEM_MODS
      use SIM_CONTROLS, only : data_dir
      use ASCII_UTILS, only : NAVU

      implicit none

!--------------------------------------------------------
!    	... Local variables
!--------------------------------------------------------
      integer  ::  i, k, ios, unit
      character (len=64) :: filename

!--------------------------------------------------------
!    	... Open chem input unit
!--------------------------------------------------------
      unit = NAVU()
      filename = data_dir(:LEN_TRIM(data_dir)) // 'preprocessed.dat'
      OPEN( unit = unit
     $,     file = filename
     $,     status = 'old'
     $,     recl   = 1024
     $,     iostat = ios )
      if( ios /= 0 ) then
         write(*,*) ' SOC_INTI: Failed to open preprocessed.dat file'
         write(*,*) ' Error code = ',ios
         stop 'Opn error'
      end if

!--------------------------------------------------------
!        ... Read map info from data file
!--------------------------------------------------------
      read(unit,'(5i4)',iostat=ios) clscnt
      if( ios /= 0 ) goto 1000
      read(unit,'(4i4)',iostat=ios) cls_rxt_cnt
      if( ios /= 0 ) goto 1000
      do k = 1,5
	 if( clscnt(k) /= 0 ) then
	    read(unit,'(20i4)',iostat=ios) base2cls(:56,k)
	    read(unit,'(20i4)',iostat=ios) clsmap(:clscnt(k),k)
            if( ios /= 0 ) goto 1000
         end if
      end do
      read(unit,'(10a8)',iostat=ios) solsym(:56)
      if( ios /= 0 ) goto 1000
      do i = 2,5
	 if( clscnt(i) /= 0 ) then
	    read(unit,'(20i4)',iostat=ios) permute(:clscnt(i),i)
            if( ios /= 0 ) goto 1000

	    if( i > 3 ) then
	       read(unit,'(20i4)',iostat=ios) permute_orig(:clscnt(i),i)
               if( ios /= 0 ) goto 1000
	       read(unit,'(20i4)',iostat=ios) diag_map(:clscnt(i))
               if( ios /= 0 ) goto 1000
	       exit
	    end if

	 end if
      end do

      CLOSE( unit )
!     call IMP_SLV_INTI() ! this routine deleted from preproc/in/vector/imp_slv.F at v6s08

      return

 1000 CLOSE( unit )
      write(*,*) ' SOC_INTI: Failed to read preprocessed.dat file'
      write(*,*) ' Error code = ',ios
      stop 'Read error'

      end subroutine SOC_INTI

